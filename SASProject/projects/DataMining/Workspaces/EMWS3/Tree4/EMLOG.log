*------------------------------------------------------------*
User:                QR
Date:                May 11, 2019
Time:                23:26:53
Site:                12601940
Platform:            W32_7PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                May 11, 2019
Time:                23:26:38
*------------------------------------------------------------*
14716  proc freq data=EMWS3.Tree4_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.Tree4META;
14718  run;
 
NOTE: There were 23 observations read from the data set EMWS3.TREE4_VARIABLESET.
NOTE: The data set WORK.TREE4META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
14719  proc print data=WORK.Tree4META label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE4META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14773  data WORK.Tree4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14774  length ORDER $20;
14775  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14776     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14777  set EMWS3.TREE4_REP_UPDOWNIND_DM( where=(_TYPE_="TARGET"));
14778  NumLevels=3;
14779  select(upcase(ORDER));
14780  when('DESC') ORDER = 'Descending';
14781  when('ASC') ORDER = 'Ascending';
14782  when('FMTDESC') ORDER = 'Formatted Descending';
14783  when('FMTASC') ORDER = 'Formatted Ascending';
14784  otherwise ORDER = 'Descending';
14785  end;
14786  output;
14787  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE4_REP_UPDOWNIND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE4_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
14788  title9 ' ';
14789  proc print data=WORK.Tree4_EVENT noobs label;
14790  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14791  title9 ' ';
14792  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14793  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE4_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14794  title10;
 
"No decisions defined for target "REP_updownInd"."
14795  proc print data = EMWS3.Tree4_REP_updownInd_DM noobs label;
14796  var _type_ variable label;
14797  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14798  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14799  title9 ' ';
14800  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14801  run;
 
NOTE: There were 9 observations read from the data set EMWS3.TREE4_REP_UPDOWNIND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14802  title10;
 
14803  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15311  *------------------------------------------------------------*;
15312  * Tree4: Generation of macros and macro variables;
15313  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15314  *------------------------------------------------------------*;
 
15315  %let EMEXCEPTIONSTRING=;
15316  *------------------------------------------------------------*;
15317  * TRAIN: Tree4;
15318  *------------------------------------------------------------*;
15319  %let EM_ACTION = TRAIN;
15320  %let syscc = 0;
15321  %macro main;
15322
15323    %if %upcase(&EM_ACTION) = CREATE %then %do;
15324      filename temp catalog 'sashelp.emmodl.tree_create.source';
15325      %include temp;
15326      filename temp;
15327
15328      %em_tree_create;
15329    %end;
15330
15331     %else
15332     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15333
15334         filename temp catalog 'sashelp.emmodl.tree_train.source';
15335         %include temp;
15336         filename temp;
15337         %em_tree_train;
15338     %end;
15339
15340    %else
15341    %if %upcase(&EM_ACTION) = SCORE %then %do;
15342      filename temp catalog 'sashelp.emmodl.tree_score.source';
15343      %include temp;
15344      filename temp;
15345
15346      %em_tree_score;
15347
15348    %end;
15349
15350    %else
15351    %if %upcase(&EM_ACTION) = REPORT %then %do;
15352
15353         filename temp catalog 'sashelp.emmodl.tree_report.source';
15354         %include temp;
15355         filename temp;
15356
15357         %em_tree_report;
15358     %end;
15359
15360    %else
15361    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15362
15363         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15364         %include temp;
15365         filename temp;
15366         %EM_TREE_OPENTREEVIEWER;
15367
15368     %end;
15369
15370    %else
15371    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15372
15373         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15374         %include temp;
15375         filename temp;
15376         %EM_TREE_CLOSETREEVIEWER;
15377
15378     %end;
15379
15380
15381     %doendm:
15382  %mend main;
15383
15384  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15386 +%macro em_tree_train;
15388 +   %if &EM_IMPORT_DATA eq %then %do;
15389 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15390 +       %put &em_codebar;
15391 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15392 +       %put &errormsg;
15393 +       %put &em_codebar;
15394 +       %goto doendm;
15395 +   %end;
15396 +   %else
15397 +       %let EMEXCEPTIONSTRING =;
15399 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15400 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15401 +        %put &em_codebar;
15402 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15403 +        %put &errormsg;
15404 +        %put &em_codebar;
15405 +        %goto doendm;
15406 +   %end;
15408 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15409 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15410 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15411 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15412 +        %put &em_codebar;
15413 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15414 +        %put &errormsg;
15415 +        %put &em_codebar;
15416 +        %goto doendm;
15417 +   %end;
15419 +   /* Initialize property macro variables */
15420 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15421 +   %include temp;
15422 +   filename temp;
15424 +   %EM_SetProperties;
15426 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15427 +   %EM_GETNAME(key=EMTREE, type=DATA);
15428 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15429 +     /* if import eq Y and no importtable defined, throw an exception */
15430 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15431 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15432 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15433 +         %put &em_codebar;
15434 +         %put &errmsg;
15435 +         %put &em_codebar;
15436 +         %goto doendm;
15437 +      %end;
15438 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15439 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15440 +         %put &em_codebar;
15441 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15442 +         %put &errormsg;
15443 +         %put &em_codebar;
15444 +         %goto doendm;
15445 +      %end;
15446 +      %else %do;
15447 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15448 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15449 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15450 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15451 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15452 +         %let dsid = %sysfunc(close(&dsid));
15453 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15454 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15455 +            %put &em_codebar;
15456 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15457 +            %put &errormsg;
15458 +            %put &em_codebar;
15459 +            %goto doendm;
15460 +         %end;
15461 +      %end;
15462 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15463 +         proc delete data=&EM_USER_EMTREE;
15464 +         run;
15465 +      %end;
15466 +   %end;
15467 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15468 +      proc delete data=&EM_USER_EMTREE;
15469 +      run;
15470 +   %end;
15472 +   /* load tree macros */
15473 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15474 +   %include temp;
15475 +   filename temp;
15477 +   /* data sets */
15478 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15479 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15480 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15482 +   /* files */
15483 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15485 +   /* check actual num of target levels */
15486 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15487 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15488 +                              nLevel=_nTargetLevel );
15489 +      %if &_nTargetLevel  > 2 %then %do;
15490 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15491 +        %put &em_codebar;
15492 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15493 +        %put &errormsg;
15494 +        %put &em_codebar;
15495 +        %goto doendm;
15496 +      %end;
15497 +   %end;
15499 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15500 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15501 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15502 +        %let costflag=0;
15503 +        data _null_;
15504 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15505 +          if eof then call symput("costflag", _N_);
15506 +        run;
15507 +        %if &costflag gt 0 %then %do;
15508 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15509 +          %put &em_codebar;
15510 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15511 +          %put &errormsg;
15512 +          %put &em_codebar;
15513 +          %goto doendm;
15514 +       %end;
15515 +     %end;
15516 +   %end;
15518 +   /* determine if multiple targets will be processed */
15519 +   %let em_tree_multipleTargets=N;
15520 +   %let em_tree_numTarget = 1;
15521 +   %let em_tree_targetVars=;
15523 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15524 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15525 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15526 +         %let em_tree_multipleTargets=N;
15527 +      %end;
15528 +      %else %do;
15529 +         /* create macro array of targets  */
15530 +         data _null_;
15531 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15532 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15533 +           if eof then
15534 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15535 +        run;
15537 +        %if &em_tree_numTarget gt 1 %then %do;
15538 +           %let em_tree_multipleTargets=Y;
15539 +        %end;
15540 +      %end;
15541 +   %end;
15543 +   /* create view of only necessary variable for performance reasons */
15544 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15545 +   data &tempData / view=&tempData;
15546 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15547 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15548 +       %EM_TARGET
15549 +     %end;
15550 +     %else %do;
15551 +       %if &em_tree_numTarget ne 0 %then %do;
15552 +         %do i=1 %to &em_tree_numTarget;
15553 +            &&em_tree_targetVars&i
15554 +         %end;
15555 +       %end;
15556 +     %end;
15557 +     );
15558 +   run;
15560 +   /* run Tree procedure */
15561 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15563 +   /* Check return code and throw exception if error is detected */
15564 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15565 +   %if &syserr %then %do;
15566 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15567 +     %goto doendm;
15568 +   %end;
15570 +   /* add decision score code if multiple targets are processed */
15571 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15572 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15573 +   %end;
15575 +   /* create outfit dataset if multiple score statements have been executed */
15576 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15578 +   /* create English Rules */
15579 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15580 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15581 +       %em_tree_makeEnglishRules;
15583 +       /* English Rules */
15584 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15586 +     %end;
15587 +   filename x;
15589 +   %doendm:
15590 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15591 +%macro EM_SetProperties;
15593 +   /* train properties */
15594 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15636 +   /* properties for interactive sample */
15637 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15642 +   /* report properties */
15643 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15652 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15653 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15654 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15657 +   /* score properties */
15658 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15659 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15661 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15663 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15664 +  %global &nLevel;
15665 +  proc dmdb batch data=&indata
15666 +    classout=_tmp_dmdbout;
15667 +    class &target;
15668 +  run;
15669 +  data _tmp_dmdbout;
15670 +    set _tmp_dmdbout;
15671 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15672 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15673 +  run;
15674 +  data _null_;
15675 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15676 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15677 +    %let dsid = %sysfunc(close(&dsid));
15678 +     call symput("&nLevel", put(&_obs, Best12.));
15679 +  run;
15681 +  proc datasets lib=work nolist;
15682 +     delete _tmp_dmdbout;
15683 +  run;
15684 +  quit;
15685 +%Mend EM_CheckBinaryTargetLevel;
15688 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15690 +  /* determine the number of obs in training data */
15691 +  proc sql;
15692 +    reset noprint;
15693 +    select count(*) into :em_nobs from &indata;
15694 +  quit;
15696 +  /* determine the number of input variables */
15697 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15698 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15700 +  /* retrieve targetEvent from decmeta */
15701 +  %let targetEvent=;
15702 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15703 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15704 +      data _null_;
15705 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15706 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15707 +      run;
15708 +    %end;
15709 +  %end;
15711 +  /* create targetTable if multipleTar eq Y */
15712 +  data temptarget;
15713 +    set &EM_DATA_VARIABLESET;
15714 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15715 +  run;
15717 + /* data sets */
15718 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15719 + %EM_GETNAME(key=EMTREE,        type=DATA);
15720 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15721 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15722 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15723 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15724 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15725 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15726 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15727 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15729 + /* files */
15730 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15731 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15733 + /* turn on pmml if requested */
15734 + %let nnpmml=0;
15735 + %if %symexist(EM_PMML) %then %do;
15736 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15737 +       %let nnpmml=1;
15739 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15740 +%end;
15742 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15744 + %if &nnpmml or &numClassTarget %then %do;
15746 +       /* create dmdb needed for pmml generation */
15747 +       %let tree_maxlevel = 512;
15748 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15749 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15750 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15751 +         %end;
15752 +       %end;
15753 +       %if &tree_maxlevel gt 0 %then %do;
15754 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15755 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15756 +       %end;
15758 +       %let targetOrderString =;
15759 +       %let targetString = ;
15760 +       data _null_;
15761 +          length orderString nameString $10000;
15762 +          retain orderString nameString;
15763 +          set &em_data_variableset end=eof;
15764 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15765 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15766 +          %end;
15767 +          %else %do;
15768 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15769 +          %end;          select(order);
15770 +            when('')        order ='DESC';
15771 +            when('FMTASC')  order='ASCFMT';
15772 +            when('FMTDESC') order='DESFMT';
15773 +            otherwise;
15774 +          end;
15775 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15776 +          nameString = trim(nameString)!!' '!!trim(NAME);
15778 +          if eof then do;
15779 +             call symput('targetOrderString', trim(orderString));
15780 +             call symput('targetString', trim(nameString));
15781 +          end;
15782 +       run;
15784 +       %let arborkluge= "work._treeDMDB";
15786 +       proc dmdb batch data=&indata
15787 +       %if &nnpmml %then %do;
15788 +           PMML
15789 +       %end;
15790 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15793 +   %if &nnpmml %then %do;
15794 +        %if "%EM_ID" ne "" %then %do;
15795 +          id %EM_ID;
15796 +        %end;
15797 +        %if &EM_NUM_CLASS gt 0 %then %do;
15798 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15799 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15800 +               &targetOrderString;
15801 +        %end;
15802 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15803 +          var %EM_INTERVAL;
15804 +        %end;
15805 +        target &targetString %EM_INTERVAL_TARGET;
15806 +        %if "%EM_FREQ" ne "" %then %do;
15807 +          freq %EM_FREQ;
15808 +        %end;
15809 +  %end;
15810 +  %else %do;
15811 +      class  &targetOrderString;
15812 +      target &targetString %EM_INTERVAL_TARGET;
15813 +  %end;
15814 +       run;
15815 +       quit;
15817 +       proc datasets lib=work nolist;
15818 +          delete classout varout;
15819 +       run;
15820 +       quit;
15822 +    %end;
15823 + %end;
15825 + /* run Arbor procedure */
15826 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15827 +  proc arbor data=&INDATA
15829 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15830 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15831 +  %end;
15833 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15834 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15835 +  %end;
15837 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15838 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15839 +  %end;
15841 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15842 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15843 +  %end;
15845 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15846 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15847 +  %end;
15849 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15850 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15851 +  %end;
15852 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15853 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15854 +  %end;
15855 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15856 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15857 +  %end;
15859 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15860 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15861 +      alpha = &EM_PROPERTY_SIGLEVEL
15862 +    %end;
15863 +  %end;
15865 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15866 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15867 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15868 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15869 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15871 +        padjust =
15872 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15873 +          &chaid
15874 +        %end;
15875 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15876 +          DEPTH
15877 +        %end;
15878 +      %end;
15879 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15880 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15881 +         pvars = &num_inputs
15882 +      %end;
15883 +    %end;
15884 +  %end;
15885 +  %else %do;
15886 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15887 +         padjust = NONE
15888 +      %end;
15889 +  %end;
15891 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15892 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15893 +    Maxrules = &num_nrules
15894 +  %end;
15896 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15897 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15898 +    Maxsurrs = &num_nsurrs
15899 +  %end;
15901 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15902 +     Missing=&EM_PROPERTY_MISSINGVALUE
15903 +  %end;
15905 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15906 +     USEVARONCE
15907 +  %end;
15909 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15910 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15911 +  %end;
15914 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15915 +    event = "&targetEvent"
15916 +  %end;
15918 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15919 +     DECSEARCH
15920 +  %end;
15922 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15923 +     PRIORSSEARCH
15924 +  %end;
15926 +  %if &arbor_1 ne %then %do;
15927 +    &arbor_1
15928 +  %end;
15930 +  %if &em_arbor ne %then %do;
15931 +     &em_arbor
15932 +  %end;
15933 +  ;
15934 + %end;
15935 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15936 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15937 +       interact;
15938 + %end;
15939 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15940 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15941 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15942 +    %put &em_codebar;
15943 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15944 +    %put &errormsg;
15945 +    %put &em_codebar;
15946 +    %goto doendm;
15947 +   %end;
15948 +   %else %do;
15949 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15950 +       interact;
15951 +   %end;
15952 + %end;
15954 + %else %do;
15955 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15956 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15957 +    %put &em_codebar;
15958 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15959 +    %put &errormsg;
15960 +    %put &em_codebar;
15961 +    %goto doendm;
15962 +   %end;
15963 +   %else %do;
15964 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15965 +        interact;
15966 +   %end;
15967 + %end;
15969 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15970 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15971 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15972 +    %end;
15974 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15975 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15976 +    %end;
15978 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15979 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15980 +    %end;
15982 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15983 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15984 +    %end;
15986 +    %if "%EM_FREQ" ne "" %then %do;
15987 +       freq %EM_FREQ;
15988 +    %end;
15990 +    %if "&multipleTar" eq "Y" %then %do;
15991 +       /* cycle through all target vars in variableset */
15992 +       %let tdsid = %sysfunc(open(temptarget));
15993 +       %if &tdsid %then %do;
15994 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15995 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15996 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15997 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15998 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15999 +             target &var / level = &lvl
16000 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16001 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16002 +             %end;
16003 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16004 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16005 +             %end;
16006 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16007 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16008 +             %end;
16009 +          %end;
16010 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16011 +       %end;
16012 +       useTarget variable = %EM_TARGET;
16013 +    %end;
16014 +    %else %do;
16015 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16016 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16017 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16018 +      %end;
16019 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16020 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16021 +      %end;
16022 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16023 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16024 +      %end;
16025 +    %end;
16027 +    %if "&multipleTar" eq "N" %then %do;
16028 +      &EM_DEC_STATEMENT;
16029 +    %end;
16031 +    Performance &EM_PROPERTY_PERFORMANCE
16032 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16033 +      nodesize=&EM_PROPERTY_NODESAMPLE
16034 +    %end;
16035 +    ;
16037 +    %if "&intFlag" eq "Y" %then %do;
16038 +       INTERACT Largest;
16039 +       Train maxnewdepth=0;
16040 +    %end;
16042 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16043 +         Assess
16044 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16045 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16046 +              %put &em_codebar;
16047 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16048 +              %put &errormsg;
16049 +              %put &em_codebar;
16050 +            %end;
16051 +            %else %do;
16052 +               Validata=&EM_IMPORT_VALIDATE
16053 +            %end;
16054 +         %end;
16055 +         %else %do;
16056 +           NoValidata
16057 +         %end;
16058 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16059 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16060 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16061 +               %if &dsid %then %do;
16062 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16063 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16064 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16065 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16066 +                   %else %do;
16067 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16068 +                      %else %let measure= MISC;
16069 +                   %end;
16070 +                 %end;
16071 +               %end;
16072 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16073 +            %end;
16074 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16075 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16076 +                 %let measure=ASE;
16077 +              %end;
16078 +              %else %do;
16079 +                 %let measure=MISC;
16080 +              %end;
16081 +            %end;
16082 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16083 +              %let measure=ASE;
16084 +            %end;
16085 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16086 +               %let measure = LIFT;
16087 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16088 +               %if &dsid %then %do;
16089 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16090 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16091 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16092 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16093 +                 %end;
16094 +               %end;
16095 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16096 +            %end;
16097 +            measure=&measure
16098 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16099 +               event = "&targetEvent"
16100 +            %end;
16101 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16102 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16103 +            %end;
16104 +         %end;
16105 +         %if "&multipleTar" eq "N" %then %do;
16106 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16107 +               CV
16108 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16109 +                 CVNITer = &EM_PROPERTY_CVNITER
16110 +               %end;
16111 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16112 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16113 +               %end;
16114 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16115 +                 CVSeed = &EM_PROPERTY_CVSEED
16116 +               %end;
16117 +            %end;
16118 +         %end;
16119 +       %end;
16120 +      ;
16122 +      %if "&intFlag" ne "Y" %then %do;
16123 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16124 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16125 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16126 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16128 +          SUBTREE &subtree
16129 +          %if "&subtree" eq "NLEAVES" %then %do;
16130 +            =&EM_PROPERTY_NSUBTREE
16131 +          %end;
16132 +          ;
16133 +        %end;
16135 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16136 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16137 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16138 +          %end;
16139 +       %end;
16140 +      %end;
16141 + %end;
16144 + MakeMacro nleaves = nleaves;
16145 + save
16146 + %if "&EM_USER_EMTREE" ne "" %then %do;
16147 +   MODEL=&EM_USER_EMTREE
16148 + %end;
16149 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16150 +   SEQUENCE=&EM_USER_OUTSEQ
16151 + %end;
16152 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16153 +   IMPORTANCE=&EM_USER_OUTIMPORT
16154 + %end;
16155 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16156 +   NODESTAT=&EM_USER_OUTNODES
16157 + %end;
16158 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16159 +   SUMMARY=&EM_USER_OUTSUMMARY
16160 + %end;
16161 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16162 +   STATSBYNODE=&EM_USER_OUTSTATS
16163 + %end;
16164 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16165 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16166 + %end;
16167 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16168 +   Pathlistnonmissing=&EM_USER_OUTPATH
16169 + %end;
16170 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16171 +   RULES = &EM_USER_OUTRULES
16172 + %end;
16173 + ;
16175 + %if "&intFlag" ne "Y" %then %do;
16177 +   %let lookupString = ;
16178 +   %if ^%symexist(EM_OPTION) %then
16179 +      %let EM_OPTION=;
16181 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16182 +      %let lookupString = LOOKUP=SELECT;
16183 +   %end;
16185 +   %let codetext=;
16186 +   %let norescodetxt=;
16188 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16189 +     %let codetext=&codetext DUMMY;
16190 +     %let norescodetxt=&norescodetxt DUMMY;
16191 +   %end;
16192 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16193 +     %let codetext=&codetext NOLEAFID;
16194 +     %let norescodetxt=&norescodetxt NOLEAFID;
16195 +   %end;
16196 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16197 +     %let norescodetxt=&norescodetxt NOPRED;
16198 +   %end;
16200 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16201 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16203 +   %if &nnpmml %then %do;
16204 +     code pmml;
16205 +   %end;
16207 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16208 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16209 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16210 +   %end;
16211 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16212 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16213 +   %end;
16214 + %end;
16216 + run;
16217 + quit;
16219 + /*%em_checkerror(); */
16220 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16221 +   /* Delete DMDB catalog */
16222 +   proc datasets lib=work nolist;
16223 +       delete _treeDMDB / mt=cat;
16224 +  run;
16225 +  %end;
16227 + %if &nnpmml %then %do;
16228 +    ods pmml close;
16229 + %end;
16231 +  %doendm:
16233 +%mend em_tree_runTreeProcedure;
16235 +%macro em_tree_createFitStats( multipleTar= );
16238 +  /* create targetTable is multipleTar eq Y */
16239 +  data temptarget;
16240 +    set &EM_DATA_VARIABLESET;
16241 +    where ROLE="TARGET";
16242 +  run;
16244 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16245 +   data &EM_USER_EMOUTFIT;
16246 +     length target $32;
16247 +     merge work.fit_train
16248 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16249 +       work.fit_valid
16250 +     %end;
16251 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16252 +       work.fit_test
16253 +     %end;
16254 +     ;
16255 +     %if "&multipleTar" eq "N" %then %do;
16256 +       target="%EM_TARGET";
16257 +     %end;
16258 +     %else %do;
16259 +       target = _TARGET_;
16260 +     %end;
16261 +     drop _NW_ _SUMW_
16262 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16263 +        _VSUMW_
16264 +     %end;
16265 +     ;
16266 +   run;
16268 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16269 +     proc datasets library=work nolist;
16270 +       delete fit_valid;
16271 +     run;
16272 +   %end;
16273 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16274 +     proc datasets library=work nolist;
16275 +       delete fit_test;
16276 +     run;
16277 +   %end;
16279 +%mend em_tree_createFitStats;
16282 +%macro em_tree_makeEnglishRules;
16284 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16285 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16287 +  /* verify that necessary tables exist and if not, skip processing */
16288 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16289 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16290 +    %goto doendm;
16291 +  %end;
16292 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16293 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16294 +    %goto doendm;
16295 +  %end;
16297 +  /* determine length of variable in outpath dataset */
16298 +  %let vlength= ;
16299 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16300 +  %if &dsid ne %then %do;
16301 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16302 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16303 +  %end;
16304 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16306 +  data tempoutpath;
16307 +    length varname $&vlength;
16308 +    retain varname;
16309 +    set &EM_USER_OUTPATH;
16311 +    if ^missing(variable) then varname=variable;
16312 +    else if ^missing(var_name) then varname=var_name;
16313 +    output;
16314 +  run;
16316 +  /* create an array of generated predicted variable names */
16317 +  %let tree_pred_vars = ;
16318 +  %let tree_pred_label = ;
16319 +  %let numpred= 0;
16320 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16322 +    data _null_;
16323 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16324 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16325 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16326 +     if eof then
16327 +       call symput('numpred', strip(put(_N_, BEST.)));
16328 +    run;
16329 +  %end;
16331 +  /* determine if NPRIORS exists in outnodes  */
16332 +  %local nprior_flag;
16333 +  data _null_;
16334 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16335 +    if eof then do;
16336 +      call symput('nprior_flag', strip(put(npriors, best.)));
16337 +    end;
16338 +  run;
16340 +  proc sort data=tempoutpath; by node; run;
16341 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16343 +  data tempoutpath;
16344 +    merge tempoutpath(in=_a) outnodes(keep= node
16345 +    %if "&nprior_flag" ne "." %then %do;
16346 +      NPRIORS
16347 +    %end;
16348 +    %else %do;
16349 +      N
16350 +    %end;
16351 +    %if &numpred gt 0 %then %do;
16352 +      %do i=1 %to &numpred;
16353 +        &&tree_pred_vars&i
16354 +      %end;
16355 +    %end;
16356 +    );
16357 +    by node;
16358 +    if _a;
16359 +  run;
16361 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16363 +  data _null_;
16364 +    file x;
16365 +    set tempoutpath;
16366 +    by node descending varname;
16367 +    retain origvar oldnode string;
16368 +    length origvar $32 oldnode 8 string $200;
16370 +    if _N_ = 1 then do;
16371 +      origvar = varname;
16372 +      oldnode = node;
16373 +    end;
16375 +    if first.node then do;
16376 +       put "&EM_CODEBAR";
16377 +       put " Node = " node;
16378 +       put "&EM_CODEBAR";
16379 +    end;
16381 +      if first.varname then do;
16382 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16383 +            if MISSING(CHARACTER_VALUE) then do;
16384 +             if NUMERIC_VALUE ne .  then do;
16385 +              if ^first.node then do;
16386 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16387 +              end;
16388 +              else do;
16389 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16390 +              end;
16391 +             end;
16392 +            end;
16393 +            else do;
16394 +              if ^first.node then do;
16395 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16396 +              end;
16397 +              else do;
16398 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16399 +              end;
16400 +             end;
16401 +         end;
16402 +         else if RELATION in ("=") then do;
16403 +            if ^first.node then do;
16404 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16405 +            end;
16406 +            else do;
16407 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16408 +            end;
16409 +         end;
16410 +         else if RELATION in ("ISMISSING") then do;
16411 +            if ^first.node then do;
16412 +              string = " AND "|| strip(varname) || " equals Missing";
16413 +            end;
16414 +            else do;
16415 +              string = "if "|| strip(varname) ||" equals Missing";
16416 +            end;
16417 +         end;
16418 +         else if RELATION in ("ISNOTMISSING") then do;
16419 +            if ^first.node then do;
16420 +              string = " AND "|| strip(varname) || " equals All Values";
16421 +            end;
16422 +            else do;
16423 +              string = "if "|| strip(varname) ||" equals All Values";
16424 +            end;
16425 +         end;
16426 +         if ^missing(varname) then origvar = varname;
16427 +         oldnode=node;
16429 +      end;
16430 +      else do;
16431 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16432 +          if MISSING(CHARACTER_VALUE) then do;
16433 +           if  NUMERIC_VALUE ne .  then do;
16434 +            if ^MISSING(string) then
16435 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16436 +            else
16437 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16438 +           end;
16439 +          end;
16440 +          else do;
16441 +            if ^MISSING(string) then
16442 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16443 +            else
16444 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16445 +          end;
16447 +         end;
16448 +         else if RELATION in ("=") then do;
16449 +           string = strip(string)||", "||strip(character_value);
16450 +         end;
16451 +         else if RELATION in ("ISMISSING") then do;
16453 +         end;
16454 +         if ^missing(varname) then origvar = varname;
16455 +         oldnode=node;
16456 +      end;
16457 +      if last.varname then do;
16458 +         if RELATION in ("ISMISSING") then do;
16459 +           if ^first.varname then do;
16460 +             string = strip(string) || " or MISSING";
16461 +           end;
16462 +         end;
16463 +         put string;
16464 +         if ^missing(varname) then origvar = varname;
16465 +         oldnode=node;
16466 +      end;
16468 +      if last.node then do;
16469 +         put "then ";
16470 +         put " Tree Node Identifier   = " node;
16472 +         %if "&nprior_flag" ne "." %then %do;
16473 +           put " Number of Observations = " NPRIORS;
16474 +         %end;
16475 +         %else %do;
16476 +           put " Number of Observations = " N;
16477 +         %end;
16479 +         %if &numpred gt 0 %then %do;
16480 +           %do i=1 %to &numpred;
16481 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16482 +           %end;
16483 +         %end;
16485 +         put " ";
16486 +         if ^missing(varname) then origvar = varname;
16487 +         oldnode=node;
16488 +      end;
16490 +  run;
16492 +  proc datasets lib=work nolist;
16493 +    delete tempoutpath outnodes;
16494 +  run;
16496 +  %doendm:
16497 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS3.EM_TREE4.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS3.EM_TREE4.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE4_REP_UPDOWNIND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Records processed = 1250   Memory used = 511K.
NOTE: View EMWS3.EM_TREE4.VIEW used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
 
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 1250 observations read from the data set EMWS3.EM_TREE4.
NOTE: The data set WORK.CLASSOUT has 3 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.14 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: 1601816 kilobytes of physical memory.
NOTE: Will use 1250 out of 1250 training cases.
NOTE: Using memory pool with 72398848 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 268120 bytes of work memory.
NOTE: The subtree sequence contains 16 subtrees. The largest has 31 nodes and 16 leaves.
NOTE: Using subtree with 31 nodes and 16 leaves.
NOTE: Using subtree with 31 nodes and 16 leaves.
NOTE: Created macro variable NLEAVES equal to 16.
NOTE: The data set EMWS3.TREE4_OUTIMPORT has 7 observations and 6 variables.
NOTE: The data set EMWS3.TREE4_EMTREE has 1030 observations and 4 variables.
NOTE: The data set EMWS3.TREE4_OUTNODES has 31 observations and 27 variables.
NOTE: The data set EMWS3.TREE4_OUTPATH has 124 observations and 7 variables.
NOTE: The data set EMWS3.TREE4_OUTRULES has 270 observations and 6 variables.
NOTE: The data set EMWS3.TREE4_OUTSEQ has 16 observations and 20 variables.
NOTE: The data set EMWS3.TREE4_OUTSTATS has 279 observations and 5 variables.
NOTE: The data set EMWS3.TREE4_OUTSUMMARY has 32 observations and 7 variables.
NOTE: The data set EMWS3.TREE4_OUTTOPOLOGY has 31 observations and 5 variables.
NOTE: External file C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\TREEFLOW.sas opened.
NOTE: External file C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\TREEPUBLISH.sas opened.
NOTE: View EMWS3.EM_TREE4.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS3.EM_TREE4.VIEW used (Total process time):
      real time           0.28 seconds
      cpu time            0.29 seconds
 
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 1250 observations read from the data set EMWS3.EM_TREE4.
NOTE: The data set WORK._NAMEDAT has 3 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.30 seconds
      cpu time            0.29 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE4_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS3.TREE4_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 124 observations read from the data set EMWS3.TREE4_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 124 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS3.TREE4_REP_UPDOWNIND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.TREE4_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 124 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 124 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set EMWS3.TREE4_OUTNODES.
NOTE: The data set WORK.OUTNODES has 31 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 124 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 31 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 124 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 124 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 124 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      224:176   234:190   380:191   387:195
NOTE: The file X is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=11May2019:23:26:43,
      Create Time=11May2019:23:26:43
 
NOTE: 210 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 124 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
NOTE: Fileref X has been deassigned.
16499
16500  *------------------------------------------------------------*;
16501  * End TRAIN: Tree4;
16502  *------------------------------------------------------------*;
 
16503  *------------------------------------------------------------*;
16504  * Close any missing semi colons;
16505  *------------------------------------------------------------*;
16506  ;
16507  ;
16508  ;
16509  ;
16510  quit;
16511  *------------------------------------------------------------*;
16512  * Close any unbalanced quotes;
16513  *------------------------------------------------------------*;
16514  /*; *"; *'; */
16515  ;
16516  run;
16517  quit;
16518  /* Reset EM Options */
16519  options formchar="|----|+|---+=|-/\<>*";
16520  options nocenter ls=256 ps=10000;
16521  goptions reset=all device=GIF NODISPLAY;
 
16522  proc sort data=WORK.EM_USER_REPORT;
16523  by ID VIEW;
16524  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                May 11, 2019
Time:                23:26:44
*------------------------------------------------------------*
16626  %let EMEXCEPTIONSTRING=;
16627  *------------------------------------------------------------*;
16628  * SCORE: Tree4;
16629  *------------------------------------------------------------*;
16630  %let EM_ACTION = SCORE;
16631  %let syscc = 0;
16632  %macro main;
16633
16634    %if %upcase(&EM_ACTION) = CREATE %then %do;
16635      filename temp catalog 'sashelp.emmodl.tree_create.source';
16636      %include temp;
16637      filename temp;
16638
16639      %em_tree_create;
16640    %end;
16641
16642     %else
16643     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16644
16645         filename temp catalog 'sashelp.emmodl.tree_train.source';
16646         %include temp;
16647         filename temp;
16648         %em_tree_train;
16649     %end;
16650
16651    %else
16652    %if %upcase(&EM_ACTION) = SCORE %then %do;
16653      filename temp catalog 'sashelp.emmodl.tree_score.source';
16654      %include temp;
16655      filename temp;
16656
16657      %em_tree_score;
16658
16659    %end;
16660
16661    %else
16662    %if %upcase(&EM_ACTION) = REPORT %then %do;
16663
16664         filename temp catalog 'sashelp.emmodl.tree_report.source';
16665         %include temp;
16666         filename temp;
16667
16668         %em_tree_report;
16669     %end;
16670
16671    %else
16672    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16673
16674         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16675         %include temp;
16676         filename temp;
16677         %EM_TREE_OPENTREEVIEWER;
16678
16679     %end;
16680
16681    %else
16682    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16683
16684         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16685         %include temp;
16686         filename temp;
16687         %EM_TREE_CLOSETREEVIEWER;
16688
16689     %end;
16690
16691
16692     %doendm:
16693  %mend main;
16694
16695  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16697 +%macro em_tree_score;
16699 +   /* determine if multiple targets will be processed */
16700 +   %let em_tree_multipleTargets=N;
16701 +   %let em_tree_numTarget=1;
16702 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16703 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16704 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16705 +         %let em_tree_multipleTargets=N;
16706 +      %end;
16707 +      %else %do;
16708 +         /* create macro array of targets  */
16709 +         data _null_;
16710 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16711 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16712 +           if eof then
16713 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16714 +        run;
16716 +        %if &em_tree_numTarget gt 1 %then %do;
16717 +           %let em_tree_multipleTargets=Y;
16718 +        %end;
16719 +      %end;
16720 +   %end;
16722 +   /* build flow and publish scoring code */
16723 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16724 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16726 +   filename treeflow "&EM_USER_TREEFLOW";
16727 +   filename treepub "&EM_USER_TREEPUBLISH";
16729 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16730 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16732 +   %em_copyfile(infref=treeflow, outfref=flowref);
16733 +   %em_copyfile(infref=treepub, outfref=pubref);
16735 +   filename treeflow;
16736 +   filename treepub;
16738 +   /* if priors are used, add code to generate unadjusted residuals in export */
16739 +   %let useAdjPriors = N;
16740 +   data _null_;
16741 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16742 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16743 +   run;
16744 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16745 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16746 +      %include temp;
16747 +      filename temp;
16749 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16750 +      filename adjref "&EM_USER_adjResidualCode";
16751 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16753 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16755 +      filename adjref;
16756 +   %end;
16758 +   /* LEAF */
16759 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16760 +      data _null_;
16761 +        file flowref mod;
16762 +        put 'drop _LEAF_;';
16763 +      run;
16765 +      data _null_;
16766 +        file pubref mod;
16767 +        put 'drop _LEAF_;';
16768 +      run;
16770 +   %end;
16772 +   filename flowref;
16773 +   filename pubref;
16775 +   /* em_metachange code */
16776 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16777 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16778 +   %end;
16780 +   /* variable selection based on importance stat    */
16781 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16782 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16783 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16784 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16785 +     %let obs = %sysfunc(fetch(&dsid));
16786 +     %do %while(&obs=0);
16787 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16788 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16789 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16790 +       %let obs = %sysfunc(fetch(&dsid));
16791 +     %end;
16792 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16793 +   %end;
16795 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16796 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16797 +    %let tree_pred_vars = ;
16798 +    %let tree_pred_lvl =;
16799 +    %let numpred= 0;
16801 +    data _null_;
16802 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16803 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16804 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16805 +     if eof then
16806 +       call symput('numpred', strip(put(_N_, BEST.)));
16807 +    run;
16808 +   %end;
16810 +   %if &numpred ne 0 %then %do;
16811 +    %do i=1 %to &numpred;
16812 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16813 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16814 +    %end;
16815 +   %end;
16817 +   /* determine if multiple targets will be processed */
16818 +   %let em_tree_multipleTargets=N;
16819 +   %let em_tree_numTarget=1;
16820 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16821 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16822 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16823 +         %let em_tree_multipleTargets=N;
16824 +      %end;
16825 +      %else %do;
16826 +        data _null_;
16827 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16828 +          if eof then
16829 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16830 +        run;
16832 +        %if &em_tree_numTarget gt 1 %then %do;
16833 +           %let em_tree_multipleTargets=Y;
16834 +        %end;
16835 +     %end;
16836 +   %end;
16838 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16839 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16841 +      /* variable importance */
16842 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16843 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16845 +         %let validexist=0;
16846 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16847 +           %let validexist=1;
16848 +         %end;
16850 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16851 +         /* and the columns may not be generated                                                                                 */
16852 +         %let em_tree_cvexists=;
16853 +         %let em_tree_surrexists=.;
16854 +         data _null_;
16855 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16856 +            if eof then do ;
16857 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16858 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16859 +            end;
16860 +         run;
16862 +         data &EM_USER_OUTIMPORT;
16863 +            set &EM_USER_OUTIMPORT;
16865 +            /* format columns based on Precison value specified */
16866 +            format importance 15.&EM_PROPERTY_PRECISION
16867 +                 %if &validexist %then %do;
16868 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16869 +                 %end;
16870 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16871 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16872 +                 %end;
16873 +            ;
16874 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16875 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16876 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16877 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16878 +                 %if "&em_tree_surrexists" ne "" %then %do;
16879 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16880 +                 %end;
16881 +                 %if &validexist %then %do;
16882 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16883 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16884 +                 %end;
16885 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16886 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16887 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16888 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16889 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16890 +                 %end;
16891 +            ;
16892 +         run;
16894 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16895 +      %end;
16896 +   %end;
16898 +   %doendm:
16899 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=11May2019:23:26:44,
      Create Time=11May2019:23:24:57
 
NOTE: 348 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 73.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=11May2019:23:26:44,
      Create Time=11May2019:23:24:57
 
NOTE: 320 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 72.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS3.TREE4_REP_UPDOWNIND_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=15278,
      Last Modified=11May2019:23:26:44,
      Create Time=11May2019:23:24:57
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=14183,
      Last Modified=11May2019:23:26:44,
      Create Time=11May2019:23:24:57
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS3.TREE4_REP_UPDOWNIND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 7 observations read from the data set EMWS3.TREE4_OUTIMPORT.
NOTE: The data set EMWS3.TREE4_OUTIMPORT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
16900
16901  *------------------------------------------------------------*;
16902  * End SCORE: Tree4;
16903  *------------------------------------------------------------*;
 
16904  proc sort data=WORK.EM_METACHANGE;
16905  by key uname;
16906  run;
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16907  filename x "C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\CDELTA_TRAIN.sas";
16908  data _null_;
16909  file x;
16910  put 'if upcase(NAME) = "BUY" then do;';
16911  put 'ROLE = "REJECTED";';
16912  put 'end;';
16913  put 'else ';
16914  put 'if upcase(NAME) = "LOW" then do;';
16915  put 'ROLE = "REJECTED";';
16916  put 'end;';
16917  put 'else ';
16918  put 'if upcase(NAME) = "Q_REP_UPDOWNINDDOWN" then do;';
16919  put 'ROLE = "ASSESS";';
16920  put 'end;';
16921  put 'else ';
16922  put 'if upcase(NAME) = "Q_REP_UPDOWNINDUNCHANGE" then do;';
16923  put 'ROLE = "ASSESS";';
16924  put 'end;';
16925  put 'else ';
16926  put 'if upcase(NAME) = "Q_REP_UPDOWNINDUP" then do;';
16927  put 'ROLE = "ASSESS";';
16928  put 'end;';
16929  put 'else ';
16930  put 'if upcase(NAME) = "SELL" then do;';
16931  put 'ROLE = "REJECTED";';
16932  put 'end;';
16933  put 'else ';
16934  put 'if upcase(NAME) = "_NODE_" then do;';
16935  put 'ROLE = "SEGMENT";';
16936  put 'LEVEL = "NOMINAL";';
16937  put 'end;';
16938  run;
 
NOTE: The file X is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=11May2019:23:26:45,
      Create Time=11May2019:23:24:57
 
NOTE: 28 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
16939  filename x;
NOTE: Fileref X has been deassigned.
 
16940  filename emflow "C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\EMFLOWSCORE.sas";
16941  *------------------------------------------------------------*;
16942  * Tree4: Scoring DATA data;
16943  *------------------------------------------------------------*;
16944  data EMWS3.Tree4_TRAIN
16945  / view=EMWS3.Tree4_TRAIN
16946  ;
16947  set EMWS3.Part_TRAIN
16948  ;
16949  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\EMFLOWSCORE.sas.
16950 +****************************************************************;
16951 +******             DECISION TREE SCORING CODE             ******;
16952 +****************************************************************;
16953 +
16954 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16955 +LENGTH F_REP_updownInd  $    8;
16956 +LENGTH I_REP_updownInd  $    8;
16957 +LENGTH U_REP_updownInd  $    8;
16958 +LENGTH _WARN_  $    4;
16959 +
16960 +******              LABELS FOR NEW VARIABLES              ******;
16961 +label _NODE_ = 'Node' ;
16962 +label _LEAF_ = 'Leaf' ;
16963 +label P_REP_updownIndup = 'Predicted: REP_updownInd=up' ;
16964 +label P_REP_updownInddown = 'Predicted: REP_updownInd=down' ;
16965 +label P_REP_updownIndunchange = 'Predicted: REP_updownInd=unchange' ;
16966 +label Q_REP_updownIndup = 'Unadjusted P: REP_updownInd=up' ;
16967 +label Q_REP_updownInddown = 'Unadjusted P: REP_updownInd=down' ;
16968 +label Q_REP_updownIndunchange = 'Unadjusted P: REP_updownInd=unchange' ;
16969 +label V_REP_updownIndup = 'Validated: REP_updownInd=up' ;
16970 +label V_REP_updownInddown = 'Validated: REP_updownInd=down' ;
16971 +label V_REP_updownIndunchange = 'Validated: REP_updownInd=unchange' ;
16972 +label R_REP_updownIndup = 'Residual: REP_updownInd=up' ;
16973 +label R_REP_updownInddown = 'Residual: REP_updownInd=down' ;
16974 +label R_REP_updownIndunchange = 'Residual: REP_updownInd=unchange' ;
16975 +label F_REP_updownInd = 'From: REP_updownInd' ;
16976 +label I_REP_updownInd = 'Into: REP_updownInd' ;
16977 +label U_REP_updownInd = 'Unnormalized Into: REP_updownInd' ;
16978 +label _WARN_ = 'Warnings' ;
16979 +
16980 +
16981 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16982 +LENGTH _ARBFMT_8 $      8; DROP _ARBFMT_8;
16983 +_ARBFMT_8 = ' '; /* Initialize to avoid warning. */
16984 +
16985 +
16986 +_ARBFMT_8 = PUT( REP_updownInd , $8.);
16987 + %DMNORMCP( _ARBFMT_8, F_REP_updownInd );
16988 +
16989 +******             ASSIGN OBSERVATION TO NODE             ******;
16990 +IF  NOT MISSING(high ) AND
16991 +  high  <               0.0925 THEN DO;
16992 +  IF  NOT MISSING(open ) AND
16993 +                  0.0125 <= open  THEN DO;
16994 +    IF  NOT MISSING(lastDone ) AND
16995 +      lastDone  <               0.0125 THEN DO;
16996 +      _NODE_  =                   10;
16997 +      _LEAF_  =                    6;
16998 +      P_REP_updownIndup  =                    0;
16999 +      P_REP_updownInddown  =                    1;
17000 +      P_REP_updownIndunchange  =                    0;
17001 +      Q_REP_updownIndup  =                    0;
17002 +      Q_REP_updownInddown  =                    1;
17003 +      Q_REP_updownIndunchange  =                    0;
17004 +      V_REP_updownIndup  =                    0;
17005 +      V_REP_updownInddown  =                    1;
17006 +      V_REP_updownIndunchange  =                    0;
17007 +      I_REP_updownInd  = 'DOWN' ;
17008 +      U_REP_updownInd  = 'down' ;
17009 +      END;
17010 +    ELSE DO;
17011 +      _NODE_  =                   11;
17012 +      _LEAF_  =                    7;
17013 +      P_REP_updownIndup  =     0.25324675324675;
17014 +      P_REP_updownInddown  =     0.15584415584415;
17015 +      P_REP_updownIndunchange  =     0.59090909090909;
17016 +      Q_REP_updownIndup  =     0.25324675324675;
17017 +      Q_REP_updownInddown  =     0.15584415584415;
17018 +      Q_REP_updownIndunchange  =     0.59090909090909;
17019 +      V_REP_updownIndup  =     0.25503355704697;
17020 +      V_REP_updownInddown  =      0.1744966442953;
17021 +      V_REP_updownIndunchange  =     0.57046979865771;
17022 +      I_REP_updownInd  = 'UNCHANGE' ;
17023 +      U_REP_updownInd  = 'unchange' ;
17024 +      END;
17025 +    END;
17026 +  ELSE DO;
17027 +    IF  NOT MISSING(high ) AND
17028 +                    0.0075 <= high  THEN DO;
17029 +      IF  NOT MISSING(lastDone ) AND
17030 +        lastDone  <               0.0075 THEN DO;
17031 +        IF  NOT MISSING(open ) AND
17032 +                        0.0075 <= open  THEN DO;
17033 +          _NODE_  =                   21;
17034 +          _LEAF_  =                    3;
17035 +          P_REP_updownIndup  =                    0;
17036 +          P_REP_updownInddown  =                    1;
17037 +          P_REP_updownIndunchange  =                    0;
17038 +          Q_REP_updownIndup  =                    0;
17039 +          Q_REP_updownInddown  =                    1;
17040 +          Q_REP_updownIndunchange  =                    0;
17041 +          V_REP_updownIndup  =                    0;
17042 +          V_REP_updownInddown  =                    1;
17043 +          V_REP_updownIndunchange  =                    0;
17044 +          I_REP_updownInd  = 'DOWN' ;
17045 +          U_REP_updownInd  = 'down' ;
17046 +          END;
17047 +        ELSE DO;
17048 +          _NODE_  =                   20;
17049 +          _LEAF_  =                    2;
17050 +          P_REP_updownIndup  =                    0;
17051 +          P_REP_updownInddown  =                    0;
17052 +          P_REP_updownIndunchange  =                    1;
17053 +          Q_REP_updownIndup  =                    0;
17054 +          Q_REP_updownInddown  =                    0;
17055 +          Q_REP_updownIndunchange  =                    1;
17056 +          V_REP_updownIndup  =                    0;
17057 +          V_REP_updownInddown  =                    0;
17058 +          V_REP_updownIndunchange  =                    1;
17059 +          I_REP_updownInd  = 'UNCHANGE' ;
17060 +          U_REP_updownInd  = 'unchange' ;
17061 +          END;
17062 +        END;
17063 +      ELSE DO;
17064 +        IF  NOT MISSING(open ) AND
17065 +          open  <               0.0075 THEN DO;
17066 +          _NODE_  =                   22;
17067 +          _LEAF_  =                    4;
17068 +          P_REP_updownIndup  =                    1;
17069 +          P_REP_updownInddown  =                    0;
17070 +          P_REP_updownIndunchange  =                    0;
17071 +          Q_REP_updownIndup  =                    1;
17072 +          Q_REP_updownInddown  =                    0;
17073 +          Q_REP_updownIndunchange  =                    0;
17074 +          V_REP_updownIndup  =                    1;
17075 +          V_REP_updownInddown  =                    0;
17076 +          V_REP_updownIndunchange  =                    0;
17077 +          I_REP_updownInd  = 'UP' ;
17078 +          U_REP_updownInd  = 'up' ;
17079 +          END;
17080 +        ELSE DO;
17081 +          _NODE_  =                   23;
17082 +          _LEAF_  =                    5;
17083 +          P_REP_updownIndup  =     0.02439024390243;
17084 +          P_REP_updownInddown  =                    0;
17085 +          P_REP_updownIndunchange  =     0.97560975609756;
17086 +          Q_REP_updownIndup  =     0.02439024390243;
17087 +          Q_REP_updownInddown  =                    0;
17088 +          Q_REP_updownIndunchange  =     0.97560975609756;
17089 +          V_REP_updownIndup  =      0.1060606060606;
17090 +          V_REP_updownInddown  =                    0;
17091 +          V_REP_updownIndunchange  =     0.89393939393939;
17092 +          I_REP_updownInd  = 'UNCHANGE' ;
17093 +          U_REP_updownInd  = 'unchange' ;
17094 +          END;
17095 +        END;
17096 +      END;
17097 +    ELSE DO;
17098 +      _NODE_  =                    8;
17099 +      _LEAF_  =                    1;
17100 +      P_REP_updownIndup  =                    0;
17101 +      P_REP_updownInddown  =                    0;
17102 +      P_REP_updownIndunchange  =                    1;
17103 +      Q_REP_updownIndup  =                    0;
17104 +      Q_REP_updownInddown  =                    0;
17105 +      Q_REP_updownIndunchange  =                    1;
17106 +      V_REP_updownIndup  =                    0;
17107 +      V_REP_updownInddown  =                    0;
17108 +      V_REP_updownIndunchange  =                    1;
17109 +      I_REP_updownInd  = 'UNCHANGE' ;
17110 +      U_REP_updownInd  = 'unchange' ;
17111 +      END;
17112 +    END;
17113 +  END;
17114 +ELSE DO;
17115 +  IF  NOT MISSING(vol ) AND
17116 +    vol  <                 90.5 THEN DO;
17117 +    _NODE_  =                    6;
17118 +    _LEAF_  =                    8;
17119 +    P_REP_updownIndup  =                    0;
17120 +    P_REP_updownInddown  =                    0;
17121 +    P_REP_updownIndunchange  =                    1;
17122 +    Q_REP_updownIndup  =                    0;
17123 +    Q_REP_updownInddown  =                    0;
17124 +    Q_REP_updownIndunchange  =                    1;
17125 +    V_REP_updownIndup  =                    0;
17126 +    V_REP_updownInddown  =                    0;
17127 +    V_REP_updownIndunchange  =                    1;
17128 +    I_REP_updownInd  = 'UNCHANGE' ;
17129 +    U_REP_updownInd  = 'unchange' ;
17130 +    END;
17131 +  ELSE DO;
17132 +    IF  NOT MISSING(high ) AND
17133 +      high  <               0.1125 THEN DO;
17134 +      IF  NOT MISSING(open ) AND
17135 +        open  <               0.0925 THEN DO;
17136 +        _NODE_  =                   16;
17137 +        _LEAF_  =                    9;
17138 +        P_REP_updownIndup  =     0.78571428571428;
17139 +        P_REP_updownInddown  =     0.07142857142857;
17140 +        P_REP_updownIndunchange  =     0.14285714285714;
17141 +        Q_REP_updownIndup  =     0.78571428571428;
17142 +        Q_REP_updownInddown  =     0.07142857142857;
17143 +        Q_REP_updownIndunchange  =     0.14285714285714;
17144 +        V_REP_updownIndup  =     0.85714285714285;
17145 +        V_REP_updownInddown  =                    0;
17146 +        V_REP_updownIndunchange  =     0.14285714285714;
17147 +        I_REP_updownInd  = 'UP' ;
17148 +        U_REP_updownInd  = 'up' ;
17149 +        END;
17150 +      ELSE DO;
17151 +        IF  NOT MISSING(lastDone ) AND
17152 +                        0.1025 <= lastDone  THEN DO;
17153 +          IF  NOT MISSING(open ) AND
17154 +            open  <               0.1025 THEN DO;
17155 +            _NODE_  =                   30;
17156 +            _LEAF_  =                   12;
17157 +            P_REP_updownIndup  =                    1;
17158 +            P_REP_updownInddown  =                    0;
17159 +            P_REP_updownIndunchange  =                    0;
17160 +            Q_REP_updownIndup  =                    1;
17161 +            Q_REP_updownInddown  =                    0;
17162 +            Q_REP_updownIndunchange  =                    0;
17163 +            V_REP_updownIndup  =                    1;
17164 +            V_REP_updownInddown  =                    0;
17165 +            V_REP_updownIndunchange  =                    0;
17166 +            I_REP_updownInd  = 'UP' ;
17167 +            U_REP_updownInd  = 'up' ;
17168 +            END;
17169 +          ELSE DO;
17170 +            _NODE_  =                   31;
17171 +            _LEAF_  =                   13;
17172 +            P_REP_updownIndup  =     0.08333333333333;
17173 +            P_REP_updownInddown  =                0.125;
17174 +            P_REP_updownIndunchange  =     0.79166666666666;
17175 +            Q_REP_updownIndup  =     0.08333333333333;
17176 +            Q_REP_updownInddown  =                0.125;
17177 +            Q_REP_updownIndunchange  =     0.79166666666666;
17178 +            V_REP_updownIndup  =     0.07407407407407;
17179 +            V_REP_updownInddown  =     0.18518518518518;
17180 +            V_REP_updownIndunchange  =     0.74074074074074;
17181 +            I_REP_updownInd  = 'UNCHANGE' ;
17182 +            U_REP_updownInd  = 'unchange' ;
17183 +            END;
17184 +          END;
17185 +        ELSE DO;
17186 +          IF  NOT MISSING(open ) AND
17187 +                          0.1025 <= open  THEN DO;
17188 +            _NODE_  =                   29;
17189 +            _LEAF_  =                   11;
17190 +            P_REP_updownIndup  =                    0;
17191 +            P_REP_updownInddown  =                    1;
17192 +            P_REP_updownIndunchange  =                    0;
17193 +            Q_REP_updownIndup  =                    0;
17194 +            Q_REP_updownInddown  =                    1;
17195 +            Q_REP_updownIndunchange  =                    0;
17196 +            V_REP_updownIndup  =                    0;
17197 +            V_REP_updownInddown  =                    1;
17198 +            V_REP_updownIndunchange  =                    0;
17199 +            I_REP_updownInd  = 'DOWN' ;
17200 +            U_REP_updownInd  = 'down' ;
17201 +            END;
17202 +          ELSE DO;
17203 +            _NODE_  =                   28;
17204 +            _LEAF_  =                   10;
17205 +            P_REP_updownIndup  =     0.15151515151515;
17206 +            P_REP_updownInddown  =     0.27272727272727;
17207 +            P_REP_updownIndunchange  =     0.57575757575757;
17208 +            Q_REP_updownIndup  =     0.15151515151515;
17209 +            Q_REP_updownInddown  =     0.27272727272727;
17210 +            Q_REP_updownIndunchange  =     0.57575757575757;
17211 +            V_REP_updownIndup  =     0.10714285714285;
17212 +            V_REP_updownInddown  =     0.53571428571428;
17213 +            V_REP_updownIndunchange  =     0.35714285714285;
17214 +            I_REP_updownInd  = 'UNCHANGE' ;
17215 +            U_REP_updownInd  = 'unchange' ;
17216 +            END;
17217 +          END;
17218 +        END;
17219 +      END;
17220 +    ELSE DO;
17221 +      IF  NOT MISSING(open ) AND
17222 +        open  <               0.1125 THEN DO;
17223 +        _NODE_  =                   18;
17224 +        _LEAF_  =                   14;
17225 +        P_REP_updownIndup  =     0.88888888888888;
17226 +        P_REP_updownInddown  =     0.05555555555555;
17227 +        P_REP_updownIndunchange  =     0.05555555555555;
17228 +        Q_REP_updownIndup  =     0.88888888888888;
17229 +        Q_REP_updownInddown  =     0.05555555555555;
17230 +        Q_REP_updownIndunchange  =     0.05555555555555;
17231 +        V_REP_updownIndup  =     0.72727272727272;
17232 +        V_REP_updownInddown  =     0.09090909090909;
17233 +        V_REP_updownIndunchange  =     0.18181818181818;
17234 +        I_REP_updownInd  = 'UP' ;
17235 +        U_REP_updownInd  = 'up' ;
17236 +        END;
17237 +      ELSE DO;
17238 +        IF  NOT MISSING(high ) AND
17239 +          high  <               0.4125 THEN DO;
17240 +          _NODE_  =                   26;
17241 +          _LEAF_  =                   15;
17242 +          P_REP_updownIndup  =      0.3063973063973;
17243 +          P_REP_updownInddown  =     0.45454545454545;
17244 +          P_REP_updownIndunchange  =     0.23905723905723;
17245 +          Q_REP_updownIndup  =      0.3063973063973;
17246 +          Q_REP_updownInddown  =     0.45454545454545;
17247 +          Q_REP_updownIndunchange  =     0.23905723905723;
17248 +          V_REP_updownIndup  =     0.29966329966329;
17249 +          V_REP_updownInddown  =     0.48484848484848;
17250 +          V_REP_updownIndunchange  =     0.21548821548821;
17251 +          I_REP_updownInd  = 'DOWN' ;
17252 +          U_REP_updownInd  = 'down' ;
17253 +          END;
17254 +        ELSE DO;
17255 +          _NODE_  =                   27;
17256 +          _LEAF_  =                   16;
17257 +          P_REP_updownIndup  =     0.34970530451866;
17258 +          P_REP_updownInddown  =     0.53438113948919;
17259 +          P_REP_updownIndunchange  =     0.11591355599214;
17260 +          Q_REP_updownIndup  =     0.34970530451866;
17261 +          Q_REP_updownInddown  =     0.53438113948919;
17262 +          Q_REP_updownIndunchange  =     0.11591355599214;
17263 +          V_REP_updownIndup  =     0.36072144288577;
17264 +          V_REP_updownInddown  =     0.50901803607214;
17265 +          V_REP_updownIndunchange  =     0.13026052104208;
17266 +          I_REP_updownInd  = 'DOWN' ;
17267 +          U_REP_updownInd  = 'down' ;
17268 +          END;
17269 +        END;
17270 +      END;
17271 +    END;
17272 +  END;
17273 +
17274 +*****  RESIDUALS R_ *************;
17275 +IF  F_REP_updownInd  NE 'UP'
17276 +AND F_REP_updownInd  NE 'DOWN'
17277 +AND F_REP_updownInd  NE 'UNCHANGE'  THEN DO;
17278 +        R_REP_updownIndup  = .;
17279 +        R_REP_updownInddown  = .;
17280 +        R_REP_updownIndunchange  = .;
17281 + END;
17282 + ELSE DO;
17283 +       R_REP_updownIndup  =  -P_REP_updownIndup ;
17284 +       R_REP_updownInddown  =  -P_REP_updownInddown ;
17285 +       R_REP_updownIndunchange  =  -P_REP_updownIndunchange ;
17286 +       SELECT( F_REP_updownInd  );
17287 +          WHEN( 'UP'  ) R_REP_updownIndup  = R_REP_updownIndup  +1;
17288 +          WHEN( 'DOWN'  ) R_REP_updownInddown  = R_REP_updownInddown  +1;
17289 +          WHEN( 'UNCHANGE'  ) R_REP_updownIndunchange  =
17290 +        R_REP_updownIndunchange  +1;
17291 +       END;
17292 + END;
17293 +
17294 +****************************************************************;
17295 +******          END OF DECISION TREE SCORING CODE         ******;
17296 +****************************************************************;
17297 +
17298 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17299  run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE4_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
17300  quit;
17301  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17302  filename emflow "C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\EMFLOWSCORE.sas";
17303  *------------------------------------------------------------*;
17304  * Tree4: Scoring VALIDATE data;
17305  *------------------------------------------------------------*;
17306  data EMWS3.Tree4_VALIDATE
17307  / view=EMWS3.Tree4_VALIDATE
17308  ;
17309  set EMWS3.Part_VALIDATE
17310  ;
17311  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree4\EMFLOWSCORE.sas.
17312 +****************************************************************;
17313 +******             DECISION TREE SCORING CODE             ******;
17314 +****************************************************************;
17315 +
17316 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17317 +LENGTH F_REP_updownInd  $    8;
17318 +LENGTH I_REP_updownInd  $    8;
17319 +LENGTH U_REP_updownInd  $    8;
17320 +LENGTH _WARN_  $    4;
17321 +
17322 +******              LABELS FOR NEW VARIABLES              ******;
17323 +label _NODE_ = 'Node' ;
17324 +label _LEAF_ = 'Leaf' ;
17325 +label P_REP_updownIndup = 'Predicted: REP_updownInd=up' ;
17326 +label P_REP_updownInddown = 'Predicted: REP_updownInd=down' ;
17327 +label P_REP_updownIndunchange = 'Predicted: REP_updownInd=unchange' ;
17328 +label Q_REP_updownIndup = 'Unadjusted P: REP_updownInd=up' ;
17329 +label Q_REP_updownInddown = 'Unadjusted P: REP_updownInd=down' ;
17330 +label Q_REP_updownIndunchange = 'Unadjusted P: REP_updownInd=unchange' ;
17331 +label V_REP_updownIndup = 'Validated: REP_updownInd=up' ;
17332 +label V_REP_updownInddown = 'Validated: REP_updownInd=down' ;
17333 +label V_REP_updownIndunchange = 'Validated: REP_updownInd=unchange' ;
17334 +label R_REP_updownIndup = 'Residual: REP_updownInd=up' ;
17335 +label R_REP_updownInddown = 'Residual: REP_updownInd=down' ;
17336 +label R_REP_updownIndunchange = 'Residual: REP_updownInd=unchange' ;
17337 +label F_REP_updownInd = 'From: REP_updownInd' ;
17338 +label I_REP_updownInd = 'Into: REP_updownInd' ;
17339 +label U_REP_updownInd = 'Unnormalized Into: REP_updownInd' ;
17340 +label _WARN_ = 'Warnings' ;
17341 +
17342 +
17343 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17344 +LENGTH _ARBFMT_8 $      8; DROP _ARBFMT_8;
17345 +_ARBFMT_8 = ' '; /* Initialize to avoid warning. */
17346 +
17347 +
17348 +_ARBFMT_8 = PUT( REP_updownInd , $8.);
17349 + %DMNORMCP( _ARBFMT_8, F_REP_updownInd );
17350 +
17351 +******             ASSIGN OBSERVATION TO NODE             ******;
17352 +IF  NOT MISSING(high ) AND
17353 +  high  <               0.0925 THEN DO;
17354 +  IF  NOT MISSING(open ) AND
17355 +                  0.0125 <= open  THEN DO;
17356 +    IF  NOT MISSING(lastDone ) AND
17357 +      lastDone  <               0.0125 THEN DO;
17358 +      _NODE_  =                   10;
17359 +      _LEAF_  =                    6;
17360 +      P_REP_updownIndup  =                    0;
17361 +      P_REP_updownInddown  =                    1;
17362 +      P_REP_updownIndunchange  =                    0;
17363 +      Q_REP_updownIndup  =                    0;
17364 +      Q_REP_updownInddown  =                    1;
17365 +      Q_REP_updownIndunchange  =                    0;
17366 +      V_REP_updownIndup  =                    0;
17367 +      V_REP_updownInddown  =                    1;
17368 +      V_REP_updownIndunchange  =                    0;
17369 +      I_REP_updownInd  = 'DOWN' ;
17370 +      U_REP_updownInd  = 'down' ;
17371 +      END;
17372 +    ELSE DO;
17373 +      _NODE_  =                   11;
17374 +      _LEAF_  =                    7;
17375 +      P_REP_updownIndup  =     0.25324675324675;
17376 +      P_REP_updownInddown  =     0.15584415584415;
17377 +      P_REP_updownIndunchange  =     0.59090909090909;
17378 +      Q_REP_updownIndup  =     0.25324675324675;
17379 +      Q_REP_updownInddown  =     0.15584415584415;
17380 +      Q_REP_updownIndunchange  =     0.59090909090909;
17381 +      V_REP_updownIndup  =     0.25503355704697;
17382 +      V_REP_updownInddown  =      0.1744966442953;
17383 +      V_REP_updownIndunchange  =     0.57046979865771;
17384 +      I_REP_updownInd  = 'UNCHANGE' ;
17385 +      U_REP_updownInd  = 'unchange' ;
17386 +      END;
17387 +    END;
17388 +  ELSE DO;
17389 +    IF  NOT MISSING(high ) AND
17390 +                    0.0075 <= high  THEN DO;
17391 +      IF  NOT MISSING(lastDone ) AND
17392 +        lastDone  <               0.0075 THEN DO;
17393 +        IF  NOT MISSING(open ) AND
17394 +                        0.0075 <= open  THEN DO;
17395 +          _NODE_  =                   21;
17396 +          _LEAF_  =                    3;
17397 +          P_REP_updownIndup  =                    0;
17398 +          P_REP_updownInddown  =                    1;
17399 +          P_REP_updownIndunchange  =                    0;
17400 +          Q_REP_updownIndup  =                    0;
17401 +          Q_REP_updownInddown  =                    1;
17402 +          Q_REP_updownIndunchange  =                    0;
17403 +          V_REP_updownIndup  =                    0;
17404 +          V_REP_updownInddown  =                    1;
17405 +          V_REP_updownIndunchange  =                    0;
17406 +          I_REP_updownInd  = 'DOWN' ;
17407 +          U_REP_updownInd  = 'down' ;
17408 +          END;
17409 +        ELSE DO;
17410 +          _NODE_  =                   20;
17411 +          _LEAF_  =                    2;
17412 +          P_REP_updownIndup  =                    0;
17413 +          P_REP_updownInddown  =                    0;
17414 +          P_REP_updownIndunchange  =                    1;
17415 +          Q_REP_updownIndup  =                    0;
17416 +          Q_REP_updownInddown  =                    0;
17417 +          Q_REP_updownIndunchange  =                    1;
17418 +          V_REP_updownIndup  =                    0;
17419 +          V_REP_updownInddown  =                    0;
17420 +          V_REP_updownIndunchange  =                    1;
17421 +          I_REP_updownInd  = 'UNCHANGE' ;
17422 +          U_REP_updownInd  = 'unchange' ;
17423 +          END;
17424 +        END;
17425 +      ELSE DO;
17426 +        IF  NOT MISSING(open ) AND
17427 +          open  <               0.0075 THEN DO;
17428 +          _NODE_  =                   22;
17429 +          _LEAF_  =                    4;
17430 +          P_REP_updownIndup  =                    1;
17431 +          P_REP_updownInddown  =                    0;
17432 +          P_REP_updownIndunchange  =                    0;
17433 +          Q_REP_updownIndup  =                    1;
17434 +          Q_REP_updownInddown  =                    0;
17435 +          Q_REP_updownIndunchange  =                    0;
17436 +          V_REP_updownIndup  =                    1;
17437 +          V_REP_updownInddown  =                    0;
17438 +          V_REP_updownIndunchange  =                    0;
17439 +          I_REP_updownInd  = 'UP' ;
17440 +          U_REP_updownInd  = 'up' ;
17441 +          END;
17442 +        ELSE DO;
17443 +          _NODE_  =                   23;
17444 +          _LEAF_  =                    5;
17445 +          P_REP_updownIndup  =     0.02439024390243;
17446 +          P_REP_updownInddown  =                    0;
17447 +          P_REP_updownIndunchange  =     0.97560975609756;
17448 +          Q_REP_updownIndup  =     0.02439024390243;
17449 +          Q_REP_updownInddown  =                    0;
17450 +          Q_REP_updownIndunchange  =     0.97560975609756;
17451 +          V_REP_updownIndup  =      0.1060606060606;
17452 +          V_REP_updownInddown  =                    0;
17453 +          V_REP_updownIndunchange  =     0.89393939393939;
17454 +          I_REP_updownInd  = 'UNCHANGE' ;
17455 +          U_REP_updownInd  = 'unchange' ;
17456 +          END;
17457 +        END;
17458 +      END;
17459 +    ELSE DO;
17460 +      _NODE_  =                    8;
17461 +      _LEAF_  =                    1;
17462 +      P_REP_updownIndup  =                    0;
17463 +      P_REP_updownInddown  =                    0;
17464 +      P_REP_updownIndunchange  =                    1;
17465 +      Q_REP_updownIndup  =                    0;
17466 +      Q_REP_updownInddown  =                    0;
17467 +      Q_REP_updownIndunchange  =                    1;
17468 +      V_REP_updownIndup  =                    0;
17469 +      V_REP_updownInddown  =                    0;
17470 +      V_REP_updownIndunchange  =                    1;
17471 +      I_REP_updownInd  = 'UNCHANGE' ;
17472 +      U_REP_updownInd  = 'unchange' ;
17473 +      END;
17474 +    END;
17475 +  END;
17476 +ELSE DO;
17477 +  IF  NOT MISSING(vol ) AND
17478 +    vol  <                 90.5 THEN DO;
17479 +    _NODE_  =                    6;
17480 +    _LEAF_  =                    8;
17481 +    P_REP_updownIndup  =                    0;
17482 +    P_REP_updownInddown  =                    0;
17483 +    P_REP_updownIndunchange  =                    1;
17484 +    Q_REP_updownIndup  =                    0;
17485 +    Q_REP_updownInddown  =                    0;
17486 +    Q_REP_updownIndunchange  =                    1;
17487 +    V_REP_updownIndup  =                    0;
17488 +    V_REP_updownInddown  =                    0;
17489 +    V_REP_updownIndunchange  =                    1;
17490 +    I_REP_updownInd  = 'UNCHANGE' ;
17491 +    U_REP_updownInd  = 'unchange' ;
17492 +    END;
17493 +  ELSE DO;
17494 +    IF  NOT MISSING(high ) AND
17495 +      high  <               0.1125 THEN DO;
17496 +      IF  NOT MISSING(open ) AND
17497 +        open  <               0.0925 THEN DO;
17498 +        _NODE_  =                   16;
17499 +        _LEAF_  =                    9;
17500 +        P_REP_updownIndup  =     0.78571428571428;
17501 +        P_REP_updownInddown  =     0.07142857142857;
17502 +        P_REP_updownIndunchange  =     0.14285714285714;
17503 +        Q_REP_updownIndup  =     0.78571428571428;
17504 +        Q_REP_updownInddown  =     0.07142857142857;
17505 +        Q_REP_updownIndunchange  =     0.14285714285714;
17506 +        V_REP_updownIndup  =     0.85714285714285;
17507 +        V_REP_updownInddown  =                    0;
17508 +        V_REP_updownIndunchange  =     0.14285714285714;
17509 +        I_REP_updownInd  = 'UP' ;
17510 +        U_REP_updownInd  = 'up' ;
17511 +        END;
17512 +      ELSE DO;
17513 +        IF  NOT MISSING(lastDone ) AND
17514 +                        0.1025 <= lastDone  THEN DO;
17515 +          IF  NOT MISSING(open ) AND
17516 +            open  <               0.1025 THEN DO;
17517 +            _NODE_  =                   30;
17518 +            _LEAF_  =                   12;
17519 +            P_REP_updownIndup  =                    1;
17520 +            P_REP_updownInddown  =                    0;
17521 +            P_REP_updownIndunchange  =                    0;
17522 +            Q_REP_updownIndup  =                    1;
17523 +            Q_REP_updownInddown  =                    0;
17524 +            Q_REP_updownIndunchange  =                    0;
17525 +            V_REP_updownIndup  =                    1;
17526 +            V_REP_updownInddown  =                    0;
17527 +            V_REP_updownIndunchange  =                    0;
17528 +            I_REP_updownInd  = 'UP' ;
17529 +            U_REP_updownInd  = 'up' ;
17530 +            END;
17531 +          ELSE DO;
17532 +            _NODE_  =                   31;
17533 +            _LEAF_  =                   13;
17534 +            P_REP_updownIndup  =     0.08333333333333;
17535 +            P_REP_updownInddown  =                0.125;
17536 +            P_REP_updownIndunchange  =     0.79166666666666;
17537 +            Q_REP_updownIndup  =     0.08333333333333;
17538 +            Q_REP_updownInddown  =                0.125;
17539 +            Q_REP_updownIndunchange  =     0.79166666666666;
17540 +            V_REP_updownIndup  =     0.07407407407407;
17541 +            V_REP_updownInddown  =     0.18518518518518;
17542 +            V_REP_updownIndunchange  =     0.74074074074074;
17543 +            I_REP_updownInd  = 'UNCHANGE' ;
17544 +            U_REP_updownInd  = 'unchange' ;
17545 +            END;
17546 +          END;
17547 +        ELSE DO;
17548 +          IF  NOT MISSING(open ) AND
17549 +                          0.1025 <= open  THEN DO;
17550 +            _NODE_  =                   29;
17551 +            _LEAF_  =                   11;
17552 +            P_REP_updownIndup  =                    0;
17553 +            P_REP_updownInddown  =                    1;
17554 +            P_REP_updownIndunchange  =                    0;
17555 +            Q_REP_updownIndup  =                    0;
17556 +            Q_REP_updownInddown  =                    1;
17557 +            Q_REP_updownIndunchange  =                    0;
17558 +            V_REP_updownIndup  =                    0;
17559 +            V_REP_updownInddown  =                    1;
17560 +            V_REP_updownIndunchange  =                    0;
17561 +            I_REP_updownInd  = 'DOWN' ;
17562 +            U_REP_updownInd  = 'down' ;
17563 +            END;
17564 +          ELSE DO;
17565 +            _NODE_  =                   28;
17566 +            _LEAF_  =                   10;
17567 +            P_REP_updownIndup  =     0.15151515151515;
17568 +            P_REP_updownInddown  =     0.27272727272727;
17569 +            P_REP_updownIndunchange  =     0.57575757575757;
17570 +            Q_REP_updownIndup  =     0.15151515151515;
17571 +            Q_REP_updownInddown  =     0.27272727272727;
17572 +            Q_REP_updownIndunchange  =     0.57575757575757;
17573 +            V_REP_updownIndup  =     0.10714285714285;
17574 +            V_REP_updownInddown  =     0.53571428571428;
17575 +            V_REP_updownIndunchange  =     0.35714285714285;
17576 +            I_REP_updownInd  = 'UNCHANGE' ;
17577 +            U_REP_updownInd  = 'unchange' ;
17578 +            END;
17579 +          END;
17580 +        END;
17581 +      END;
17582 +    ELSE DO;
17583 +      IF  NOT MISSING(open ) AND
17584 +        open  <               0.1125 THEN DO;
17585 +        _NODE_  =                   18;
17586 +        _LEAF_  =                   14;
17587 +        P_REP_updownIndup  =     0.88888888888888;
17588 +        P_REP_updownInddown  =     0.05555555555555;
17589 +        P_REP_updownIndunchange  =     0.05555555555555;
17590 +        Q_REP_updownIndup  =     0.88888888888888;
17591 +        Q_REP_updownInddown  =     0.05555555555555;
17592 +        Q_REP_updownIndunchange  =     0.05555555555555;
17593 +        V_REP_updownIndup  =     0.72727272727272;
17594 +        V_REP_updownInddown  =     0.09090909090909;
17595 +        V_REP_updownIndunchange  =     0.18181818181818;
17596 +        I_REP_updownInd  = 'UP' ;
17597 +        U_REP_updownInd  = 'up' ;
17598 +        END;
17599 +      ELSE DO;
17600 +        IF  NOT MISSING(high ) AND
17601 +          high  <               0.4125 THEN DO;
17602 +          _NODE_  =                   26;
17603 +          _LEAF_  =                   15;
17604 +          P_REP_updownIndup  =      0.3063973063973;
17605 +          P_REP_updownInddown  =     0.45454545454545;
17606 +          P_REP_updownIndunchange  =     0.23905723905723;
17607 +          Q_REP_updownIndup  =      0.3063973063973;
17608 +          Q_REP_updownInddown  =     0.45454545454545;
17609 +          Q_REP_updownIndunchange  =     0.23905723905723;
17610 +          V_REP_updownIndup  =     0.29966329966329;
17611 +          V_REP_updownInddown  =     0.48484848484848;
17612 +          V_REP_updownIndunchange  =     0.21548821548821;
17613 +          I_REP_updownInd  = 'DOWN' ;
17614 +          U_REP_updownInd  = 'down' ;
17615 +          END;
17616 +        ELSE DO;
17617 +          _NODE_  =                   27;
17618 +          _LEAF_  =                   16;
17619 +          P_REP_updownIndup  =     0.34970530451866;
17620 +          P_REP_updownInddown  =     0.53438113948919;
17621 +          P_REP_updownIndunchange  =     0.11591355599214;
17622 +          Q_REP_updownIndup  =     0.34970530451866;
17623 +          Q_REP_updownInddown  =     0.53438113948919;
17624 +          Q_REP_updownIndunchange  =     0.11591355599214;
17625 +          V_REP_updownIndup  =     0.36072144288577;
17626 +          V_REP_updownInddown  =     0.50901803607214;
17627 +          V_REP_updownIndunchange  =     0.13026052104208;
17628 +          I_REP_updownInd  = 'DOWN' ;
17629 +          U_REP_updownInd  = 'down' ;
17630 +          END;
17631 +        END;
17632 +      END;
17633 +    END;
17634 +  END;
17635 +
17636 +*****  RESIDUALS R_ *************;
17637 +IF  F_REP_updownInd  NE 'UP'
17638 +AND F_REP_updownInd  NE 'DOWN'
17639 +AND F_REP_updownInd  NE 'UNCHANGE'  THEN DO;
17640 +        R_REP_updownIndup  = .;
17641 +        R_REP_updownInddown  = .;
17642 +        R_REP_updownIndunchange  = .;
17643 + END;
17644 + ELSE DO;
17645 +       R_REP_updownIndup  =  -P_REP_updownIndup ;
17646 +       R_REP_updownInddown  =  -P_REP_updownInddown ;
17647 +       R_REP_updownIndunchange  =  -P_REP_updownIndunchange ;
17648 +       SELECT( F_REP_updownInd  );
17649 +          WHEN( 'UP'  ) R_REP_updownIndup  = R_REP_updownIndup  +1;
17650 +          WHEN( 'DOWN'  ) R_REP_updownInddown  = R_REP_updownInddown  +1;
17651 +          WHEN( 'UNCHANGE'  ) R_REP_updownIndunchange  =
17652 +        R_REP_updownIndunchange  +1;
17653 +       END;
17654 + END;
17655 +
17656 +****************************************************************;
17657 +******          END OF DECISION TREE SCORING CODE         ******;
17658 +****************************************************************;
17659 +
17660 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17661  run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE4_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
17662  quit;
17663  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS3.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
17665  proc sort data=WORK.EM_USER_REPORT;
17666  by ID VIEW;
17667  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17668  *------------------------------------------------------------*;
17669  * Tree4: Computing metadata for TRAIN data;
17670  *------------------------------------------------------------*;
 
NOTE: View EMWS3.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
18043  data EMWS3.Tree4_EMINFO;
18044  length TARGET KEY $32 DATA $43;
18045  input TARGET KEY DATA $;
18046  cards;
 
NOTE: The data set EMWS3.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18050  run;
18051  proc sort data = EMWS3.Tree4_EMINFO NOTHREADS;
18052  by TARGET KEY;
18053  run;
 
NOTE: There were 3 observations read from the data set EMWS3.TREE4_EMINFO.
NOTE: The data set EMWS3.TREE4_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18054  proc sort data = EMWS3.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18055  by TARGET KEY;
18056  run;
 
NOTE: There were 3 observations read from the data set EMWS3.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18057  proc sort data = EMWS3.Tree4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18058  by TARGET KEY;
18059  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS3.TREE4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
18060  data EMWS3.Tree4_EMINFO;
18061  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18062  by TARGET KEY;
18063  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TREE4_EMINFO has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18064  proc datasets lib=work nolist;
18065  delete TEMP_INFO SORTEDEMINFO;
18066  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18067  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
NOTE: View EMWS3.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS3.TREE4_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 11, 2019
Time:                23:26:47
*------------------------------------------------------------*
18091  data EMWS3.Tree4_EMOUTFIT;
18092  set EMWS3.Tree4_EMOUTFIT;
18093  length TargetLabel $200;
18094  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18095  if upcase(TARGET) eq "REP_UPDOWNIND" then TargetLabel = 'Replacement: updownInd';
18096  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE4_EMOUTFIT.
NOTE: The data set EMWS3.TREE4_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
18097  proc sort data=EMWS3.Tree4_EMREPORTFIT nothreads;
18098  by TARGET;
18099  run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE4_EMREPORTFIT.
NOTE: The data set EMWS3.TREE4_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18100  %let _EMwarndup = 0;
18101  %let _EMtargetdup =;
18102  %let _EMASEtargetdup =;
18103  data _null_;
18104  set EMWS3.Tree4_EMOUTFIT;
18105  if .<_ASE_<0.000001 then do;
18106  call symput('_EMwarndup', '1');
18107  call symput('_EMtargetdup', target);
18108  call symput('_EMASEtargetdup', put(_ASE_, best.));
18109  end;
18110  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE4_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18111  %let EMEXCEPTIONSTRING=;
18112  *------------------------------------------------------------*;
18113  * REPORT: Tree4;
18114  *------------------------------------------------------------*;
18115  %let EM_ACTION = REPORT;
18116  %let syscc = 0;
18117  %macro main;
18118
18119    %if %upcase(&EM_ACTION) = CREATE %then %do;
18120      filename temp catalog 'sashelp.emmodl.tree_create.source';
18121      %include temp;
18122      filename temp;
18123
18124      %em_tree_create;
18125    %end;
18126
18127     %else
18128     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18129
18130         filename temp catalog 'sashelp.emmodl.tree_train.source';
18131         %include temp;
18132         filename temp;
18133         %em_tree_train;
18134     %end;
18135
18136    %else
18137    %if %upcase(&EM_ACTION) = SCORE %then %do;
18138      filename temp catalog 'sashelp.emmodl.tree_score.source';
18139      %include temp;
18140      filename temp;
18141
18142      %em_tree_score;
18143
18144    %end;
18145
18146    %else
18147    %if %upcase(&EM_ACTION) = REPORT %then %do;
18148
18149         filename temp catalog 'sashelp.emmodl.tree_report.source';
18150         %include temp;
18151         filename temp;
18152
18153         %em_tree_report;
18154     %end;
18155
18156    %else
18157    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18158
18159         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18160         %include temp;
18161         filename temp;
18162         %EM_TREE_OPENTREEVIEWER;
18163
18164     %end;
18165
18166    %else
18167    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18168
18169         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18170         %include temp;
18171         filename temp;
18172         %EM_TREE_CLOSETREEVIEWER;
18173
18174     %end;
18175
18176
18177     %doendm:
18178  %mend main;
18179
18180  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18182 +%macro em_tree_makePlotDs( multipleTar= );
18184 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18185 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18186 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18187 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18189 +  /* determine if validation statistics will be displayed */
18190 +  %let validflag=N;
18191 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18192 +    /* determine if validation data exists */
18193 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18194 +      %let validflag=Y;
18195 +    %end;
18196 +  %end;
18198 +   /* retrieve name of decmeta even in presence of multiple targets */
18199 +   %let decmeta = ;
18200 +   %if &EM_DEC_DECMETA eq %then %do;
18201 +     data _Target;
18202 +       set &em_data_variableset;
18203 +       where ROLE='TARGET' and USE in('D', 'Y');
18204 +       keep NAME;
18205 +     run;
18206 +     proc sort data=_Target;
18207 +       by NAME;
18208 +     run;
18209 +     proc sort data=EM_TARGETDECINFO;
18210 +       by TARGET;
18211 +     run;
18212 +     data _Target;
18213 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18214 +       by NAME;
18215 +       if _a then do;
18216 +         call symput('decmeta', trim(DECMETA));
18217 +       end;
18218 +     run;
18219 +     proc delete data=_Target;run;
18220 +   %end;
18221 +   %else %let decmeta = &EM_DEC_DECMETA;
18224 +  /* retrieve targetEvent from decmeta */
18225 +  %let targetEvent=;
18226 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18227 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18228 +      data _null_;
18229 +       set &DECMETA(where=(_TYPE_="TARGET"));
18230 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18231 +      run;
18232 +    %end;
18233 +  %end;
18235 +  /* retrieve predicted var for targetEvent from decmeta */
18236 +  %let predTarget=;
18237 +  %let predLvl=;
18238 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18239 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18240 +      data _null_;
18241 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18242 +       call symput('predTarget', strip(VARIABLE));
18243 +       call symput('predLvl', strip(LEVEL));
18244 +      run;
18245 +    %end;
18246 +  %end;
18247 +  %else %do;
18248 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18249 +      data _null_;
18250 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18251 +       call symput('predTarget', strip(VARIABLE));
18252 +      run;
18253 +    %end;
18254 +  %end;
18256 +  /* create BelowText value */
18257 +  data belowtext;
18258 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18259 +    keep node belowtext;
18260 +  run;
18262 +  /* relace belowtext with variable label if it exists */
18263 +  data belowtext2;
18264 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18265 +    keep node belowtextlbl;
18266 +  run;
18268 +  proc sort data=belowtext; by node; run;
18269 +  proc sort data=belowtext2; by node; run;
18271 +  data belowtext;
18272 +    merge belowtext belowtext2(in=_a);
18273 +    by node;
18274 +    if _a then belowtext=belowtextlbl;
18275 +    keep node belowtext;
18276 +  run;
18278 +  /* create AboveText value */
18279 +  data abovetext;
18280 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18281 +  run;
18282 +  proc sort data=abovetext; by node numeric_value; run;
18284 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18285 +  data abovetext;
18286 +    set abovetext(rename=(node=parent));
18287 +    by parent numeric_value;
18288 +    retain abovetext tempstring flag branch origval origchar ;
18289 +    length abovetext $256;
18290 +    length tempstring origchar $64;
18292 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18293 +      if first.parent then do;
18294 +        if missing(character_value) then do;
18295 +          numeric_value = round(numeric_value, &sp_precision);
18296 +          abovetext = "< "||strip(NUMERIC_VALUE);
18297 +          branch = 1;
18298 +          origval = numeric_value;
18299 +          output;
18300 +        end;
18301 +        else do;
18302 +          abovetext = "< "||strip(CHARACTER_VALUE);
18303 +          branch = 1;
18304 +          origchar = character_value;
18305 +          output;
18306 +        end;
18308 +        if first.parent AND last.parent then do;
18309 +          if missing(character_value) then do;
18310 +            numeric_value = round(numeric_value, &sp_precision);
18311 +            branch = branch + 1;
18312 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18313 +            output;
18314 +          end;
18315 +          else do;
18316 +            branch = branch + 1;
18317 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18318 +            output;
18319 +          end;
18320 +        end;
18321 +      end;
18322 +      else if last.parent then do;
18323 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18324 +          if missing(character_value) then do;
18325 +            numeric_value = round(numeric_value, &sp_precision);
18326 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18327 +          end;
18328 +          else do;
18329 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18330 +          end;
18331 +          branch = branch + 1;
18332 +          output;
18334 +          if missing(character_value) then do;
18335 +            numeric_value = round(numeric_value, &sp_precision);
18336 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18337 +          end;
18338 +          else do;
18339 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18340 +          end;
18341 +          branch = branch + 1;
18342 +          output;
18343 +        end;
18344 +        else do;
18345 +          if missing(character_value) then do;
18346 +            numeric_value = round(numeric_value, &sp_precision);
18347 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18348 +          end;
18349 +          else do;
18350 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18351 +          end;
18352 +          branch = branch + 1;
18353 +          output;
18354 +        end;
18355 +      end;
18356 +      else do;
18357 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18358 +          if missing(character_value) then do;
18359 +            numeric_value = round(numeric_value,&sp_precision);
18360 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18361 +            origval = numeric_value;
18362 +          end;
18363 +          else do;
18364 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18365 +            origchar = character_value;
18366 +          end;
18367 +          branch = branch + 1;
18368 +          output;
18370 +        end;
18371 +        else do;
18372 +          if missing(character_value) then do;
18373 +            numeric_value = round(numeric_value, &sp_precision);
18374 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18375 +            origval = numeric_value;
18376 +          end;
18377 +          else do;
18378 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18379 +            origval = character_value;
18380 +          end;
18381 +          branch = branch + 1;
18382 +          output;
18383 +        end;
18384 +      end;
18385 +    end;
18386 +    else do;
18387 +       if first.numeric_value then do;
18388 +         flag = 0;
18389 +         abovetext = strip(CHARACTER_VALUE);
18390 +         branch = numeric_value;
18391 +         if first.numeric_value AND last.numeric_value then do;
18392 +           output;
18393 +         end;
18394 +       end;
18395 +       else if last.numeric_value then do;
18396 +         if flag=0 then do;
18397 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18398 +           length = length(strip(tempstring));
18399 +           if length < 32 then do;
18400 +             abovetext = strip(tempstring);
18401 +           end;
18402 +           else do;
18403 +             abovetext = strip(abovetext)||", ...";
18404 +             flag = 1;
18405 +           end;
18406 +         end;
18407 +         branch = numeric_value;
18408 +         output;
18409 +       end;
18410 +       else do;
18411 +         if flag=0 then do;
18412 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18413 +           length = length(strip(tempstring));
18414 +           if length < 32 then do;
18415 +             abovetext = strip(tempstring);
18416 +           end;
18417 +           else do;
18418 +             abovetext = strip(abovetext)||", ...";
18419 +             flag=1;
18420 +           end;
18421 +         end;
18422 +         branch = numeric_value;
18423 +       end;
18424 +    end;
18425 +    keep parent branch abovetext;
18426 +  run;
18428 +  /* MIssing value to abovetext */
18429 +  data tempmissing;
18430 +    set &EM_USER_OUTRULES;
18431 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18432 +    rename node=parent numeric_value=branch character_value=misschar;
18433 +  run;
18436 +  proc sort data=abovetext; by parent branch; run;
18437 +  proc sort data=tempmissing; by parent branch; run;
18438 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18440 +  data tempoutnodes;
18441 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18442 +    by parent branch;
18443 +    length traintotal validtotal 8;
18444 +    retain traintotal validtotal;
18446 +    if _a then do;
18447 +      if ^MISSING(abovetext) then do;
18448 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18449 +      end;
18450 +      else do;
18451 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18452 +      end;
18453 +    end;
18454 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18456 +    if node=1 then do;
18457 +      traintotal = N;
18458 +      validtotal=VN;
18459 +    end;
18461 +    drop role rank stat misschar belowtext;
18462 +  run;
18463 +  proc sort data=tempoutnodes; by node; run;
18464 +  proc sort data=belowtext; by node; run;
18466 +  data tempoutnodes;
18467 +    merge tempoutnodes belowtext;
18468 +    by node;
18470 +  run;
18472 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18473 +  %let adjusted = N;
18474 +  %let npriors = 0;
18475 +  data _null_ ;
18476 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18477 +    if eof then do ;
18478 +      call symput("npriors" , strip(put(_N_,best.))) ;
18479 +    end;
18480 +  run;
18481 +  %if &npriors gt 0 %then %let adjusted=Y;
18484 +  /* create a table with targetUsed and targetLevel columns for each node */
18485 +  data temptarmeta;
18486 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18487 +    %if &multipleTar eq N %then %do;
18488 +      AND USE in ('D', 'Y')
18489 +    %end;
18490 +    ));
18491 +    length TARGET $32;
18492 +    Target=name;
18493 +    keep target level;
18494 +  run;
18496 +  %if &multipleTar eq Y %then %do;
18497 +    data temptargetused;
18498 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18499 +      keep node target;
18500 +    run;
18501 +    proc sort data=temptargetused; by target; run;
18502 +    proc sort data=temptarmeta; by target; run;
18503 +    data temptargetused;
18504 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18505 +      by target;
18506 +      if _a and _b;
18507 +    run;
18508 +  %end;
18509 +  %else %do;
18510 +    data temptargetused;
18511 +      set &EM_USER_OUTSTATS;
18512 +      length target $32 tarlevel $10;
18513 +      target="%EM_TARGET";
18514 +      tarlevel="%EM_TARGET_LEVEL";
18515 +      keep node target tarlevel;
18516 +    run;
18517 +    proc sort data=temptargetused nodupkey; by node; run;
18518 +  %end;
18520 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18521 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18522 +  proc sort data=temptargetused; by node; run;
18525 +  /* create tables for all interval targets as well as all class targets */
18526 +  data tempinterval tempclass;
18527 +    merge tempoutstats temptargetused( rename=(target=targetused));
18528 +    by node;
18529 +    %if "&multipleTar" eq "Y" %then %do;
18530 +      if ((missing(Target)) OR (target=targetused ));
18531 +    %end;
18533 +    if tarlevel="INTERVAL" then output tempinterval;
18534 +    else output tempclass;
18535 +  run;
18537 +  /* iniitalize intTarget and classTarget flags */
18538 +  %let em_intNobs =0;
18539 +  %let em_classNobs = 0;
18540 +  %let em_intTarget= N;
18541 +  %let em_classTarget= N;
18543 +  proc sql;
18544 +    reset noprint;
18545 +    select count(*) into :em_intNobs from tempinterval;
18546 +  quit;
18547 +  proc sql;
18548 +    reset noprint;
18549 +    select count(*) into :em_classNobs from tempclass;
18550 +  quit;
18552 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18553 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18555 +  /* retrieve all information for interval targets */
18556 +  %if &em_intTarget eq Y %then %do;
18558 +    /* determine if leaf variable exists */
18559 +    %let dsid=%sysfunc(open(tempinterval,i));
18560 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18561 +    %let rc=%sysfunc(close(&dsid));
18563 +    proc transpose data=tempinterval
18564 +      %if &leafexists %then %do;
18565 +        (drop=leaf)
18566 +      %end;
18567 +      %if &validexist %then %do;
18568 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18569 +      %end;
18570 +      %else %do;
18571 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18572 +      %end;
18573 +      by node;
18574 +      id statname;
18575 +    run;
18576 +    data tempinterval;
18577 +      set tempinterval;
18578 +      if missing(N) then delete;
18579 +    run;
18580 +  %end;
18582 +  /* retrieve all information for class targets */
18583 +  %if &em_classTarget eq Y %then %do;
18584 +    proc sort data=tempclass; by node category; run;
18585 +    %if &validflag eq N %then %do;
18586 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18587 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18588 +    %end;
18589 +    %else %do;
18590 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18591 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18592 +    %end;
18593 +      set tempclass;
18595 +      %if &validflag eq N %then %do;
18596 +        %if "&adjusted" eq "N" %then %do;
18597 +          if statname="N" then output tempn;
18598 +        %end;
18599 +        %else %do;
18600 +          if statname="NPRIORS" then output tempn;
18601 +        %end;
18602 +        else if statname="PREDICTION" then output temppredict;
18603 +        else if statname="PROBABILITY" then output tempprob;
18604 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18605 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18606 +      %end;
18607 +      %else %do;
18608 +        %if "&adjusted" eq "N" %then %do;
18609 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18610 +        %end;
18611 +        %else %do;
18612 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18613 +        %end;
18614 +        else if statname="PREDICTION" then output temppredict;
18615 +        else if statname="PROBABILITY" then output tempprob;
18616 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18617 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18618 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18619 +      %end;
18620 +    run;
18623 +    /* determine if profit/loss exists in tempprofit */
18624 +    %let em_profitflag=0;
18625 +    %let em_lossflag=0;
18626 +    proc sql;
18627 +      reset noprint;
18628 +      select count(*) into :em_profitflag from tempprofit;
18629 +    quit;
18630 +    proc sql;
18631 +      reset noprint;
18632 +      select count(*) into :em_lossflag from temploss;
18633 +    quit;
18635 +    %if &validFlag eq Y %then %do;
18636 +      proc transpose data=tempn
18637 +        %if "&adjusted" eq "N" %then %do;
18638 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18639 +        %end;
18640 +        %else %do;
18641 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18642 +        %end;
18643 +        by node;
18644 +        id statname;
18645 +      run;
18646 +      %if &em_profitflag ne 0 %then %do;
18647 +        proc transpose data=tempprofit out=tempprofit;
18648 +          by node category;
18649 +          id statname ;
18650 +        run;
18651 +      %end;
18652 +      %if &em_lossflag ne 0 %then %do;
18653 +        proc transpose data=temploss out=temploss;
18654 +          by node category;
18655 +          id statname ;
18656 +        run;
18657 +      %end;
18658 +      data tempprob;
18659 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18660 +        by node
18661 +        %if &multipleTar eq Y %then %do;
18662 +          target
18663 +        %end;
18664 +        category;
18665 +      run;
18666 +    %end;
18668 +    /* store percentcorrect value */
18669 +    data temppredict;
18670 +      merge tempprob temppredict(in=_a);
18671 +      by node category;
18672 +      if _a then do;
18673 +        percentCorrect = statvalue;
18674 +        %if &validFlag eq Y %then %do;
18675 +          vpercentCorrect= vstatvalue;
18676 +        %end;
18677 +      end;
18678 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18679 +      %if &validFlag eq Y %then %do;
18680 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18681 +      %end;
18682 +      ;
18683 +      if missing(percentCorrect) then delete;
18684 +      drop target;
18685 +    run;
18687 +    /* build profittext */
18688 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18689 +      data tempprofittext(keep= node profittext profitloss);
18690 +        length profittext $800 profitloss 8.;
18691 +        retain profittext profitloss;
18693 +        merge tempprob
18694 +        %if &em_profitflag ne 0 %then %do;
18695 +          tempprofit
18696 +        %end;
18697 +        %else %if &em_lossflag ne 0 %then %do;
18698 +          temploss
18699 +        %end;
18700 +        ;
18701 +        by node category;
18703 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18704 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18705 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18706 +          %let profittype = ALL;
18707 +        %end;
18709 +        /* create the profitloss variable for nodecolor if selected */
18710 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18712 +        %if "&profittype" eq "ALL" %then %do;
18713 +          if strip(CATEGORY)="&targetEvent" then do;
18714 +            profitloss=statvalue;
18715 +          end;
18716 +          if first.node then do;
18717 +            %if &validFlag eq N %then %do;
18718 +             %if &em_profitflag ne 0 %then %do;
18719 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18720 +             %end;
18721 +             %if &em_lossflag ne 0 %then %do;
18722 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18723 +             %end;
18724 +            %end;
18725 +            %else %do;
18726 +             %if &em_profitflag ne 0 %then %do;
18727 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18727!+;
18728 +             %end;
18729 +             %if &em_lossflag ne 0 %then %do;
18730 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18731 +             %end;
18732 +            %end;
18733 +          end;
18734 +          else if last.node then do;
18735 +            %if &validFlag eq N %then %do;
18736 +             %if &em_profitflag ne 0 %then %do;
18737 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18738 +             %end;
18739 +             %if &em_lossflag ne 0 %then %do;
18740 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18741 +             %end;
18742 +             /*if CATEGORY="&targetEvent" then do;
18743 +               profitloss=statvalue;
18744 +             end;*/
18745 +            %end;
18746 +            %else %do;
18747 +             %if &em_profitflag ne 0 %then %do;
18748 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18748!+14.&EM_PROPERTY_SPLITPRECISION);
18749 +                if CATEGORY="&targetEvent" then do;
18750 +                 profitloss=ALTERNATIVE_PROFIT;
18751 +                end;
18752 +             %end;
18753 +             %if &em_lossflag ne 0 %then %do;
18754 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18754!+14.&EM_PROPERTY_SPLITPRECISION);
18755 +                if CATEGORY="&targetEvent" then do;
18756 +                  profitloss=ALTERNATIVE_LOSS;
18757 +                end;
18758 +             %end;
18759 +            %end;
18760 +            output;
18761 +          end;
18762 +          else do;
18763 +            %if &validFlag eq N %then %do;
18764 +             %if &em_profitflag ne 0 %then %do;
18765 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18766 +             %end;
18767 +             %if &em_lossflag ne 0 %then %do;
18768 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18769 +             %end;
18770 +            %end;
18771 +            %else %do;
18772 +             %if &em_profitflag ne 0 %then %do;
18773 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18773!+14.&EM_PROPERTY_SPLITPRECISION);
18774 +             %end;
18775 +             %if &em_lossflag ne 0 %then %do;
18776 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18776!+14.&EM_PROPERTY_SPLITPRECISION);
18777 +             %end;
18778 +            %end;
18779 +          end;
18780 +        %end;
18781 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18782 +          if strip(CATEGORY) = "&targetevent" then do;
18783 +            %if &validFlag eq N %then %do;
18784 +             %if &em_profitflag ne 0 %then %do;
18785 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18786 +             %end;
18787 +             %if &em_lossflag ne 0 %then %do;
18788 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18789 +             %end;
18790 +             profitloss=statvalue;
18791 +            %end;
18792 +            %else %do;
18793 +             %if &em_profitflag ne 0 %then %do;
18794 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18794!+;
18795 +                profitloss=ALTERNATIVE_PROFIT;
18796 +             %end;
18797 +             %if &em_lossflag ne 0 %then %do;
18798 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18799 +                profitloss=ALTERNATIVE_LOSS;
18800 +             %end;
18801 +            %end;
18802 +            output;
18803 +          end;
18804 +        %end;
18805 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18806 +          if strip(CATEGORY) = "&targetevent" then do;
18807 +            %if &validFlag eq N %then %do;
18808 +             profitloss=statvalue;
18809 +            %end;
18810 +            %else %do;
18811 +             %if &em_profitflag ne 0 %then %do;
18812 +                profitloss=ALTERNATIVE_PROFIT;
18813 +             %end;
18814 +             %if &em_lossflag ne 0 %then %do;
18815 +                profitloss=ALTERNATIVE_LOSS;
18816 +             %end;
18817 +            %end;
18818 +            output;
18819 +          end;
18820 +        %end;
18821 +      run;
18822 +    %end;
18824 +    data tempprob(keep= node probtext);
18825 +      length probtext $800;
18826 +      retain probtext;
18827 +      set tempprob ;
18828 +      by node;
18830 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18831 +      %let probtype = &EM_PROPERTY_TARGET;
18832 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18833 +        %let probtype = ALL;
18834 +      %end;
18836 +      %if "&probtype" eq "ALL" %then %do;
18837 +        if first.node then do;
18838 +          %if &validFlag eq N %then %do;
18839 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18840 +          %end;
18841 +          %else %do;
18842 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18843 +          %end;
18844 +        end;
18845 +        else if last.node then do;
18846 +          %if &validFlag eq N %then %do;
18847 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18848 +          %end;
18849 +          %else %do;
18850 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18851 +          %end;
18852 +          output;
18853 +        end;
18854 +        else do;
18855 +          %if &validFlag eq N %then %do;
18856 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18857 +          %end;
18858 +          %else %do;
18859 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18860 +          %end;
18861 +        end;
18862 +      %end;
18863 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18864 +        if strip(CATEGORY) = "&targetevent" then do;
18865 +          %if &validFlag eq N %then %do;
18866 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18867 +          %end;
18868 +          %else %do;
18869 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18870 +          %end;
18871 +          output;
18872 +        end;
18873 +      %end;
18874 +      %else %if "&probtype" eq "NONE" %then %do;
18875 +        if last.node then do;
18876 +          output;
18877 +        end;
18878 +      %end;
18879 +    run;
18880 +  %end;
18882 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18884 +  %let oldexists=0;
18885 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18886 +     data old_tree_plot;
18887 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18888 +        rename nodecolor=oldnodecolor;
18889 +     run;
18891 +     proc sort data=old_tree_plot;
18892 +        by node;
18893 +     run;
18895 +     %let oldexists=1;
18896 +  %end;
18898 +  data &EM_USER_TREE_PLOT;
18899 +    length textall $800;
18900 +    merge tempoutnodes temptargetused
18902 +    %if &em_intTarget eq Y %then %do;
18903 +      tempinterval
18904 +    %end;
18906 +    %if &em_classTarget eq Y %then %do;
18908 +      %if &validFlag eq N %then %do;
18909 +        tempn(rename=(statvalue=N))
18910 +      %end;
18911 +      %else %do;
18912 +        tempn
18913 +      %end;
18915 +      temppredict tempprob
18917 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18918 +        tempprofittext
18919 +      %end;
18920 +    %end;
18921 +    ;
18922 +    by node;
18924 +    /* build nodetext based on user selection */
18925 +    textall="";
18927 +    %if &em_intTarget eq Y %then %do;
18928 +    if tarlevel="INTERVAL" then do;
18929 +      /* Nodeid */
18930 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18931 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18932 +      %end;
18934 +      /* Target identifier if multiple targets are used */
18935 +      %if "&multipleTar" eq "Y" %then %do;
18936 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18937 +      %end;
18939 +      %if &validFlag eq Y %then %do;
18940 +         /* Column labels displayed in validflag eq Y only */
18941 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18942 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18942!+noquote ))";
18943 +         %end;
18945 +         /* Average values */
18946 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18947 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18948 +         %end;
18950 +         /* RASE */
18951 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18952 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18953 +         %end;
18955 +         /* Count */
18956 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18957 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18958 +         %end;
18959 +      %end;
18960 +      %else %do;
18961 +         /* Average values */
18962 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18963 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18964 +         %end;
18966 +         /* RASE */
18967 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18968 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18969 +         %end;
18971 +         /* Count */
18972 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18973 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18974 +         %end;
18975 +      %end;
18977 +      /* nodecolor */
18978 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18979 +        nodecolor=PREDICTION;
18980 +      %end;
18981 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18982 +        nodecolor=RASE;
18983 +      %end;
18984 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18985 +        nodecolor=1;
18986 +      %end;
18988 +    end;
18989 +    %end;
18990 +    %if &em_classTarget eq Y %then %do;
18991 +    if tarlevel^="INTERVAL" then  do;
18993 +      /* Nodeid */
18994 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18995 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18996 +      %end;
18997 +      /* Target identifier if multiple targets are used */
18998 +      %if "&multipleTar" eq "Y" %then %do;
18999 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
19000 +      %end;
19002 +      /* Predicted values */
19003 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
19004 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
19005 +      %end;
19007 +      /* Column labels displayed in validflag eq Y only */
19008 +      %if "&ValidFlag" eq "Y" %then %do;
19009 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
19010 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
19010!+noquote ))";
19011 +        %end;
19012 +      %end;
19014 +      /* Target Values */
19015 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
19016 +        textall=strip(textall)||"0A"x||strip(probtext);
19017 +      %end;
19019 +      /* include profit or loss for all target levels */
19020 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
19021 +        textall=strip(textall)||"0A"x||strip(profittext);
19022 +      %end;
19024 +      %if &validFlag eq N %then %do;
19025 +        /* Percent Correct */
19026 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19027 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
19028 +        %end;
19030 +         /* Count */
19031 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19032 +          %if "&adjusted" eq "N" %then %do;
19033 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
19034 +          %end;
19035 +          %else %do;
19036 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
19037 +          %end;
19038 +         %end;
19039 +      %end;
19040 +      %else %do;
19041 +        /* Percent Correct */
19042 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
19043 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19044 +        %end;
19046 +         /* Count */
19047 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19048 +          %if "&adjusted" eq "N" %then %do;
19049 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19050 +          %end;
19051 +          %else %do;
19052 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19053 +          %end;
19054 +         %end;
19055 +      %end;
19057 +      /* nodecolor */
19058 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19059 +       %if &multipleTar ne Y %then %do;
19060 +        nodecolor=&predTarget;
19061 +       %end;
19062 +       %else %do;
19063 +         nodecolor=percentcorrect;
19064 +       %end;
19065 +      %end;
19066 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19067 +        nodecolor=percentcorrect;
19068 +      %end;
19069 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19070 +        nodecolor=1;
19071 +      %end;
19072 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19073 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19074 +          nodecolor=percentcorrect;
19075 +        %end;
19076 +        %else %do;
19077 +          nodecolor=profitloss;
19078 +        %end;
19079 +      %end;
19081 +    end;
19082 +    %end;
19083 +    %if &em_intTarget eq Y %then %do;
19084 +     drop  PREDICTION  TARGET TARLEVEL
19085 +     %if &ValidFlag eq Y %then %do;
19086 +         VPREDICTION
19087 +     %end;
19088 +     ;
19089 +    %end;
19090 +    %if &em_classTarget eq Y %then %do;
19091 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19092 +     %if &ValidFlag eq Y %then %do;
19093 +         VSTATVALUE
19094 +     %end;
19095 +     ;
19096 +    %end;
19098 +  run;
19100 +  /* add leaf index information to plotds - based on primary target only*/
19101 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19102 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19103 +      set &EM_USER_OUTSTATS;
19104 +      if ((statname="PROBABILITY"
19105 +      %if &validexist %then %do;
19106 +       or statname="VALID: PROBABILITY"
19107 +      %end;
19108 +      ) AND (CATEGORY="&TARGETEVENT")
19109 +      %if "&multipleTar" eq "Y" %then %do;
19110 +        AND (Target="%EM_TARGET")
19111 +      %end;
19112 +      );
19113 +    run;
19115 +    %if &validexist %then %do;
19116 +      proc sort data=tempprob; by node; run;
19117 +      %let vpredTarget = V%substr(&predTarget, 2);
19118 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19119 +         by node;
19120 +         id statname;
19121 +      run;
19122 +    %end;
19123 +  %end;
19124 +  %else %do;
19125 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19126 +      set &EM_USER_OUTSTATS;
19127 +      if ((statname="PREDICTION"
19128 +      %if &validexist %then %do;
19129 +       or statname="VALID: PREDICTION"
19130 +      %end;
19131 +      )
19132 +      %if "&multipleTar" eq "Y" %then %do;
19133 +        AND (Target="%EM_TARGET")
19134 +      %end;
19135 +      );
19136 +    run;
19137 +    %if &validexist %then %do;
19138 +      proc sort data=tempprob; by node; run;
19139 +      %let vpredTarget = V%substr(&predTarget, 2);
19140 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19141 +         by node;
19142 +         id statname;
19143 +      run;
19144 +    %end;
19145 +  %end;
19147 +  proc sort data=tempprob; by node; run;
19148 +  data tempoutnodes;
19149 +    merge tempoutnodes tempprob;
19150 +    by node;
19151 +  run;
19153 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19154 +  data tempnodes;
19155 +    retain traintotal validtotal;
19156 +    set tempnodes(where=(leaf ne . ));
19157 +    tprob=round(&predTarget, .01);
19158 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19159 +      percevent_train=round(tprob*100, .01);
19160 +    %end;
19161 +    %else %do;
19162 +      percevent_train=tprob;
19163 +    %end;
19165 +    perc_train=round((n/traintotal)*100, 0.01);
19166 +    /* leafwidth already has a *10 multiplier */
19167 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19169 +    %if &validexist %then %do;
19170 +      %let vpredTarget = V%substr(&predTarget,2);
19171 +      vprob=round(&vpredTarget, .01);
19172 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19173 +        percevent_valid=round(vprob*100, .01);
19174 +      %end;
19175 +      %else %do;
19176 +        percevent_valid=vprob;
19177 +      %end;
19178 +      perc_valid=round((vn/validtotal)*100, .01);
19179 +    %end;
19181 +    index=_N_;
19182 +    keep node index tprob perc_train percevent_train
19183 +    %if &validexist %then %do;
19184 +        vprob percevent_valid perc_valid
19185 +    %end;
19186 +    ;
19187 +  run;
19188 +  proc sort data=tempnodes; by node; run;
19189 +  data &EM_USER_TREE_PLOT;
19190 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19191 +    by node;
19192 +    if missing(node) then delete;
19193 +    %if &oldexists %then %do;
19194 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19195 +      drop oldnodecolor;
19196 +    %end;
19197 +    abovetext = compbl(abovetext);
19199 +    /* add variable labels */
19200 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19201 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19202 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19203 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19204 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19205 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19207 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19208 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19209 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19210 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19211 +          %end;
19212 +          %else %do;
19213 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19214 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19215 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19216 +          %end;
19217 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19219 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19220 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19221 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19222 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19223 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19224 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19225 +          %end;
19226 +          %else %do;
19227 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19228 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19229 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19230 +          %end;
19231 +    ;
19232 +  run;
19234 +  /* delete temporary tables */
19235 +  proc datasets lib=work nolist;
19236 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19237 +  run;
19239 +%mend em_tree_makePlotDs;
19243 +%macro em_tree_report;
19245 +   /* report properties */
19246 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19247 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19248 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19249 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19250 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19251 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19252 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19253 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19254 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19255 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19256 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19257 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19258 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19260 +   %let validexist=0;
19261 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19262 +     %let validexist=1;
19263 +   %end;
19265 +   /* determine if multiple targets will be processed */
19266 +   %let em_tree_multipleTargets=N;
19267 +   %let em_tree_numTarget=1;
19268 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19269 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19270 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19271 +         %let em_tree_multipleTargets=N;
19272 +      %end;
19273 +      %else %do;
19274 +        data _null_;
19275 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19276 +          if eof then
19277 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19278 +        run;
19280 +        %if &em_tree_numTarget gt 1 %then %do;
19281 +           %let em_tree_multipleTargets=Y;
19282 +        %end;
19283 +     %end;
19284 +   %end;
19286 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19288 +   /* variable importance */
19289 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19290 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19292 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19293 +     /* and the columns may not be generated                                                                                 */
19294 +     %let em_tree_cvexists=;
19295 +     %let em_tree_surrexists=.;
19296 +     data _null_;
19297 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19298 +       if eof then do ;
19299 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19300 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19301 +       end;
19302 +     run;
19304 +     data &EM_USER_OUTIMPORT;
19305 +         set &EM_USER_OUTIMPORT;
19306 +         /* format columns based on Precison value specified */
19307 +         format importance 15.&EM_PROPERTY_PRECISION
19308 +              %if &validexist %then %do;
19309 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19310 +              %end;
19311 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19312 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19313 +              %end;
19314 +         ;
19315 +     run;
19317 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19318 +     proc print data=&EM_USER_OUTIMPORT
19319 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19320 +          (where=((nrules>0) OR (nsurrogates>0)))
19321 +        %end;
19322 +        %else %do;
19323 +           (where=(nrules>0))
19324 +        %end;
19325 +        label noobs
19326 +        ;
19327 +     run;
19328 +     title10;
19330 +   %end;
19332 +   /* Sequence */
19333 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19334 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19335 +   data _null_ ;
19336 +      set &EM_USER_outseq (obs=2) end=eof ;
19337 +      if eof then do ;
19338 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19339 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19340 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19341 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19342 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19343 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19344 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19345 +      end;
19346 +    run;
19348 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19349 +      data &EM_USER_OUTSEQ;
19350 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19351 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19352 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19353 +           _XMISC_=_VMISC_
19354 +        %end;
19355 +        %if "&em_tree_aprof" ne "."  %then %do;
19356 +           _XAPROF_=_VAPROF_
19357 +           _XPROF_ = _VPROF_
19358 +        %end;
19359 +        %if "&em_tree_aloss" ne "."  %then %do;
19360 +           _XALOSS_=_VALOSS_
19361 +        %end;
19362 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19363 +           _XPASE_ = _VPASE_
19364 +           _XPMISC_ = _VPMISC_
19365 +        %end;
19367 +        ));
19368 +     %end;
19369 +     %else %do;
19370 +        set &EM_USER_OUTSEQ;
19371 +     %end;
19373 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19374 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19375 +            _MISC_   15.&EM_PROPERTY_PRECISION
19376 +         %end;
19377 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19378 +            _PASE_  15.&EM_PROPERTY_PRECISION
19379 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19380 +         %end;
19381 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19382 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19383 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19384 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19385 +            %end;
19386 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19387 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19388 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19389 +            %end;
19390 +         %end;
19391 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19392 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19393 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19394 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19395 +            %end;
19396 +         %end;
19397 +         %if "&em_tree_seq" ne "." %then %do;
19398 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19399 +         %end;
19400 +         %if "&em_tree_vseq" ne "." %then %do;
19401 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19402 +         %end;
19403 +         %if "&em_tree_aprof" ne "." %then %do;
19404 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19405 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19406 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19407 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19408 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19409 +           %end;
19410 +         %end;
19411 +         %else %if "&em_tree_aloss" ne "." %then %do;
19412 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19413 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19414 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19415 +           %end;
19416 +         %end;
19417 +      ;
19418 +    run;
19419 +   %end;
19421 +   /* Observation Based Importance */
19422 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19424 +      /* need to check for 0 obs */
19425 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19426 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19427 +      %let rc=%sysfunc(close(&dsid));
19429 +      %if &onobs %then %do;
19430 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19431 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19433 +         data &EM_USER_OUTOBSIMP;
19434 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19435 +           if _a;
19436 +           by _INPUT1_;
19437 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19438 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19439 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19440 +                   %end;
19441 +                   ;
19442 +         run;
19443 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19444 +      %end;
19445 +   %end;
19447 +  %end;
19449 +  /* create dataset to support tree diagram and icicle plot */
19450 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19451 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19453 +  /* display tree diagram */
19454 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19455 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19457 +  /* display icicle diagram */
19458 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19459 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19461 +  /* Leaf Statistics Plot */
19462 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19464 +  /* print leaf information to output window */
19465 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19467 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19468 +       by descending N;
19469 +     run;
19471 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19472 +     %local vn;
19473 +     data _null_;
19474 +       set t (obs=2) end=eof;
19475 +       if eof then do;
19476 +         call symput("vn", strip(put(vn, best.)));
19477 +       end;
19478 +     run;
19480 +     data t;
19481 +       set t;
19482 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19483 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19484 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19485 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19486 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19487 +       %end;
19488 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19489 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19490 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19491 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19492 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19493 +          %end;
19494 +       %end;
19495 +       ;
19496 +     run;
19498 +     /* determine if rase is found in t */
19499 +    %let dsid=%sysfunc(open(t,i));
19500 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19501 +    %let rc=%sysfunc(close(&dsid));
19503 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19504 +     proc print data=t noobs label;
19505 +       where tprob ne .;
19506 +       var node depth N tprob
19507 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19508 +         %if "&vn" ne "." %then %do;
19509 +           VN
19510 +         %end;
19511 +         vprob
19512 +       %end;
19513 +       %if &raseexists %then %do;
19514 +            RASE
19515 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19516 +              VRASE
19517 +            %end;
19518 +       %end;
19519 +       ;
19520 +     run;
19521 +     title10;
19522 +  %end;
19524 +  /* create plots that are done during training of node */
19525 +  /* display iterative plot, including reference line */
19526 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19527 +   /* %if &nleaves eq  %then %do; */
19528 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19529 +      data _null_;
19530 +        set &EM_USER_OUTTOPOLOGY end=eof;
19531 +        if eof then do;
19532 +          call symput('nleaves', LEAF);
19533 +        end;
19534 +      run;
19535 +   /* %end; */
19537 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19538 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19539 +  %end;
19541 +  /* display leaf statistics */
19542 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19544 +  /* stats by node if multiple targets = Y */
19545 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19546 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19547 +    data &EM_USER_OUTSTATS;
19548 +      set &EM_USER_OUTSTATS;
19550 +     * if STATNAME="TARGET" then delete;
19551 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19552 +      drop leaf;
19553 +    run;
19554 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19556 +  %end;
19557 +  %else %do;
19558 +    /* add outstats and outdescribe to spk but not results */
19559 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19560 +  %end;
19562 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE4_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS3.TREE4_OUTIMPORT.
NOTE: The data set EMWS3.TREE4_OUTIMPORT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS3.TREE4_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE4_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set EMWS3.TREE4_OUTSEQ.
NOTE: The data set EMWS3.TREE4_OUTSEQ has 16 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE4_REP_UPDOWNIND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE4_REP_UPDOWNIND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='UP');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS3.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS3.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 15 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 15 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set EMWS3.TREE4_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 15 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 15 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 30 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 270 observations read from the data set EMWS3.TREE4_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 15 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 30 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 15 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set EMWS3.TREE4_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 31 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 30 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 31 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 31 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 31 observations and 28 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 15 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 15 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 15 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 31 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS3.TREE4_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE4_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 279 observations read from the data set EMWS3.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 279 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 279 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 248 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 31 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 279 observations read from the data set EMWS3.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 279 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 279 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 31 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 279 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 279 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 279 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 279 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 62 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 31 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 93 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 93 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 31 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 93 observations read from the data set WORK.TEMPPROB.
NOTE: There were 93 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 93 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 93 observations read from the data set WORK.TEMPPROB.
NOTE: There were 31 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 31 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 93 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 31 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 31 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 31 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 31 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 31 observations read from the data set WORK.TEMPN.
NOTE: There were 31 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 31 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE4_TREE_PLOT has 31 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 279 observations read from the data set EMWS3.TREE4_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 62 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 62 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 62 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 31 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 31 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 31 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 31 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 31 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 16 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 16 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set EMWS3.TREE4_TREE_PLOT.
NOTE: There were 16 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS3.TREE4_TREE_PLOT has 31 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 31 observations read from the data set EMWS3.TREE4_TREE_PLOT.
NOTE: The data set WORK.T has 31 observations and 40 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 31 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 31 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 16 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 31 observations read from the data set EMWS3.TREE4_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
19563
19564  *------------------------------------------------------------*;
19565  * End REPORT: Tree4;
19566  *------------------------------------------------------------*;
 
19567  /* Reset EM Options */
19568  options formchar="|----|+|---+=|-/\<>*";
19569  options nocenter ls=256 ps=10000;
19570  goptions reset=all device=GIF NODISPLAY;
 
19571  proc sort data=WORK.EM_USER_REPORT;
19572  by ID VIEW;
19573  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19574  proc sort data=EMWS3.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19575  by NAME;
19576  run;
 
NOTE: There were 23 observations read from the data set EMWS3.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 23 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19577  proc sort data=EMWS3.Tree4_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19578  by NAME;
19579  run;
 
NOTE: There were 23 observations read from the data set EMWS3.TREE4_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 23 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19580  data WORK.ASSESS_META;
19581  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19582  by NAME;
19583  run;
 
NOTE: There were 23 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 23 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 23 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
19584  data EM_temp_assessMeta;
19585  set EMWS3.Tree4_CMeta_TRAIN;
19586  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19587  run;
 
NOTE: There were 16 observations read from the data set EMWS3.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19588  data EM_temp_assessdata;
19589  set EMWS3.Tree4_TRAIN(keep=
19590  F_REP_updownInd
19591  I_REP_updownInd
19592  P_REP_updownInddown
19593  P_REP_updownIndunchange
19594  P_REP_updownIndup
19595  Q_REP_updownInddown
19596  Q_REP_updownIndunchange
19597  Q_REP_updownIndup
19598  R_REP_updownInddown
19599  R_REP_updownIndunchange
19600  R_REP_updownIndup
19601  U_REP_updownInd
19602  V_REP_updownInddown
19603  V_REP_updownIndunchange
19604  V_REP_updownIndup
19605  _WARN_
19606  REP_updownInd
19607  );
19608  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE4_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 1250 observations read from the data set EMWS3.TREE4_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1250 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23893   data EM_temp_assessMeta;
23894   set EMWS3.Tree4_CMeta_TRAIN;
23895   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23896   run;
 
NOTE: There were 16 observations read from the data set EMWS3.TREE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
23897   data EM_temp_assessdata;
23898   set EMWS3.Tree4_VALIDATE(keep=
23899   F_REP_updownInd
23900   I_REP_updownInd
23901   P_REP_updownInddown
23902   P_REP_updownIndunchange
23903   P_REP_updownIndup
23904   Q_REP_updownInddown
23905   Q_REP_updownIndunchange
23906   Q_REP_updownIndup
23907   R_REP_updownInddown
23908   R_REP_updownIndunchange
23909   R_REP_updownIndup
23910   U_REP_updownInd
23911   V_REP_updownInddown
23912   V_REP_updownIndunchange
23913   V_REP_updownIndup
23914   _WARN_
23915   REP_updownInd
23916   );
23917   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE4_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
NOTE: There were 1251 observations read from the data set EMWS3.PART_VALIDATE.
NOTE: There were 1251 observations read from the data set EMWS3.TREE4_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1251 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28211   %let _cn = %sysfunc(getoption(CENTER));
28212   options nocenter;
28213   proc print data=EMWS3.Tree4_EMREPORTFIT noobs label;
28214   var STAT LABEL TRAIN
28215   VALIDATE
28216   ;
28217   by TARGET TARGETLABEL;
28218   title9 ' ';
28219   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28220   run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE4_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28221   title10;
28222   options &_cn;
 
28223   proc sort data=EMWS3.Tree4_EMCLASSIFICATION nothreads;
28224   by DATAROLE TARGET TARGETLABEL;
28225   run;
 
NOTE: There were 18 observations read from the data set EMWS3.TREE4_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE4_EMCLASSIFICATION has 18 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28226   %let _cn = %sysfunc(getoption(CENTER));
28227   options nocenter;
28228   proc print data=EMWS3.Tree4_EMCLASSIFICATION noobs label;
28229   var from into pct_row pct_col count percent
28230   ;
28231   by DATAROLE TARGET TARGETLABEL;
28232   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28233   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28234   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28235   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28236   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28237   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28238   where _TYPE_='PREDICTION';
28239   title9 ' ';
28240   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28241   run;
 
NOTE: There were 18 observations read from the data set EMWS3.TREE4_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28242   title9;
28243   title10;
28244   options &_cn;
 
28245   %let _cn = %sysfunc(getoption(CENTER));
28246   options nocenter;
28247   data EMWS3.Tree4_EMEVENTREPORT;
28248   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28248 !  8;
28249   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28249 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28249 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28249 ! FALSEEVENT
28250   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28250 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28250 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28251      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28252   FALSEEVENT=0;
28253   FALSENEVENT=0;
28254   TRUEEVENT=0;
28255   TRUENEVENT=0;
28256   set EMWS3.Tree4_EMEVENTREPORT;
28257   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE4_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE4_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28258   proc print data=EMWS3.Tree4_EMEVENTREPORT noobs label;
28259   title9 ' ';
28260   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28261   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28262   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE4_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28263   title10;
28264   options &_cn;
 
28265   proc datasets library=EMWS3 nolist;
28266   modify Tree4_EMRANK;
28267   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28268   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28269   run;
 
NOTE: MODIFY was successful for EMWS3.TREE4_EMRANK.DATA.
28270   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
28271   %let _cn = %sysfunc(getoption(CENTER));
28272   options nocenter;
28273   proc print data=EMWS3.Tree4_EMRANK label noobs;
28274   var
28275   decile gain lift liftc resp respc N _meanP_;
28276   by
28277   notsorted DATAROLE
28278   notsorted TARGET
28279   notsorted TARGETLABEL
28280   ;
28281   title9 ' ';
28282   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28283   run;
 
NOTE: There were 40 observations read from the data set EMWS3.TREE4_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28284   title10;
28285   options &_cn;
 
28286   proc datasets library=EMWS3 nolist;
28287   modify Tree4_EMSCOREDIST;
28288   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28289   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28290   run;
 
NOTE: MODIFY was successful for EMWS3.TREE4_EMSCOREDIST.DATA.
28291   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
