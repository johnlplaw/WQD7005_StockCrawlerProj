*------------------------------------------------------------*
* Training Log
Date:                May 11, 2019
Time:                23:23:37
*------------------------------------------------------------*
14715  proc freq data=EMWS3.Tree2_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Tree2META;
14717  run;

NOTE: There were 23 observations read from the data set EMWS3.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
      

14718  proc print data=WORK.Tree2META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;

NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

14724  title10;

14725  %let EMNORLEN = %DMNORLEN;
EMWS3.Part_TRAIN EMWS3.Part_TRAIN 
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN 
EMWS3.Part_TRAIN EMWS3.Part_TRAIN 
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
14772  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14773  length ORDER $20;
14774  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14775     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14776  set EMWS3.TREE2_REP_UPDOWNIND_DM( where=(_TYPE_="TARGET"));
14777  NumLevels=3;
14778  select(upcase(ORDER));
14779  when('DESC') ORDER = 'Descending';
14780  when('ASC') ORDER = 'Ascending';
14781  when('FMTDESC') ORDER = 'Formatted Descending';
14782  when('FMTASC') ORDER = 'Formatted Ascending';
14783  otherwise ORDER = 'Descending';
14784  end;
14785  output;
14786  run;

NOTE: There were 1 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      

14787  title9 ' ';
14788  proc print data=WORK.Tree2_EVENT noobs label;
14789  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14790  title9 ' ';
14791  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14792  run;

NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14793  title10;

"No decisions defined for target "REP_updownInd"." 
14794  proc print data = EMWS3.Tree2_REP_updownInd_DM noobs label;
14795  var _type_ variable label;
14796  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14797  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14798  title9 ' ';
14799  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14800  run;

NOTE: There were 9 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

14801  title10;

14802  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15328  *------------------------------------------------------------*;
15329  * Tree2: Generation of macros and macro variables;
15330  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15331  *------------------------------------------------------------*;

15332  %let EMEXCEPTIONSTRING=;
15333  *------------------------------------------------------------*;
15334  * TRAIN: Tree2;
15335  *------------------------------------------------------------*;
15336  %let EM_ACTION = TRAIN;
15337  %let syscc = 0;
15338  %macro main;
15339  
15340    %if %upcase(&EM_ACTION) = CREATE %then %do;
15341      filename temp catalog 'sashelp.emmodl.tree_create.source';
15342      %include temp;
15343      filename temp;
15344  
15345      %em_tree_create;
15346    %end;
15347  
15348     %else
15349     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15350  
15351         filename temp catalog 'sashelp.emmodl.tree_train.source';
15352         %include temp;
15353         filename temp;
15354         %em_tree_train;
15355     %end;
15356  
15357    %else
15358    %if %upcase(&EM_ACTION) = SCORE %then %do;
15359      filename temp catalog 'sashelp.emmodl.tree_score.source';
15360      %include temp;
15361      filename temp;
15362  
15363      %em_tree_score;
15364  
15365    %end;
15366  
15367    %else
15368    %if %upcase(&EM_ACTION) = REPORT %then %do;
15369  
15370         filename temp catalog 'sashelp.emmodl.tree_report.source';
15371         %include temp;
15372         filename temp;
15373  
15374         %em_tree_report;
15375     %end;
15376  
15377    %else
15378    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15379  
15380         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15381         %include temp;
15382         filename temp;
15383         %EM_TREE_OPENTREEVIEWER;
15384  
15385     %end;
15386  
15387    %else
15388    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15389  
15390         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15391         %include temp;
15392         filename temp;
15393         %EM_TREE_CLOSETREEVIEWER;
15394  
15395     %end;
15396  
15397  
15398     %doendm:
15399  %mend main;
15400  
15401  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15403 +%macro em_tree_train;
15405 +   %if &EM_IMPORT_DATA eq %then %do;
15406 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15407 +       %put &em_codebar;
15408 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15409 +       %put &errormsg;
15410 +       %put &em_codebar;
15411 +       %goto doendm;
15412 +   %end;
15413 +   %else
15414 +       %let EMEXCEPTIONSTRING =;
15416 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15417 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15418 +        %put &em_codebar;
15419 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15420 +        %put &errormsg;
15421 +        %put &em_codebar;
15422 +        %goto doendm;
15423 +   %end;
15425 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15426 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15427 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15428 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15429 +        %put &em_codebar;
15430 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15431 +        %put &errormsg;
15432 +        %put &em_codebar;
15433 +        %goto doendm;
15434 +   %end;
15436 +   /* Initialize property macro variables */
15437 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15438 +   %include temp;
15439 +   filename temp;
15441 +   %EM_SetProperties;
15443 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15444 +   %EM_GETNAME(key=EMTREE, type=DATA);
15445 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15446 +     /* if import eq Y and no importtable defined, throw an exception */
15447 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15448 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15449 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15450 +         %put &em_codebar;
15451 +         %put &errmsg;
15452 +         %put &em_codebar;
15453 +         %goto doendm;
15454 +      %end;
15455 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15456 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15457 +         %put &em_codebar;
15458 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15459 +         %put &errormsg;
15460 +         %put &em_codebar;
15461 +         %goto doendm;
15462 +      %end;
15463 +      %else %do;
15464 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15465 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15466 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15467 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15468 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15469 +         %let dsid = %sysfunc(close(&dsid));
15470 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15471 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15472 +            %put &em_codebar;
15473 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15474 +            %put &errormsg;
15475 +            %put &em_codebar;
15476 +            %goto doendm;
15477 +         %end;
15478 +      %end;
15479 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15480 +         proc delete data=&EM_USER_EMTREE;
15481 +         run;
15482 +      %end;
15483 +   %end;
15484 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15485 +      proc delete data=&EM_USER_EMTREE;
15486 +      run;
15487 +   %end;
15489 +   /* load tree macros */
15490 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15491 +   %include temp;
15492 +   filename temp;
15494 +   /* data sets */
15495 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15496 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15497 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15499 +   /* files */
15500 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15502 +   /* check actual num of target levels */
15503 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15504 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15505 +                              nLevel=_nTargetLevel );
15506 +      %if &_nTargetLevel  > 2 %then %do;
15507 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15508 +        %put &em_codebar;
15509 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15510 +        %put &errormsg;
15511 +        %put &em_codebar;
15512 +        %goto doendm;
15513 +      %end;
15514 +   %end;
15516 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15517 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15518 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15519 +        %let costflag=0;
15520 +        data _null_;
15521 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15522 +          if eof then call symput("costflag", _N_);
15523 +        run;
15524 +        %if &costflag gt 0 %then %do;
15525 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15526 +          %put &em_codebar;
15527 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15528 +          %put &errormsg;
15529 +          %put &em_codebar;
15530 +          %goto doendm;
15531 +       %end;
15532 +     %end;
15533 +   %end;
15535 +   /* determine if multiple targets will be processed */
15536 +   %let em_tree_multipleTargets=N;
15537 +   %let em_tree_numTarget = 1;
15538 +   %let em_tree_targetVars=;
15540 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15541 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15542 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15543 +         %let em_tree_multipleTargets=N;
15544 +      %end;
15545 +      %else %do;
15546 +         /* create macro array of targets  */
15547 +         data _null_;
15548 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15549 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15550 +           if eof then
15551 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15552 +        run;
15554 +        %if &em_tree_numTarget gt 1 %then %do;
15555 +           %let em_tree_multipleTargets=Y;
15556 +        %end;
15557 +      %end;
15558 +   %end;
15560 +   /* create view of only necessary variable for performance reasons */
15561 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15562 +   data &tempData / view=&tempData;
15563 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15564 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15565 +       %EM_TARGET
15566 +     %end;
15567 +     %else %do;
15568 +       %if &em_tree_numTarget ne 0 %then %do;
15569 +         %do i=1 %to &em_tree_numTarget;
15570 +            &&em_tree_targetVars&i
15571 +         %end;
15572 +       %end;
15573 +     %end;
15574 +     );
15575 +   run;
15577 +   /* run Tree procedure */
15578 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15580 +   /* Check return code and throw exception if error is detected */
15581 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15582 +   %if &syserr %then %do;
15583 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15584 +     %goto doendm;
15585 +   %end;
15587 +   /* add decision score code if multiple targets are processed */
15588 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15589 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15590 +   %end;
15592 +   /* create outfit dataset if multiple score statements have been executed */
15593 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15595 +   /* create English Rules */
15596 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15597 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15598 +       %em_tree_makeEnglishRules;
15600 +       /* English Rules */
15601 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15603 +     %end;
15604 +   filename x;
15606 +   %doendm:
15607 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15608 +%macro EM_SetProperties;
15610 +   /* train properties */
15611 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15653 +   /* properties for interactive sample */
15654 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15659 +   /* report properties */
15660 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15674 +   /* score properties */
15675 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15678 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Deleting EMWS3.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15680 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15681 +  %global &nLevel;
15682 +  proc dmdb batch data=&indata
15683 +    classout=_tmp_dmdbout;
15684 +    class &target;
15685 +  run;
15686 +  data _tmp_dmdbout;
15687 +    set _tmp_dmdbout;
15688 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15689 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15690 +  run;
15691 +  data _null_;
15692 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15693 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15694 +    %let dsid = %sysfunc(close(&dsid));
15695 +     call symput("&nLevel", put(&_obs, Best12.));
15696 +  run;
15698 +  proc datasets lib=work nolist;
15699 +     delete _tmp_dmdbout;
15700 +  run;
15701 +  quit;
15702 +%Mend EM_CheckBinaryTargetLevel;
15705 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15707 +  /* determine the number of obs in training data */
15708 +  proc sql;
15709 +    reset noprint;
15710 +    select count(*) into :em_nobs from &indata;
15711 +  quit;
15713 +  /* determine the number of input variables */
15714 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15715 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15717 +  /* retrieve targetEvent from decmeta */
15718 +  %let targetEvent=;
15719 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15720 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15721 +      data _null_;
15722 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15723 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15724 +      run;
15725 +    %end;
15726 +  %end;
15728 +  /* create targetTable if multipleTar eq Y */
15729 +  data temptarget;
15730 +    set &EM_DATA_VARIABLESET;
15731 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15732 +  run;
15734 + /* data sets */
15735 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15736 + %EM_GETNAME(key=EMTREE,        type=DATA);
15737 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15738 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15739 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15740 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15741 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15742 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15743 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15744 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15746 + /* files */
15747 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15748 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15750 + /* turn on pmml if requested */
15751 + %let nnpmml=0;
15752 + %if %symexist(EM_PMML) %then %do;
15753 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15754 +       %let nnpmml=1;
15756 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15757 +%end;
15759 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15761 + %if &nnpmml or &numClassTarget %then %do;
15763 +       /* create dmdb needed for pmml generation */
15764 +       %let tree_maxlevel = 512;
15765 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15766 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15767 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15768 +         %end;
15769 +       %end;
15770 +       %if &tree_maxlevel gt 0 %then %do;
15771 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15772 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15773 +       %end;
15775 +       %let targetOrderString =;
15776 +       %let targetString = ;
15777 +       data _null_;
15778 +          length orderString nameString $10000;
15779 +          retain orderString nameString;
15780 +          set &em_data_variableset end=eof;
15781 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15782 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15783 +          %end;
15784 +          %else %do;
15785 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15786 +          %end;          select(order);
15787 +            when('')        order ='DESC';
15788 +            when('FMTASC')  order='ASCFMT';
15789 +            when('FMTDESC') order='DESFMT';
15790 +            otherwise;
15791 +          end;
15792 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15793 +          nameString = trim(nameString)!!' '!!trim(NAME);
15795 +          if eof then do;
15796 +             call symput('targetOrderString', trim(orderString));
15797 +             call symput('targetString', trim(nameString));
15798 +          end;
15799 +       run;
15801 +       %let arborkluge= "work._treeDMDB";
15803 +       proc dmdb batch data=&indata
15804 +       %if &nnpmml %then %do;
15805 +           PMML
15806 +       %end;
15807 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15810 +   %if &nnpmml %then %do;
15811 +        %if "%EM_ID" ne "" %then %do;
15812 +          id %EM_ID;
15813 +        %end;
15814 +        %if &EM_NUM_CLASS gt 0 %then %do;
15815 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15816 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15817 +               &targetOrderString;
15818 +        %end;
15819 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15820 +          var %EM_INTERVAL;
15821 +        %end;
15822 +        target &targetString %EM_INTERVAL_TARGET;
15823 +        %if "%EM_FREQ" ne "" %then %do;
15824 +          freq %EM_FREQ;
15825 +        %end;
15826 +  %end;
15827 +  %else %do;
15828 +      class  &targetOrderString;
15829 +      target &targetString %EM_INTERVAL_TARGET;
15830 +  %end;
15831 +       run;
15832 +       quit;
15834 +       proc datasets lib=work nolist;
15835 +          delete classout varout;
15836 +       run;
15837 +       quit;
15839 +    %end;
15840 + %end;
15842 + /* run Arbor procedure */
15843 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15844 +  proc arbor data=&INDATA
15846 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15847 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15848 +  %end;
15850 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15851 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15852 +  %end;
15854 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15855 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15856 +  %end;
15858 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15859 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15860 +  %end;
15862 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15863 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15864 +  %end;
15866 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15867 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15868 +  %end;
15869 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15870 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15871 +  %end;
15872 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15873 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15874 +  %end;
15876 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15877 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15878 +      alpha = &EM_PROPERTY_SIGLEVEL
15879 +    %end;
15880 +  %end;
15882 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15883 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15884 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15885 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15886 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15888 +        padjust =
15889 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15890 +          &chaid
15891 +        %end;
15892 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15893 +          DEPTH
15894 +        %end;
15895 +      %end;
15896 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15897 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15898 +         pvars = &num_inputs
15899 +      %end;
15900 +    %end;
15901 +  %end;
15902 +  %else %do;
15903 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15904 +         padjust = NONE
15905 +      %end;
15906 +  %end;
15908 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15909 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15910 +    Maxrules = &num_nrules
15911 +  %end;
15913 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15914 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15915 +    Maxsurrs = &num_nsurrs
15916 +  %end;
15918 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15919 +     Missing=&EM_PROPERTY_MISSINGVALUE
15920 +  %end;
15922 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15923 +     USEVARONCE
15924 +  %end;
15926 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15927 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15928 +  %end;
15931 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15932 +    event = "&targetEvent"
15933 +  %end;
15935 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15936 +     DECSEARCH
15937 +  %end;
15939 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15940 +     PRIORSSEARCH
15941 +  %end;
15943 +  %if &arbor_1 ne %then %do;
15944 +    &arbor_1
15945 +  %end;
15947 +  %if &em_arbor ne %then %do;
15948 +     &em_arbor
15949 +  %end;
15950 +  ;
15951 + %end;
15952 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15953 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15954 +       interact;
15955 + %end;
15956 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15957 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15958 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15959 +    %put &em_codebar;
15960 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15961 +    %put &errormsg;
15962 +    %put &em_codebar;
15963 +    %goto doendm;
15964 +   %end;
15965 +   %else %do;
15966 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15967 +       interact;
15968 +   %end;
15969 + %end;
15971 + %else %do;
15972 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15973 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15974 +    %put &em_codebar;
15975 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15976 +    %put &errormsg;
15977 +    %put &em_codebar;
15978 +    %goto doendm;
15979 +   %end;
15980 +   %else %do;
15981 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15982 +        interact;
15983 +   %end;
15984 + %end;
15986 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15987 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15988 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15989 +    %end;
15991 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15992 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15993 +    %end;
15995 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15996 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15997 +    %end;
15999 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16000 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16001 +    %end;
16003 +    %if "%EM_FREQ" ne "" %then %do;
16004 +       freq %EM_FREQ;
16005 +    %end;
16007 +    %if "&multipleTar" eq "Y" %then %do;
16008 +       /* cycle through all target vars in variableset */
16009 +       %let tdsid = %sysfunc(open(temptarget));
16010 +       %if &tdsid %then %do;
16011 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16012 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16013 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16014 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16015 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16016 +             target &var / level = &lvl
16017 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16018 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16019 +             %end;
16020 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16021 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16022 +             %end;
16023 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16024 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16025 +             %end;
16026 +          %end;
16027 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16028 +       %end;
16029 +       useTarget variable = %EM_TARGET;
16030 +    %end;
16031 +    %else %do;
16032 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16033 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16034 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16035 +      %end;
16036 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16037 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16038 +      %end;
16039 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16040 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16041 +      %end;
16042 +    %end;
16044 +    %if "&multipleTar" eq "N" %then %do;
16045 +      &EM_DEC_STATEMENT;
16046 +    %end;
16048 +    Performance &EM_PROPERTY_PERFORMANCE
16049 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16050 +      nodesize=&EM_PROPERTY_NODESAMPLE
16051 +    %end;
16052 +    ;
16054 +    %if "&intFlag" eq "Y" %then %do;
16055 +       INTERACT Largest;
16056 +       Train maxnewdepth=0;
16057 +    %end;
16059 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16060 +         Assess
16061 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16062 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16063 +              %put &em_codebar;
16064 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16065 +              %put &errormsg;
16066 +              %put &em_codebar;
16067 +            %end;
16068 +            %else %do;
16069 +               Validata=&EM_IMPORT_VALIDATE
16070 +            %end;
16071 +         %end;
16072 +         %else %do;
16073 +           NoValidata
16074 +         %end;
16075 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16076 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16077 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16078 +               %if &dsid %then %do;
16079 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16080 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16081 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16082 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16083 +                   %else %do;
16084 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16085 +                      %else %let measure= MISC;
16086 +                   %end;
16087 +                 %end;
16088 +               %end;
16089 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16090 +            %end;
16091 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16092 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16093 +                 %let measure=ASE;
16094 +              %end;
16095 +              %else %do;
16096 +                 %let measure=MISC;
16097 +              %end;
16098 +            %end;
16099 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16100 +              %let measure=ASE;
16101 +            %end;
16102 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16103 +               %let measure = LIFT;
16104 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16105 +               %if &dsid %then %do;
16106 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16107 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16108 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16109 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16110 +                 %end;
16111 +               %end;
16112 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16113 +            %end;
16114 +            measure=&measure
16115 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16116 +               event = "&targetEvent"
16117 +            %end;
16118 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16119 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16120 +            %end;
16121 +         %end;
16122 +         %if "&multipleTar" eq "N" %then %do;
16123 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16124 +               CV
16125 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16126 +                 CVNITer = &EM_PROPERTY_CVNITER
16127 +               %end;
16128 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16129 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16130 +               %end;
16131 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16132 +                 CVSeed = &EM_PROPERTY_CVSEED
16133 +               %end;
16134 +            %end;
16135 +         %end;
16136 +       %end;
16137 +      ;
16139 +      %if "&intFlag" ne "Y" %then %do;
16140 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16141 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16142 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16143 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16145 +          SUBTREE &subtree
16146 +          %if "&subtree" eq "NLEAVES" %then %do;
16147 +            =&EM_PROPERTY_NSUBTREE
16148 +          %end;
16149 +          ;
16150 +        %end;
16152 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16153 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16154 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16155 +          %end;
16156 +       %end;
16157 +      %end;
16158 + %end;
16161 + MakeMacro nleaves = nleaves;
16162 + save
16163 + %if "&EM_USER_EMTREE" ne "" %then %do;
16164 +   MODEL=&EM_USER_EMTREE
16165 + %end;
16166 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16167 +   SEQUENCE=&EM_USER_OUTSEQ
16168 + %end;
16169 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16170 +   IMPORTANCE=&EM_USER_OUTIMPORT
16171 + %end;
16172 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16173 +   NODESTAT=&EM_USER_OUTNODES
16174 + %end;
16175 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16176 +   SUMMARY=&EM_USER_OUTSUMMARY
16177 + %end;
16178 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16179 +   STATSBYNODE=&EM_USER_OUTSTATS
16180 + %end;
16181 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16182 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16183 + %end;
16184 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16185 +   Pathlistnonmissing=&EM_USER_OUTPATH
16186 + %end;
16187 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16188 +   RULES = &EM_USER_OUTRULES
16189 + %end;
16190 + ;
16192 + %if "&intFlag" ne "Y" %then %do;
16194 +   %let lookupString = ;
16195 +   %if ^%symexist(EM_OPTION) %then
16196 +      %let EM_OPTION=;
16198 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16199 +      %let lookupString = LOOKUP=SELECT;
16200 +   %end;
16202 +   %let codetext=;
16203 +   %let norescodetxt=;
16205 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16206 +     %let codetext=&codetext DUMMY;
16207 +     %let norescodetxt=&norescodetxt DUMMY;
16208 +   %end;
16209 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16210 +     %let codetext=&codetext NOLEAFID;
16211 +     %let norescodetxt=&norescodetxt NOLEAFID;
16212 +   %end;
16213 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16214 +     %let norescodetxt=&norescodetxt NOPRED;
16215 +   %end;
16217 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16218 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16220 +   %if &nnpmml %then %do;
16221 +     code pmml;
16222 +   %end;
16224 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16225 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16226 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16227 +   %end;
16228 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16229 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16230 +   %end;
16231 + %end;
16233 + run;
16234 + quit;
16236 + /*%em_checkerror(); */
16237 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16238 +   /* Delete DMDB catalog */
16239 +   proc datasets lib=work nolist;
16240 +       delete _treeDMDB / mt=cat;
16241 +  run;
16242 +  %end;
16244 + %if &nnpmml %then %do;
16245 +    ods pmml close;
16246 + %end;
16248 +  %doendm:
16250 +%mend em_tree_runTreeProcedure;
16252 +%macro em_tree_createFitStats( multipleTar= );
16255 +  /* create targetTable is multipleTar eq Y */
16256 +  data temptarget;
16257 +    set &EM_DATA_VARIABLESET;
16258 +    where ROLE="TARGET";
16259 +  run;
16261 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16262 +   data &EM_USER_EMOUTFIT;
16263 +     length target $32;
16264 +     merge work.fit_train
16265 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16266 +       work.fit_valid
16267 +     %end;
16268 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16269 +       work.fit_test
16270 +     %end;
16271 +     ;
16272 +     %if "&multipleTar" eq "N" %then %do;
16273 +       target="%EM_TARGET";
16274 +     %end;
16275 +     %else %do;
16276 +       target = _TARGET_;
16277 +     %end;
16278 +     drop _NW_ _SUMW_
16279 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16280 +        _VSUMW_
16281 +     %end;
16282 +     ;
16283 +   run;
16285 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16286 +     proc datasets library=work nolist;
16287 +       delete fit_valid;
16288 +     run;
16289 +   %end;
16290 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16291 +     proc datasets library=work nolist;
16292 +       delete fit_test;
16293 +     run;
16294 +   %end;
16296 +%mend em_tree_createFitStats;
16299 +%macro em_tree_makeEnglishRules;
16301 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16302 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16304 +  /* verify that necessary tables exist and if not, skip processing */
16305 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16306 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16307 +    %goto doendm;
16308 +  %end;
16309 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16310 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16311 +    %goto doendm;
16312 +  %end;
16314 +  /* determine length of variable in outpath dataset */
16315 +  %let vlength= ;
16316 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16317 +  %if &dsid ne %then %do;
16318 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16319 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16320 +  %end;
16321 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16323 +  data tempoutpath;
16324 +    length varname $&vlength;
16325 +    retain varname;
16326 +    set &EM_USER_OUTPATH;
16328 +    if ^missing(variable) then varname=variable;
16329 +    else if ^missing(var_name) then varname=var_name;
16330 +    output;
16331 +  run;
16333 +  /* create an array of generated predicted variable names */
16334 +  %let tree_pred_vars = ;
16335 +  %let tree_pred_label = ;
16336 +  %let numpred= 0;
16337 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16339 +    data _null_;
16340 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16341 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16342 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16343 +     if eof then
16344 +       call symput('numpred', strip(put(_N_, BEST.)));
16345 +    run;
16346 +  %end;
16348 +  /* determine if NPRIORS exists in outnodes  */
16349 +  %local nprior_flag;
16350 +  data _null_;
16351 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16352 +    if eof then do;
16353 +      call symput('nprior_flag', strip(put(npriors, best.)));
16354 +    end;
16355 +  run;
16357 +  proc sort data=tempoutpath; by node; run;
16358 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16360 +  data tempoutpath;
16361 +    merge tempoutpath(in=_a) outnodes(keep= node
16362 +    %if "&nprior_flag" ne "." %then %do;
16363 +      NPRIORS
16364 +    %end;
16365 +    %else %do;
16366 +      N
16367 +    %end;
16368 +    %if &numpred gt 0 %then %do;
16369 +      %do i=1 %to &numpred;
16370 +        &&tree_pred_vars&i
16371 +      %end;
16372 +    %end;
16373 +    );
16374 +    by node;
16375 +    if _a;
16376 +  run;
16378 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16380 +  data _null_;
16381 +    file x;
16382 +    set tempoutpath;
16383 +    by node descending varname;
16384 +    retain origvar oldnode string;
16385 +    length origvar $32 oldnode 8 string $200;
16387 +    if _N_ = 1 then do;
16388 +      origvar = varname;
16389 +      oldnode = node;
16390 +    end;
16392 +    if first.node then do;
16393 +       put "&EM_CODEBAR";
16394 +       put " Node = " node;
16395 +       put "&EM_CODEBAR";
16396 +    end;
16398 +      if first.varname then do;
16399 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16400 +            if MISSING(CHARACTER_VALUE) then do;
16401 +             if NUMERIC_VALUE ne .  then do;
16402 +              if ^first.node then do;
16403 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16404 +              end;
16405 +              else do;
16406 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16407 +              end;
16408 +             end;
16409 +            end;
16410 +            else do;
16411 +              if ^first.node then do;
16412 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16413 +              end;
16414 +              else do;
16415 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16416 +              end;
16417 +             end;
16418 +         end;
16419 +         else if RELATION in ("=") then do;
16420 +            if ^first.node then do;
16421 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16422 +            end;
16423 +            else do;
16424 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16425 +            end;
16426 +         end;
16427 +         else if RELATION in ("ISMISSING") then do;
16428 +            if ^first.node then do;
16429 +              string = " AND "|| strip(varname) || " equals Missing";
16430 +            end;
16431 +            else do;
16432 +              string = "if "|| strip(varname) ||" equals Missing";
16433 +            end;
16434 +         end;
16435 +         else if RELATION in ("ISNOTMISSING") then do;
16436 +            if ^first.node then do;
16437 +              string = " AND "|| strip(varname) || " equals All Values";
16438 +            end;
16439 +            else do;
16440 +              string = "if "|| strip(varname) ||" equals All Values";
16441 +            end;
16442 +         end;
16443 +         if ^missing(varname) then origvar = varname;
16444 +         oldnode=node;
16446 +      end;
16447 +      else do;
16448 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16449 +          if MISSING(CHARACTER_VALUE) then do;
16450 +           if  NUMERIC_VALUE ne .  then do;
16451 +            if ^MISSING(string) then
16452 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16453 +            else
16454 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16455 +           end;
16456 +          end;
16457 +          else do;
16458 +            if ^MISSING(string) then
16459 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16460 +            else
16461 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16462 +          end;
16464 +         end;
16465 +         else if RELATION in ("=") then do;
16466 +           string = strip(string)||", "||strip(character_value);
16467 +         end;
16468 +         else if RELATION in ("ISMISSING") then do;
16470 +         end;
16471 +         if ^missing(varname) then origvar = varname;
16472 +         oldnode=node;
16473 +      end;
16474 +      if last.varname then do;
16475 +         if RELATION in ("ISMISSING") then do;
16476 +           if ^first.varname then do;
16477 +             string = strip(string) || " or MISSING";
16478 +           end;
16479 +         end;
16480 +         put string;
16481 +         if ^missing(varname) then origvar = varname;
16482 +         oldnode=node;
16483 +      end;
16485 +      if last.node then do;
16486 +         put "then ";
16487 +         put " Tree Node Identifier   = " node;
16489 +         %if "&nprior_flag" ne "." %then %do;
16490 +           put " Number of Observations = " NPRIORS;
16491 +         %end;
16492 +         %else %do;
16493 +           put " Number of Observations = " N;
16494 +         %end;
16496 +         %if &numpred gt 0 %then %do;
16497 +           %do i=1 %to &numpred;
16498 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16499 +           %end;
16500 +         %end;
16502 +         put " ";
16503 +         if ^missing(varname) then origvar = varname;
16504 +         oldnode=node;
16505 +      end;
16507 +  run;
16509 +  proc datasets lib=work nolist;
16510 +    delete tempoutpath outnodes;
16511 +  run;
16513 +  %doendm:
16514 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: DATA STEP view saved on file EMWS3.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Records processed = 1250   Memory used = 511K.
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.04 seconds
      
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 1250 observations read from the data set EMWS3.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 3 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
      


NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

NOTE: 1601816 kilobytes of physical memory.
NOTE: Will use 1250 out of 1250 training cases.
NOTE: Using memory pool with 72398848 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 268120 bytes of work memory.
NOTE: The subtree sequence contains 16 subtrees. The largest has 31 nodes and 16 leaves.
NOTE: Using subtree with 27 nodes and 14 leaves.
NOTE: Using subtree with 27 nodes and 14 leaves.
NOTE: Created macro variable NLEAVES equal to 14.
NOTE: The data set EMWS3.TREE2_OUTIMPORT has 7 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_EMTREE has 1030 observations and 4 variables.
NOTE: The data set EMWS3.TREE2_OUTNODES has 27 observations and 27 variables.
NOTE: The data set EMWS3.TREE2_OUTPATH has 106 observations and 7 variables.
NOTE: The data set EMWS3.TREE2_OUTRULES has 268 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_OUTSEQ has 16 observations and 20 variables.
NOTE: The data set EMWS3.TREE2_OUTSTATS has 243 observations and 5 variables.
NOTE: The data set EMWS3.TREE2_OUTSUMMARY has 32 observations and 7 variables.
NOTE: The data set EMWS3.TREE2_OUTTOPOLOGY has 27 observations and 5 variables.
NOTE: External file C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\TREEFLOW.sas opened.
NOTE: External file C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
      
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.


NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.34 seconds
      cpu time            0.32 seconds
      
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 1250 observations read from the data set EMWS3.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 3 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.35 seconds
      cpu time            0.34 seconds
      


NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS3.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 106 observations read from the data set EMWS3.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 106 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
      


NOTE: There were 3 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      


NOTE: There were 106 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 106 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 27 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 27 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 106 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 27 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 106 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 106 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 106 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      224:176   234:190   380:191   387:195   
NOTE: The file X is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=11May2019:23:23:42,
      Create Time=11May2019:23:21:23

NOTE: 183 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 106 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
      

NOTE: Fileref X has been deassigned.
16516  
16517  *------------------------------------------------------------*;
16518  * End TRAIN: Tree2;
16519  *------------------------------------------------------------*;

16520  *------------------------------------------------------------*;
16521  * Close any missing semi colons;
16522  *------------------------------------------------------------*;
16523  ;
16524  ;
16525  ;
16526  ;
16527  quit;
16528  *------------------------------------------------------------*;
16529  * Close any unbalanced quotes;
16530  *------------------------------------------------------------*;
16531  /*; *"; *'; */
16532  ;
16533  run;
16534  quit;
16535  /* Reset EM Options */
16536  options formchar="|----|+|---+=|-/\<>*";
16537  options nocenter ls=256 ps=10000;
16538  goptions reset=all device=GIF NODISPLAY;

16539  proc sort data=WORK.EM_USER_REPORT;
16540  by ID VIEW;
16541  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

