*------------------------------------------------------------*
User:                QR
Date:                May 11, 2019
Time:                23:23:52
Site:                12601940
Platform:            W32_7PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                May 11, 2019
Time:                23:23:37
*------------------------------------------------------------*
14715  proc freq data=EMWS3.Tree2_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.Tree2META;
14717  run;
 
NOTE: There were 23 observations read from the data set EMWS3.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 7 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
14718  proc print data=WORK.Tree2META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 7 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN
EMWS3.Part_TRAIN EMWS3.Part_TRAIN EMWS3 Part_TRAIN
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
14772  data WORK.Tree2_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
14773  length ORDER $20;
14774  label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))" EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS = "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
14775     "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER = "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14776  set EMWS3.TREE2_REP_UPDOWNIND_DM( where=(_TYPE_="TARGET"));
14777  NumLevels=3;
14778  select(upcase(ORDER));
14779  when('DESC') ORDER = 'Descending';
14780  when('ASC') ORDER = 'Ascending';
14781  when('FMTDESC') ORDER = 'Formatted Descending';
14782  when('FMTASC') ORDER = 'Formatted Ascending';
14783  otherwise ORDER = 'Descending';
14784  end;
14785  output;
14786  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.TREE2_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
14787  title9 ' ';
14788  proc print data=WORK.Tree2_EVENT noobs label;
14789  var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
14790  title9 ' ';
14791  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
14792  run;
 
NOTE: There were 1 observations read from the data set WORK.TREE2_EVENT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14793  title10;
 
"No decisions defined for target "REP_updownInd"."
14794  proc print data = EMWS3.Tree2_REP_updownInd_DM noobs label;
14795  var _type_ variable label;
14796  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14797  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14798  title9 ' ';
14799  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14800  run;
 
NOTE: There were 9 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
14801  title10;
 
14802  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15328  *------------------------------------------------------------*;
15329  * Tree2: Generation of macros and macro variables;
15330  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15331  *------------------------------------------------------------*;
 
15332  %let EMEXCEPTIONSTRING=;
15333  *------------------------------------------------------------*;
15334  * TRAIN: Tree2;
15335  *------------------------------------------------------------*;
15336  %let EM_ACTION = TRAIN;
15337  %let syscc = 0;
15338  %macro main;
15339
15340    %if %upcase(&EM_ACTION) = CREATE %then %do;
15341      filename temp catalog 'sashelp.emmodl.tree_create.source';
15342      %include temp;
15343      filename temp;
15344
15345      %em_tree_create;
15346    %end;
15347
15348     %else
15349     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15350
15351         filename temp catalog 'sashelp.emmodl.tree_train.source';
15352         %include temp;
15353         filename temp;
15354         %em_tree_train;
15355     %end;
15356
15357    %else
15358    %if %upcase(&EM_ACTION) = SCORE %then %do;
15359      filename temp catalog 'sashelp.emmodl.tree_score.source';
15360      %include temp;
15361      filename temp;
15362
15363      %em_tree_score;
15364
15365    %end;
15366
15367    %else
15368    %if %upcase(&EM_ACTION) = REPORT %then %do;
15369
15370         filename temp catalog 'sashelp.emmodl.tree_report.source';
15371         %include temp;
15372         filename temp;
15373
15374         %em_tree_report;
15375     %end;
15376
15377    %else
15378    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15379
15380         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15381         %include temp;
15382         filename temp;
15383         %EM_TREE_OPENTREEVIEWER;
15384
15385     %end;
15386
15387    %else
15388    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15389
15390         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15391         %include temp;
15392         filename temp;
15393         %EM_TREE_CLOSETREEVIEWER;
15394
15395     %end;
15396
15397
15398     %doendm:
15399  %mend main;
15400
15401  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15403 +%macro em_tree_train;
15405 +   %if &EM_IMPORT_DATA eq %then %do;
15406 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15407 +       %put &em_codebar;
15408 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15409 +       %put &errormsg;
15410 +       %put &em_codebar;
15411 +       %goto doendm;
15412 +   %end;
15413 +   %else
15414 +       %let EMEXCEPTIONSTRING =;
15416 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15417 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15418 +        %put &em_codebar;
15419 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15420 +        %put &errormsg;
15421 +        %put &em_codebar;
15422 +        %goto doendm;
15423 +   %end;
15425 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15426 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15427 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15428 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15429 +        %put &em_codebar;
15430 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15431 +        %put &errormsg;
15432 +        %put &em_codebar;
15433 +        %goto doendm;
15434 +   %end;
15436 +   /* Initialize property macro variables */
15437 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15438 +   %include temp;
15439 +   filename temp;
15441 +   %EM_SetProperties;
15443 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15444 +   %EM_GETNAME(key=EMTREE, type=DATA);
15445 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15446 +     /* if import eq Y and no importtable defined, throw an exception */
15447 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15448 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15449 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15450 +         %put &em_codebar;
15451 +         %put &errmsg;
15452 +         %put &em_codebar;
15453 +         %goto doendm;
15454 +      %end;
15455 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15456 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15457 +         %put &em_codebar;
15458 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15459 +         %put &errormsg;
15460 +         %put &em_codebar;
15461 +         %goto doendm;
15462 +      %end;
15463 +      %else %do;
15464 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15465 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15466 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15467 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15468 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15469 +         %let dsid = %sysfunc(close(&dsid));
15470 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15471 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15472 +            %put &em_codebar;
15473 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15474 +            %put &errormsg;
15475 +            %put &em_codebar;
15476 +            %goto doendm;
15477 +         %end;
15478 +      %end;
15479 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15480 +         proc delete data=&EM_USER_EMTREE;
15481 +         run;
15482 +      %end;
15483 +   %end;
15484 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15485 +      proc delete data=&EM_USER_EMTREE;
15486 +      run;
15487 +   %end;
15489 +   /* load tree macros */
15490 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15491 +   %include temp;
15492 +   filename temp;
15494 +   /* data sets */
15495 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15496 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15497 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15499 +   /* files */
15500 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15502 +   /* check actual num of target levels */
15503 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15504 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15505 +                              nLevel=_nTargetLevel );
15506 +      %if &_nTargetLevel  > 2 %then %do;
15507 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15508 +        %put &em_codebar;
15509 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15510 +        %put &errormsg;
15511 +        %put &em_codebar;
15512 +        %goto doendm;
15513 +      %end;
15514 +   %end;
15516 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15517 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15518 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15519 +        %let costflag=0;
15520 +        data _null_;
15521 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15522 +          if eof then call symput("costflag", _N_);
15523 +        run;
15524 +        %if &costflag gt 0 %then %do;
15525 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15526 +          %put &em_codebar;
15527 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15528 +          %put &errormsg;
15529 +          %put &em_codebar;
15530 +          %goto doendm;
15531 +       %end;
15532 +     %end;
15533 +   %end;
15535 +   /* determine if multiple targets will be processed */
15536 +   %let em_tree_multipleTargets=N;
15537 +   %let em_tree_numTarget = 1;
15538 +   %let em_tree_targetVars=;
15540 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15541 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15542 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15543 +         %let em_tree_multipleTargets=N;
15544 +      %end;
15545 +      %else %do;
15546 +         /* create macro array of targets  */
15547 +         data _null_;
15548 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15549 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15550 +           if eof then
15551 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15552 +        run;
15554 +        %if &em_tree_numTarget gt 1 %then %do;
15555 +           %let em_tree_multipleTargets=Y;
15556 +        %end;
15557 +      %end;
15558 +   %end;
15560 +   /* create view of only necessary variable for performance reasons */
15561 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15562 +   data &tempData / view=&tempData;
15563 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15564 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15565 +       %EM_TARGET
15566 +     %end;
15567 +     %else %do;
15568 +       %if &em_tree_numTarget ne 0 %then %do;
15569 +         %do i=1 %to &em_tree_numTarget;
15570 +            &&em_tree_targetVars&i
15571 +         %end;
15572 +       %end;
15573 +     %end;
15574 +     );
15575 +   run;
15577 +   /* run Tree procedure */
15578 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15580 +   /* Check return code and throw exception if error is detected */
15581 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15582 +   %if &syserr %then %do;
15583 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15584 +     %goto doendm;
15585 +   %end;
15587 +   /* add decision score code if multiple targets are processed */
15588 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15589 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15590 +   %end;
15592 +   /* create outfit dataset if multiple score statements have been executed */
15593 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15595 +   /* create English Rules */
15596 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15597 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15598 +       %em_tree_makeEnglishRules;
15600 +       /* English Rules */
15601 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15603 +     %end;
15604 +   filename x;
15606 +   %doendm:
15607 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15608 +%macro EM_SetProperties;
15610 +   /* train properties */
15611 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15616 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15617 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15621 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15622 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15623 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15636 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15637 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15638 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15640 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15641 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15642 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15643 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15644 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15645 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15646 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15647 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15648 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15649 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15650 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15651 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15653 +   /* properties for interactive sample */
15654 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15655 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15656 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15657 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15659 +   /* report properties */
15660 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15661 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15662 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15663 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15664 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15665 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15666 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15667 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15668 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15669 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15670 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15671 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15672 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15674 +   /* score properties */
15675 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15676 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15678 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS3.TREE2_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15680 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15681 +  %global &nLevel;
15682 +  proc dmdb batch data=&indata
15683 +    classout=_tmp_dmdbout;
15684 +    class &target;
15685 +  run;
15686 +  data _tmp_dmdbout;
15687 +    set _tmp_dmdbout;
15688 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15689 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15690 +  run;
15691 +  data _null_;
15692 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15693 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15694 +    %let dsid = %sysfunc(close(&dsid));
15695 +     call symput("&nLevel", put(&_obs, Best12.));
15696 +  run;
15698 +  proc datasets lib=work nolist;
15699 +     delete _tmp_dmdbout;
15700 +  run;
15701 +  quit;
15702 +%Mend EM_CheckBinaryTargetLevel;
15705 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15707 +  /* determine the number of obs in training data */
15708 +  proc sql;
15709 +    reset noprint;
15710 +    select count(*) into :em_nobs from &indata;
15711 +  quit;
15713 +  /* determine the number of input variables */
15714 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15715 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15717 +  /* retrieve targetEvent from decmeta */
15718 +  %let targetEvent=;
15719 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15720 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15721 +      data _null_;
15722 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15723 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15724 +      run;
15725 +    %end;
15726 +  %end;
15728 +  /* create targetTable if multipleTar eq Y */
15729 +  data temptarget;
15730 +    set &EM_DATA_VARIABLESET;
15731 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15732 +  run;
15734 + /* data sets */
15735 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15736 + %EM_GETNAME(key=EMTREE,        type=DATA);
15737 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15738 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15739 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15740 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15741 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15742 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15743 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15744 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15746 + /* files */
15747 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15748 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15750 + /* turn on pmml if requested */
15751 + %let nnpmml=0;
15752 + %if %symexist(EM_PMML) %then %do;
15753 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15754 +       %let nnpmml=1;
15756 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15757 +%end;
15759 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15761 + %if &nnpmml or &numClassTarget %then %do;
15763 +       /* create dmdb needed for pmml generation */
15764 +       %let tree_maxlevel = 512;
15765 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15766 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15767 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15768 +         %end;
15769 +       %end;
15770 +       %if &tree_maxlevel gt 0 %then %do;
15771 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15772 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15773 +       %end;
15775 +       %let targetOrderString =;
15776 +       %let targetString = ;
15777 +       data _null_;
15778 +          length orderString nameString $10000;
15779 +          retain orderString nameString;
15780 +          set &em_data_variableset end=eof;
15781 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15782 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15783 +          %end;
15784 +          %else %do;
15785 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15786 +          %end;          select(order);
15787 +            when('')        order ='DESC';
15788 +            when('FMTASC')  order='ASCFMT';
15789 +            when('FMTDESC') order='DESFMT';
15790 +            otherwise;
15791 +          end;
15792 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15793 +          nameString = trim(nameString)!!' '!!trim(NAME);
15795 +          if eof then do;
15796 +             call symput('targetOrderString', trim(orderString));
15797 +             call symput('targetString', trim(nameString));
15798 +          end;
15799 +       run;
15801 +       %let arborkluge= "work._treeDMDB";
15803 +       proc dmdb batch data=&indata
15804 +       %if &nnpmml %then %do;
15805 +           PMML
15806 +       %end;
15807 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15810 +   %if &nnpmml %then %do;
15811 +        %if "%EM_ID" ne "" %then %do;
15812 +          id %EM_ID;
15813 +        %end;
15814 +        %if &EM_NUM_CLASS gt 0 %then %do;
15815 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15816 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15817 +               &targetOrderString;
15818 +        %end;
15819 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15820 +          var %EM_INTERVAL;
15821 +        %end;
15822 +        target &targetString %EM_INTERVAL_TARGET;
15823 +        %if "%EM_FREQ" ne "" %then %do;
15824 +          freq %EM_FREQ;
15825 +        %end;
15826 +  %end;
15827 +  %else %do;
15828 +      class  &targetOrderString;
15829 +      target &targetString %EM_INTERVAL_TARGET;
15830 +  %end;
15831 +       run;
15832 +       quit;
15834 +       proc datasets lib=work nolist;
15835 +          delete classout varout;
15836 +       run;
15837 +       quit;
15839 +    %end;
15840 + %end;
15842 + /* run Arbor procedure */
15843 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15844 +  proc arbor data=&INDATA
15846 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15847 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15848 +  %end;
15850 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15851 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15852 +  %end;
15854 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15855 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15856 +  %end;
15858 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15859 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15860 +  %end;
15862 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15863 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15864 +  %end;
15866 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15867 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15868 +  %end;
15869 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15870 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15871 +  %end;
15872 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15873 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15874 +  %end;
15876 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15877 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15878 +      alpha = &EM_PROPERTY_SIGLEVEL
15879 +    %end;
15880 +  %end;
15882 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15883 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15884 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15885 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15886 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15888 +        padjust =
15889 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15890 +          &chaid
15891 +        %end;
15892 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15893 +          DEPTH
15894 +        %end;
15895 +      %end;
15896 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15897 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15898 +         pvars = &num_inputs
15899 +      %end;
15900 +    %end;
15901 +  %end;
15902 +  %else %do;
15903 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15904 +         padjust = NONE
15905 +      %end;
15906 +  %end;
15908 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15909 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15910 +    Maxrules = &num_nrules
15911 +  %end;
15913 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15914 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15915 +    Maxsurrs = &num_nsurrs
15916 +  %end;
15918 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15919 +     Missing=&EM_PROPERTY_MISSINGVALUE
15920 +  %end;
15922 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15923 +     USEVARONCE
15924 +  %end;
15926 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15927 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15928 +  %end;
15931 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15932 +    event = "&targetEvent"
15933 +  %end;
15935 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15936 +     DECSEARCH
15937 +  %end;
15939 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15940 +     PRIORSSEARCH
15941 +  %end;
15943 +  %if &arbor_1 ne %then %do;
15944 +    &arbor_1
15945 +  %end;
15947 +  %if &em_arbor ne %then %do;
15948 +     &em_arbor
15949 +  %end;
15950 +  ;
15951 + %end;
15952 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15953 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15954 +       interact;
15955 + %end;
15956 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15957 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15958 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15959 +    %put &em_codebar;
15960 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15961 +    %put &errormsg;
15962 +    %put &em_codebar;
15963 +    %goto doendm;
15964 +   %end;
15965 +   %else %do;
15966 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15967 +       interact;
15968 +   %end;
15969 + %end;
15971 + %else %do;
15972 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15973 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15974 +    %put &em_codebar;
15975 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15976 +    %put &errormsg;
15977 +    %put &em_codebar;
15978 +    %goto doendm;
15979 +   %end;
15980 +   %else %do;
15981 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15982 +        interact;
15983 +   %end;
15984 + %end;
15986 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15987 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15988 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15989 +    %end;
15991 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15992 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15993 +    %end;
15995 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15996 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15997 +    %end;
15999 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
16000 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
16001 +    %end;
16003 +    %if "%EM_FREQ" ne "" %then %do;
16004 +       freq %EM_FREQ;
16005 +    %end;
16007 +    %if "&multipleTar" eq "Y" %then %do;
16008 +       /* cycle through all target vars in variableset */
16009 +       %let tdsid = %sysfunc(open(temptarget));
16010 +       %if &tdsid %then %do;
16011 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
16012 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
16013 +          %do %while(^ %sysfunc(fetch(&tdsid)));
16014 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
16015 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
16016 +             target &var / level = &lvl
16017 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
16018 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
16019 +             %end;
16020 +             %else %if "&lvl" eq "INTERVAL" %then %do;
16021 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
16022 +             %end;
16023 +             %else %if "&lvl" eq "ORDINAL" %then %do;
16024 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
16025 +             %end;
16026 +          %end;
16027 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
16028 +       %end;
16029 +       useTarget variable = %EM_TARGET;
16030 +    %end;
16031 +    %else %do;
16032 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
16033 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
16034 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
16035 +      %end;
16036 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16037 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16038 +      %end;
16039 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16040 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16041 +      %end;
16042 +    %end;
16044 +    %if "&multipleTar" eq "N" %then %do;
16045 +      &EM_DEC_STATEMENT;
16046 +    %end;
16048 +    Performance &EM_PROPERTY_PERFORMANCE
16049 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16050 +      nodesize=&EM_PROPERTY_NODESAMPLE
16051 +    %end;
16052 +    ;
16054 +    %if "&intFlag" eq "Y" %then %do;
16055 +       INTERACT Largest;
16056 +       Train maxnewdepth=0;
16057 +    %end;
16059 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16060 +         Assess
16061 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16062 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16063 +              %put &em_codebar;
16064 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16065 +              %put &errormsg;
16066 +              %put &em_codebar;
16067 +            %end;
16068 +            %else %do;
16069 +               Validata=&EM_IMPORT_VALIDATE
16070 +            %end;
16071 +         %end;
16072 +         %else %do;
16073 +           NoValidata
16074 +         %end;
16075 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16076 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16077 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16078 +               %if &dsid %then %do;
16079 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16080 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16081 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16082 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16083 +                   %else %do;
16084 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16085 +                      %else %let measure= MISC;
16086 +                   %end;
16087 +                 %end;
16088 +               %end;
16089 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16090 +            %end;
16091 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16092 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16093 +                 %let measure=ASE;
16094 +              %end;
16095 +              %else %do;
16096 +                 %let measure=MISC;
16097 +              %end;
16098 +            %end;
16099 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16100 +              %let measure=ASE;
16101 +            %end;
16102 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16103 +               %let measure = LIFT;
16104 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16105 +               %if &dsid %then %do;
16106 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16107 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16108 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16109 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16110 +                 %end;
16111 +               %end;
16112 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16113 +            %end;
16114 +            measure=&measure
16115 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16116 +               event = "&targetEvent"
16117 +            %end;
16118 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16119 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16120 +            %end;
16121 +         %end;
16122 +         %if "&multipleTar" eq "N" %then %do;
16123 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16124 +               CV
16125 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16126 +                 CVNITer = &EM_PROPERTY_CVNITER
16127 +               %end;
16128 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16129 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16130 +               %end;
16131 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16132 +                 CVSeed = &EM_PROPERTY_CVSEED
16133 +               %end;
16134 +            %end;
16135 +         %end;
16136 +       %end;
16137 +      ;
16139 +      %if "&intFlag" ne "Y" %then %do;
16140 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16141 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16142 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16143 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16145 +          SUBTREE &subtree
16146 +          %if "&subtree" eq "NLEAVES" %then %do;
16147 +            =&EM_PROPERTY_NSUBTREE
16148 +          %end;
16149 +          ;
16150 +        %end;
16152 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16153 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16154 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16155 +          %end;
16156 +       %end;
16157 +      %end;
16158 + %end;
16161 + MakeMacro nleaves = nleaves;
16162 + save
16163 + %if "&EM_USER_EMTREE" ne "" %then %do;
16164 +   MODEL=&EM_USER_EMTREE
16165 + %end;
16166 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16167 +   SEQUENCE=&EM_USER_OUTSEQ
16168 + %end;
16169 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16170 +   IMPORTANCE=&EM_USER_OUTIMPORT
16171 + %end;
16172 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16173 +   NODESTAT=&EM_USER_OUTNODES
16174 + %end;
16175 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16176 +   SUMMARY=&EM_USER_OUTSUMMARY
16177 + %end;
16178 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16179 +   STATSBYNODE=&EM_USER_OUTSTATS
16180 + %end;
16181 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16182 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16183 + %end;
16184 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16185 +   Pathlistnonmissing=&EM_USER_OUTPATH
16186 + %end;
16187 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16188 +   RULES = &EM_USER_OUTRULES
16189 + %end;
16190 + ;
16192 + %if "&intFlag" ne "Y" %then %do;
16194 +   %let lookupString = ;
16195 +   %if ^%symexist(EM_OPTION) %then
16196 +      %let EM_OPTION=;
16198 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16199 +      %let lookupString = LOOKUP=SELECT;
16200 +   %end;
16202 +   %let codetext=;
16203 +   %let norescodetxt=;
16205 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16206 +     %let codetext=&codetext DUMMY;
16207 +     %let norescodetxt=&norescodetxt DUMMY;
16208 +   %end;
16209 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16210 +     %let codetext=&codetext NOLEAFID;
16211 +     %let norescodetxt=&norescodetxt NOLEAFID;
16212 +   %end;
16213 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16214 +     %let norescodetxt=&norescodetxt NOPRED;
16215 +   %end;
16217 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16218 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16220 +   %if &nnpmml %then %do;
16221 +     code pmml;
16222 +   %end;
16224 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16225 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16226 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16227 +   %end;
16228 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16229 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16230 +   %end;
16231 + %end;
16233 + run;
16234 + quit;
16236 + /*%em_checkerror(); */
16237 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16238 +   /* Delete DMDB catalog */
16239 +   proc datasets lib=work nolist;
16240 +       delete _treeDMDB / mt=cat;
16241 +  run;
16242 +  %end;
16244 + %if &nnpmml %then %do;
16245 +    ods pmml close;
16246 + %end;
16248 +  %doendm:
16250 +%mend em_tree_runTreeProcedure;
16252 +%macro em_tree_createFitStats( multipleTar= );
16255 +  /* create targetTable is multipleTar eq Y */
16256 +  data temptarget;
16257 +    set &EM_DATA_VARIABLESET;
16258 +    where ROLE="TARGET";
16259 +  run;
16261 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16262 +   data &EM_USER_EMOUTFIT;
16263 +     length target $32;
16264 +     merge work.fit_train
16265 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16266 +       work.fit_valid
16267 +     %end;
16268 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16269 +       work.fit_test
16270 +     %end;
16271 +     ;
16272 +     %if "&multipleTar" eq "N" %then %do;
16273 +       target="%EM_TARGET";
16274 +     %end;
16275 +     %else %do;
16276 +       target = _TARGET_;
16277 +     %end;
16278 +     drop _NW_ _SUMW_
16279 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16280 +        _VSUMW_
16281 +     %end;
16282 +     ;
16283 +   run;
16285 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16286 +     proc datasets library=work nolist;
16287 +       delete fit_valid;
16288 +     run;
16289 +   %end;
16290 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16291 +     proc datasets library=work nolist;
16292 +       delete fit_test;
16293 +     run;
16294 +   %end;
16296 +%mend em_tree_createFitStats;
16299 +%macro em_tree_makeEnglishRules;
16301 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16302 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16304 +  /* verify that necessary tables exist and if not, skip processing */
16305 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16306 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16307 +    %goto doendm;
16308 +  %end;
16309 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16310 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16311 +    %goto doendm;
16312 +  %end;
16314 +  /* determine length of variable in outpath dataset */
16315 +  %let vlength= ;
16316 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16317 +  %if &dsid ne %then %do;
16318 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16319 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16320 +  %end;
16321 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16323 +  data tempoutpath;
16324 +    length varname $&vlength;
16325 +    retain varname;
16326 +    set &EM_USER_OUTPATH;
16328 +    if ^missing(variable) then varname=variable;
16329 +    else if ^missing(var_name) then varname=var_name;
16330 +    output;
16331 +  run;
16333 +  /* create an array of generated predicted variable names */
16334 +  %let tree_pred_vars = ;
16335 +  %let tree_pred_label = ;
16336 +  %let numpred= 0;
16337 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16339 +    data _null_;
16340 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16341 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16342 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16343 +     if eof then
16344 +       call symput('numpred', strip(put(_N_, BEST.)));
16345 +    run;
16346 +  %end;
16348 +  /* determine if NPRIORS exists in outnodes  */
16349 +  %local nprior_flag;
16350 +  data _null_;
16351 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16352 +    if eof then do;
16353 +      call symput('nprior_flag', strip(put(npriors, best.)));
16354 +    end;
16355 +  run;
16357 +  proc sort data=tempoutpath; by node; run;
16358 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16360 +  data tempoutpath;
16361 +    merge tempoutpath(in=_a) outnodes(keep= node
16362 +    %if "&nprior_flag" ne "." %then %do;
16363 +      NPRIORS
16364 +    %end;
16365 +    %else %do;
16366 +      N
16367 +    %end;
16368 +    %if &numpred gt 0 %then %do;
16369 +      %do i=1 %to &numpred;
16370 +        &&tree_pred_vars&i
16371 +      %end;
16372 +    %end;
16373 +    );
16374 +    by node;
16375 +    if _a;
16376 +  run;
16378 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16380 +  data _null_;
16381 +    file x;
16382 +    set tempoutpath;
16383 +    by node descending varname;
16384 +    retain origvar oldnode string;
16385 +    length origvar $32 oldnode 8 string $200;
16387 +    if _N_ = 1 then do;
16388 +      origvar = varname;
16389 +      oldnode = node;
16390 +    end;
16392 +    if first.node then do;
16393 +       put "&EM_CODEBAR";
16394 +       put " Node = " node;
16395 +       put "&EM_CODEBAR";
16396 +    end;
16398 +      if first.varname then do;
16399 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16400 +            if MISSING(CHARACTER_VALUE) then do;
16401 +             if NUMERIC_VALUE ne .  then do;
16402 +              if ^first.node then do;
16403 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16404 +              end;
16405 +              else do;
16406 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16407 +              end;
16408 +             end;
16409 +            end;
16410 +            else do;
16411 +              if ^first.node then do;
16412 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16413 +              end;
16414 +              else do;
16415 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16416 +              end;
16417 +             end;
16418 +         end;
16419 +         else if RELATION in ("=") then do;
16420 +            if ^first.node then do;
16421 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16422 +            end;
16423 +            else do;
16424 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16425 +            end;
16426 +         end;
16427 +         else if RELATION in ("ISMISSING") then do;
16428 +            if ^first.node then do;
16429 +              string = " AND "|| strip(varname) || " equals Missing";
16430 +            end;
16431 +            else do;
16432 +              string = "if "|| strip(varname) ||" equals Missing";
16433 +            end;
16434 +         end;
16435 +         else if RELATION in ("ISNOTMISSING") then do;
16436 +            if ^first.node then do;
16437 +              string = " AND "|| strip(varname) || " equals All Values";
16438 +            end;
16439 +            else do;
16440 +              string = "if "|| strip(varname) ||" equals All Values";
16441 +            end;
16442 +         end;
16443 +         if ^missing(varname) then origvar = varname;
16444 +         oldnode=node;
16446 +      end;
16447 +      else do;
16448 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16449 +          if MISSING(CHARACTER_VALUE) then do;
16450 +           if  NUMERIC_VALUE ne .  then do;
16451 +            if ^MISSING(string) then
16452 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16453 +            else
16454 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16455 +           end;
16456 +          end;
16457 +          else do;
16458 +            if ^MISSING(string) then
16459 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16460 +            else
16461 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16462 +          end;
16464 +         end;
16465 +         else if RELATION in ("=") then do;
16466 +           string = strip(string)||", "||strip(character_value);
16467 +         end;
16468 +         else if RELATION in ("ISMISSING") then do;
16470 +         end;
16471 +         if ^missing(varname) then origvar = varname;
16472 +         oldnode=node;
16473 +      end;
16474 +      if last.varname then do;
16475 +         if RELATION in ("ISMISSING") then do;
16476 +           if ^first.varname then do;
16477 +             string = strip(string) || " or MISSING";
16478 +           end;
16479 +         end;
16480 +         put string;
16481 +         if ^missing(varname) then origvar = varname;
16482 +         oldnode=node;
16483 +      end;
16485 +      if last.node then do;
16486 +         put "then ";
16487 +         put " Tree Node Identifier   = " node;
16489 +         %if "&nprior_flag" ne "." %then %do;
16490 +           put " Number of Observations = " NPRIORS;
16491 +         %end;
16492 +         %else %do;
16493 +           put " Number of Observations = " N;
16494 +         %end;
16496 +         %if &numpred gt 0 %then %do;
16497 +           %do i=1 %to &numpred;
16498 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16499 +           %end;
16500 +         %end;
16502 +         put " ";
16503 +         if ^missing(varname) then origvar = varname;
16504 +         oldnode=node;
16505 +      end;
16507 +  run;
16509 +  proc datasets lib=work nolist;
16510 +    delete tempoutpath outnodes;
16511 +  run;
16513 +  %doendm:
16514 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS3.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.06 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and LEVEL in ('BINARY', 'NOMINAL', 'ORDINAL') and (USE='Y');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Records processed = 1250   Memory used = 511K.
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.11 seconds
      cpu time            0.04 seconds
 
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 1250 observations read from the data set EMWS3.EM_TREE2.
NOTE: The data set WORK.CLASSOUT has 3 observations and 9 variables.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.12 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: Deleting WORK.CLASSOUT (memtype=DATA).
NOTE: Deleting WORK.VAROUT (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1601816 kilobytes of physical memory.
NOTE: Will use 1250 out of 1250 training cases.
NOTE: Using memory pool with 72398848 bytes.
NOTE: Passed training data 12 times.
NOTE: Training used 268120 bytes of work memory.
NOTE: The subtree sequence contains 16 subtrees. The largest has 31 nodes and 16 leaves.
NOTE: Using subtree with 27 nodes and 14 leaves.
NOTE: Using subtree with 27 nodes and 14 leaves.
NOTE: Created macro variable NLEAVES equal to 14.
NOTE: The data set EMWS3.TREE2_OUTIMPORT has 7 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_EMTREE has 1030 observations and 4 variables.
NOTE: The data set EMWS3.TREE2_OUTNODES has 27 observations and 27 variables.
NOTE: The data set EMWS3.TREE2_OUTPATH has 106 observations and 7 variables.
NOTE: The data set EMWS3.TREE2_OUTRULES has 268 observations and 6 variables.
NOTE: The data set EMWS3.TREE2_OUTSEQ has 16 observations and 20 variables.
NOTE: The data set EMWS3.TREE2_OUTSTATS has 243 observations and 5 variables.
NOTE: The data set EMWS3.TREE2_OUTSUMMARY has 32 observations and 7 variables.
NOTE: The data set EMWS3.TREE2_OUTTOPOLOGY has 27 observations and 5 variables.
NOTE: External file C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\TREEFLOW.sas opened.
NOTE: External file C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 10 variables.
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 8 variables.
 
 
NOTE: View EMWS3.EM_TREE2.VIEW used (Total process time):
      real time           0.34 seconds
      cpu time            0.32 seconds
 
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 1250 observations read from the data set EMWS3.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 3 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.35 seconds
      cpu time            0.34 seconds
 
 
 
NOTE: Deleting WORK._TREEDMDB (memtype=CATALOG).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: The data set EMWS3.TREE2_EMOUTFIT has 1 observations and 16 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 106 observations read from the data set EMWS3.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 106 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 106 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 106 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 27 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 106 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 27 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 106 observations and 12 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 106 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 106 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      224:176   234:190   380:191   387:195
NOTE: The file X is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=11May2019:23:23:42,
      Create Time=11May2019:23:21:23
 
NOTE: 183 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 106 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref X has been deassigned.
16516
16517  *------------------------------------------------------------*;
16518  * End TRAIN: Tree2;
16519  *------------------------------------------------------------*;
 
16520  *------------------------------------------------------------*;
16521  * Close any missing semi colons;
16522  *------------------------------------------------------------*;
16523  ;
16524  ;
16525  ;
16526  ;
16527  quit;
16528  *------------------------------------------------------------*;
16529  * Close any unbalanced quotes;
16530  *------------------------------------------------------------*;
16531  /*; *"; *'; */
16532  ;
16533  run;
16534  quit;
16535  /* Reset EM Options */
16536  options formchar="|----|+|---+=|-/\<>*";
16537  options nocenter ls=256 ps=10000;
16538  goptions reset=all device=GIF NODISPLAY;
 
16539  proc sort data=WORK.EM_USER_REPORT;
16540  by ID VIEW;
16541  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                May 11, 2019
Time:                23:23:42
*------------------------------------------------------------*
16643  %let EMEXCEPTIONSTRING=;
16644  *------------------------------------------------------------*;
16645  * SCORE: Tree2;
16646  *------------------------------------------------------------*;
16647  %let EM_ACTION = SCORE;
16648  %let syscc = 0;
16649  %macro main;
16650
16651    %if %upcase(&EM_ACTION) = CREATE %then %do;
16652      filename temp catalog 'sashelp.emmodl.tree_create.source';
16653      %include temp;
16654      filename temp;
16655
16656      %em_tree_create;
16657    %end;
16658
16659     %else
16660     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16661
16662         filename temp catalog 'sashelp.emmodl.tree_train.source';
16663         %include temp;
16664         filename temp;
16665         %em_tree_train;
16666     %end;
16667
16668    %else
16669    %if %upcase(&EM_ACTION) = SCORE %then %do;
16670      filename temp catalog 'sashelp.emmodl.tree_score.source';
16671      %include temp;
16672      filename temp;
16673
16674      %em_tree_score;
16675
16676    %end;
16677
16678    %else
16679    %if %upcase(&EM_ACTION) = REPORT %then %do;
16680
16681         filename temp catalog 'sashelp.emmodl.tree_report.source';
16682         %include temp;
16683         filename temp;
16684
16685         %em_tree_report;
16686     %end;
16687
16688    %else
16689    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16690
16691         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16692         %include temp;
16693         filename temp;
16694         %EM_TREE_OPENTREEVIEWER;
16695
16696     %end;
16697
16698    %else
16699    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16700
16701         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16702         %include temp;
16703         filename temp;
16704         %EM_TREE_CLOSETREEVIEWER;
16705
16706     %end;
16707
16708
16709     %doendm:
16710  %mend main;
16711
16712  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16714 +%macro em_tree_score;
16716 +   /* determine if multiple targets will be processed */
16717 +   %let em_tree_multipleTargets=N;
16718 +   %let em_tree_numTarget=1;
16719 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16720 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16721 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16722 +         %let em_tree_multipleTargets=N;
16723 +      %end;
16724 +      %else %do;
16725 +         /* create macro array of targets  */
16726 +         data _null_;
16727 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16728 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16729 +           if eof then
16730 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16731 +        run;
16733 +        %if &em_tree_numTarget gt 1 %then %do;
16734 +           %let em_tree_multipleTargets=Y;
16735 +        %end;
16736 +      %end;
16737 +   %end;
16739 +   /* build flow and publish scoring code */
16740 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16741 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16743 +   filename treeflow "&EM_USER_TREEFLOW";
16744 +   filename treepub "&EM_USER_TREEPUBLISH";
16746 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16747 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16749 +   %em_copyfile(infref=treeflow, outfref=flowref);
16750 +   %em_copyfile(infref=treepub, outfref=pubref);
16752 +   filename treeflow;
16753 +   filename treepub;
16755 +   /* if priors are used, add code to generate unadjusted residuals in export */
16756 +   %let useAdjPriors = N;
16757 +   data _null_;
16758 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16759 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16760 +   run;
16761 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16762 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16763 +      %include temp;
16764 +      filename temp;
16766 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16767 +      filename adjref "&EM_USER_adjResidualCode";
16768 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16770 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16772 +      filename adjref;
16773 +   %end;
16775 +   /* LEAF */
16776 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16777 +      data _null_;
16778 +        file flowref mod;
16779 +        put 'drop _LEAF_;';
16780 +      run;
16782 +      data _null_;
16783 +        file pubref mod;
16784 +        put 'drop _LEAF_;';
16785 +      run;
16787 +   %end;
16789 +   filename flowref;
16790 +   filename pubref;
16792 +   /* em_metachange code */
16793 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16794 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16795 +   %end;
16797 +   /* variable selection based on importance stat    */
16798 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16799 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16800 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16801 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16802 +     %let obs = %sysfunc(fetch(&dsid));
16803 +     %do %while(&obs=0);
16804 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16805 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16806 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16807 +       %let obs = %sysfunc(fetch(&dsid));
16808 +     %end;
16809 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16810 +   %end;
16812 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16813 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16814 +    %let tree_pred_vars = ;
16815 +    %let tree_pred_lvl =;
16816 +    %let numpred= 0;
16818 +    data _null_;
16819 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16820 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16821 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16822 +     if eof then
16823 +       call symput('numpred', strip(put(_N_, BEST.)));
16824 +    run;
16825 +   %end;
16827 +   %if &numpred ne 0 %then %do;
16828 +    %do i=1 %to &numpred;
16829 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16830 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16831 +    %end;
16832 +   %end;
16834 +   /* determine if multiple targets will be processed */
16835 +   %let em_tree_multipleTargets=N;
16836 +   %let em_tree_numTarget=1;
16837 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16838 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16839 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16840 +         %let em_tree_multipleTargets=N;
16841 +      %end;
16842 +      %else %do;
16843 +        data _null_;
16844 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16845 +          if eof then
16846 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16847 +        run;
16849 +        %if &em_tree_numTarget gt 1 %then %do;
16850 +           %let em_tree_multipleTargets=Y;
16851 +        %end;
16852 +     %end;
16853 +   %end;
16855 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16856 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16858 +      /* variable importance */
16859 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16860 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16862 +         %let validexist=0;
16863 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16864 +           %let validexist=1;
16865 +         %end;
16867 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16868 +         /* and the columns may not be generated                                                                                 */
16869 +         %let em_tree_cvexists=;
16870 +         %let em_tree_surrexists=.;
16871 +         data _null_;
16872 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16873 +            if eof then do ;
16874 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16875 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16876 +            end;
16877 +         run;
16879 +         data &EM_USER_OUTIMPORT;
16880 +            set &EM_USER_OUTIMPORT;
16882 +            /* format columns based on Precison value specified */
16883 +            format importance 15.&EM_PROPERTY_PRECISION
16884 +                 %if &validexist %then %do;
16885 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16886 +                 %end;
16887 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16888 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16889 +                 %end;
16890 +            ;
16891 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16892 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16893 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16894 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16895 +                 %if "&em_tree_surrexists" ne "" %then %do;
16896 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16897 +                 %end;
16898 +                 %if &validexist %then %do;
16899 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16900 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16901 +                 %end;
16902 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16903 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16904 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16905 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16906 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16907 +                 %end;
16908 +            ;
16909 +         run;
16911 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16912 +      %end;
16913 +   %end;
16915 +   %doendm:
16916 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=11May2019:23:23:42,
      Create Time=11May2019:23:20:46
 
NOTE: 312 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 73.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=11May2019:23:23:42,
      Create Time=11May2019:23:20:46
 
NOTE: 284 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 72.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=13563,
      Last Modified=11May2019:23:23:42,
      Create Time=11May2019:23:20:46
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=12468,
      Last Modified=11May2019:23:23:42,
      Create Time=11May2019:23:20:46
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 7 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: The data set EMWS3.TREE2_OUTIMPORT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
16917
16918  *------------------------------------------------------------*;
16919  * End SCORE: Tree2;
16920  *------------------------------------------------------------*;
 
16921  proc sort data=WORK.EM_METACHANGE;
16922  by key uname;
16923  run;
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16924  filename x "C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\CDELTA_TRAIN.sas";
16925  data _null_;
16926  file x;
16927  put 'if upcase(NAME) = "BUY" then do;';
16928  put 'ROLE = "REJECTED";';
16929  put 'end;';
16930  put 'else ';
16931  put 'if upcase(NAME) = "LOW" then do;';
16932  put 'ROLE = "REJECTED";';
16933  put 'end;';
16934  put 'else ';
16935  put 'if upcase(NAME) = "Q_REP_UPDOWNINDDOWN" then do;';
16936  put 'ROLE = "ASSESS";';
16937  put 'end;';
16938  put 'else ';
16939  put 'if upcase(NAME) = "Q_REP_UPDOWNINDUNCHANGE" then do;';
16940  put 'ROLE = "ASSESS";';
16941  put 'end;';
16942  put 'else ';
16943  put 'if upcase(NAME) = "Q_REP_UPDOWNINDUP" then do;';
16944  put 'ROLE = "ASSESS";';
16945  put 'end;';
16946  put 'else ';
16947  put 'if upcase(NAME) = "SELL" then do;';
16948  put 'ROLE = "REJECTED";';
16949  put 'end;';
16950  put 'else ';
16951  put 'if upcase(NAME) = "_NODE_" then do;';
16952  put 'ROLE = "SEGMENT";';
16953  put 'LEVEL = "NOMINAL";';
16954  put 'end;';
16955  run;
 
NOTE: The file X is:
      Filename=C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=11May2019:23:23:43,
      Create Time=11May2019:23:20:46
 
NOTE: 28 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 52.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16956  filename x;
NOTE: Fileref X has been deassigned.
 
16957  filename emflow "C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas";
16958  *------------------------------------------------------------*;
16959  * Tree2: Scoring DATA data;
16960  *------------------------------------------------------------*;
16961  data EMWS3.Tree2_TRAIN
16962  / view=EMWS3.Tree2_TRAIN
16963  ;
16964  set EMWS3.Part_TRAIN
16965  ;
16966  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas.
16967 +****************************************************************;
16968 +******             DECISION TREE SCORING CODE             ******;
16969 +****************************************************************;
16970 +
16971 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16972 +LENGTH F_REP_updownInd  $    8;
16973 +LENGTH I_REP_updownInd  $    8;
16974 +LENGTH U_REP_updownInd  $    8;
16975 +LENGTH _WARN_  $    4;
16976 +
16977 +******              LABELS FOR NEW VARIABLES              ******;
16978 +label _NODE_ = 'Node' ;
16979 +label _LEAF_ = 'Leaf' ;
16980 +label P_REP_updownIndup = 'Predicted: REP_updownInd=up' ;
16981 +label P_REP_updownInddown = 'Predicted: REP_updownInd=down' ;
16982 +label P_REP_updownIndunchange = 'Predicted: REP_updownInd=unchange' ;
16983 +label Q_REP_updownIndup = 'Unadjusted P: REP_updownInd=up' ;
16984 +label Q_REP_updownInddown = 'Unadjusted P: REP_updownInd=down' ;
16985 +label Q_REP_updownIndunchange = 'Unadjusted P: REP_updownInd=unchange' ;
16986 +label V_REP_updownIndup = 'Validated: REP_updownInd=up' ;
16987 +label V_REP_updownInddown = 'Validated: REP_updownInd=down' ;
16988 +label V_REP_updownIndunchange = 'Validated: REP_updownInd=unchange' ;
16989 +label R_REP_updownIndup = 'Residual: REP_updownInd=up' ;
16990 +label R_REP_updownInddown = 'Residual: REP_updownInd=down' ;
16991 +label R_REP_updownIndunchange = 'Residual: REP_updownInd=unchange' ;
16992 +label F_REP_updownInd = 'From: REP_updownInd' ;
16993 +label I_REP_updownInd = 'Into: REP_updownInd' ;
16994 +label U_REP_updownInd = 'Unnormalized Into: REP_updownInd' ;
16995 +label _WARN_ = 'Warnings' ;
16996 +
16997 +
16998 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
16999 +LENGTH _ARBFMT_8 $      8; DROP _ARBFMT_8;
17000 +_ARBFMT_8 = ' '; /* Initialize to avoid warning. */
17001 +
17002 +
17003 +_ARBFMT_8 = PUT( REP_updownInd , $8.);
17004 + %DMNORMCP( _ARBFMT_8, F_REP_updownInd );
17005 +
17006 +******             ASSIGN OBSERVATION TO NODE             ******;
17007 +IF  NOT MISSING(high ) AND
17008 +  high  <               0.0925 THEN DO;
17009 +  IF  NOT MISSING(open ) AND
17010 +                  0.0125 <= open  THEN DO;
17011 +    IF  NOT MISSING(lastDone ) AND
17012 +      lastDone  <               0.0125 THEN DO;
17013 +      _NODE_  =                   10;
17014 +      _LEAF_  =                    6;
17015 +      P_REP_updownIndup  =                    0;
17016 +      P_REP_updownInddown  =                    1;
17017 +      P_REP_updownIndunchange  =                    0;
17018 +      Q_REP_updownIndup  =                    0;
17019 +      Q_REP_updownInddown  =                    1;
17020 +      Q_REP_updownIndunchange  =                    0;
17021 +      V_REP_updownIndup  =                    0;
17022 +      V_REP_updownInddown  =                    1;
17023 +      V_REP_updownIndunchange  =                    0;
17024 +      I_REP_updownInd  = 'DOWN' ;
17025 +      U_REP_updownInd  = 'down' ;
17026 +      END;
17027 +    ELSE DO;
17028 +      _NODE_  =                   11;
17029 +      _LEAF_  =                    7;
17030 +      P_REP_updownIndup  =     0.25324675324675;
17031 +      P_REP_updownInddown  =     0.15584415584415;
17032 +      P_REP_updownIndunchange  =     0.59090909090909;
17033 +      Q_REP_updownIndup  =     0.25324675324675;
17034 +      Q_REP_updownInddown  =     0.15584415584415;
17035 +      Q_REP_updownIndunchange  =     0.59090909090909;
17036 +      V_REP_updownIndup  =     0.25503355704697;
17037 +      V_REP_updownInddown  =      0.1744966442953;
17038 +      V_REP_updownIndunchange  =     0.57046979865771;
17039 +      I_REP_updownInd  = 'UNCHANGE' ;
17040 +      U_REP_updownInd  = 'unchange' ;
17041 +      END;
17042 +    END;
17043 +  ELSE DO;
17044 +    IF  NOT MISSING(high ) AND
17045 +                    0.0075 <= high  THEN DO;
17046 +      IF  NOT MISSING(lastDone ) AND
17047 +        lastDone  <               0.0075 THEN DO;
17048 +        IF  NOT MISSING(open ) AND
17049 +                        0.0075 <= open  THEN DO;
17050 +          _NODE_  =                   21;
17051 +          _LEAF_  =                    3;
17052 +          P_REP_updownIndup  =                    0;
17053 +          P_REP_updownInddown  =                    1;
17054 +          P_REP_updownIndunchange  =                    0;
17055 +          Q_REP_updownIndup  =                    0;
17056 +          Q_REP_updownInddown  =                    1;
17057 +          Q_REP_updownIndunchange  =                    0;
17058 +          V_REP_updownIndup  =                    0;
17059 +          V_REP_updownInddown  =                    1;
17060 +          V_REP_updownIndunchange  =                    0;
17061 +          I_REP_updownInd  = 'DOWN' ;
17062 +          U_REP_updownInd  = 'down' ;
17063 +          END;
17064 +        ELSE DO;
17065 +          _NODE_  =                   20;
17066 +          _LEAF_  =                    2;
17067 +          P_REP_updownIndup  =                    0;
17068 +          P_REP_updownInddown  =                    0;
17069 +          P_REP_updownIndunchange  =                    1;
17070 +          Q_REP_updownIndup  =                    0;
17071 +          Q_REP_updownInddown  =                    0;
17072 +          Q_REP_updownIndunchange  =                    1;
17073 +          V_REP_updownIndup  =                    0;
17074 +          V_REP_updownInddown  =                    0;
17075 +          V_REP_updownIndunchange  =                    1;
17076 +          I_REP_updownInd  = 'UNCHANGE' ;
17077 +          U_REP_updownInd  = 'unchange' ;
17078 +          END;
17079 +        END;
17080 +      ELSE DO;
17081 +        IF  NOT MISSING(open ) AND
17082 +          open  <               0.0075 THEN DO;
17083 +          _NODE_  =                   22;
17084 +          _LEAF_  =                    4;
17085 +          P_REP_updownIndup  =                    1;
17086 +          P_REP_updownInddown  =                    0;
17087 +          P_REP_updownIndunchange  =                    0;
17088 +          Q_REP_updownIndup  =                    1;
17089 +          Q_REP_updownInddown  =                    0;
17090 +          Q_REP_updownIndunchange  =                    0;
17091 +          V_REP_updownIndup  =                    1;
17092 +          V_REP_updownInddown  =                    0;
17093 +          V_REP_updownIndunchange  =                    0;
17094 +          I_REP_updownInd  = 'UP' ;
17095 +          U_REP_updownInd  = 'up' ;
17096 +          END;
17097 +        ELSE DO;
17098 +          _NODE_  =                   23;
17099 +          _LEAF_  =                    5;
17100 +          P_REP_updownIndup  =     0.02439024390243;
17101 +          P_REP_updownInddown  =                    0;
17102 +          P_REP_updownIndunchange  =     0.97560975609756;
17103 +          Q_REP_updownIndup  =     0.02439024390243;
17104 +          Q_REP_updownInddown  =                    0;
17105 +          Q_REP_updownIndunchange  =     0.97560975609756;
17106 +          V_REP_updownIndup  =      0.1060606060606;
17107 +          V_REP_updownInddown  =                    0;
17108 +          V_REP_updownIndunchange  =     0.89393939393939;
17109 +          I_REP_updownInd  = 'UNCHANGE' ;
17110 +          U_REP_updownInd  = 'unchange' ;
17111 +          END;
17112 +        END;
17113 +      END;
17114 +    ELSE DO;
17115 +      _NODE_  =                    8;
17116 +      _LEAF_  =                    1;
17117 +      P_REP_updownIndup  =                    0;
17118 +      P_REP_updownInddown  =                    0;
17119 +      P_REP_updownIndunchange  =                    1;
17120 +      Q_REP_updownIndup  =                    0;
17121 +      Q_REP_updownInddown  =                    0;
17122 +      Q_REP_updownIndunchange  =                    1;
17123 +      V_REP_updownIndup  =                    0;
17124 +      V_REP_updownInddown  =                    0;
17125 +      V_REP_updownIndunchange  =                    1;
17126 +      I_REP_updownInd  = 'UNCHANGE' ;
17127 +      U_REP_updownInd  = 'unchange' ;
17128 +      END;
17129 +    END;
17130 +  END;
17131 +ELSE DO;
17132 +  IF  NOT MISSING(vol ) AND
17133 +    vol  <                 90.5 THEN DO;
17134 +    _NODE_  =                    6;
17135 +    _LEAF_  =                    8;
17136 +    P_REP_updownIndup  =                    0;
17137 +    P_REP_updownInddown  =                    0;
17138 +    P_REP_updownIndunchange  =                    1;
17139 +    Q_REP_updownIndup  =                    0;
17140 +    Q_REP_updownInddown  =                    0;
17141 +    Q_REP_updownIndunchange  =                    1;
17142 +    V_REP_updownIndup  =                    0;
17143 +    V_REP_updownInddown  =                    0;
17144 +    V_REP_updownIndunchange  =                    1;
17145 +    I_REP_updownInd  = 'UNCHANGE' ;
17146 +    U_REP_updownInd  = 'unchange' ;
17147 +    END;
17148 +  ELSE DO;
17149 +    IF  NOT MISSING(high ) AND
17150 +      high  <               0.1125 THEN DO;
17151 +      IF  NOT MISSING(open ) AND
17152 +        open  <               0.0925 THEN DO;
17153 +        _NODE_  =                   16;
17154 +        _LEAF_  =                    9;
17155 +        P_REP_updownIndup  =     0.78571428571428;
17156 +        P_REP_updownInddown  =     0.07142857142857;
17157 +        P_REP_updownIndunchange  =     0.14285714285714;
17158 +        Q_REP_updownIndup  =     0.78571428571428;
17159 +        Q_REP_updownInddown  =     0.07142857142857;
17160 +        Q_REP_updownIndunchange  =     0.14285714285714;
17161 +        V_REP_updownIndup  =     0.85714285714285;
17162 +        V_REP_updownInddown  =                    0;
17163 +        V_REP_updownIndunchange  =     0.14285714285714;
17164 +        I_REP_updownInd  = 'UP' ;
17165 +        U_REP_updownInd  = 'up' ;
17166 +        END;
17167 +      ELSE DO;
17168 +        IF  NOT MISSING(lastDone ) AND
17169 +                        0.1025 <= lastDone  THEN DO;
17170 +          IF  NOT MISSING(open ) AND
17171 +            open  <               0.1025 THEN DO;
17172 +            _NODE_  =                   30;
17173 +            _LEAF_  =                   11;
17174 +            P_REP_updownIndup  =                    1;
17175 +            P_REP_updownInddown  =                    0;
17176 +            P_REP_updownIndunchange  =                    0;
17177 +            Q_REP_updownIndup  =                    1;
17178 +            Q_REP_updownInddown  =                    0;
17179 +            Q_REP_updownIndunchange  =                    0;
17180 +            V_REP_updownIndup  =                    1;
17181 +            V_REP_updownInddown  =                    0;
17182 +            V_REP_updownIndunchange  =                    0;
17183 +            I_REP_updownInd  = 'UP' ;
17184 +            U_REP_updownInd  = 'up' ;
17185 +            END;
17186 +          ELSE DO;
17187 +            _NODE_  =                   31;
17188 +            _LEAF_  =                   12;
17189 +            P_REP_updownIndup  =     0.08333333333333;
17190 +            P_REP_updownInddown  =                0.125;
17191 +            P_REP_updownIndunchange  =     0.79166666666666;
17192 +            Q_REP_updownIndup  =     0.08333333333333;
17193 +            Q_REP_updownInddown  =                0.125;
17194 +            Q_REP_updownIndunchange  =     0.79166666666666;
17195 +            V_REP_updownIndup  =     0.07407407407407;
17196 +            V_REP_updownInddown  =     0.18518518518518;
17197 +            V_REP_updownIndunchange  =     0.74074074074074;
17198 +            I_REP_updownInd  = 'UNCHANGE' ;
17199 +            U_REP_updownInd  = 'unchange' ;
17200 +            END;
17201 +          END;
17202 +        ELSE DO;
17203 +          _NODE_  =                   24;
17204 +          _LEAF_  =                   10;
17205 +          P_REP_updownIndup  =      0.1063829787234;
17206 +          P_REP_updownInddown  =     0.48936170212765;
17207 +          P_REP_updownIndunchange  =     0.40425531914893;
17208 +          Q_REP_updownIndup  =      0.1063829787234;
17209 +          Q_REP_updownInddown  =     0.48936170212765;
17210 +          Q_REP_updownIndunchange  =     0.40425531914893;
17211 +          V_REP_updownIndup  =                0.075;
17212 +          V_REP_updownInddown  =                0.675;
17213 +          V_REP_updownIndunchange  =                 0.25;
17214 +          I_REP_updownInd  = 'DOWN' ;
17215 +          U_REP_updownInd  = 'down' ;
17216 +          END;
17217 +        END;
17218 +      END;
17219 +    ELSE DO;
17220 +      IF  NOT MISSING(open ) AND
17221 +        open  <               0.1125 THEN DO;
17222 +        _NODE_  =                   18;
17223 +        _LEAF_  =                   13;
17224 +        P_REP_updownIndup  =     0.88888888888888;
17225 +        P_REP_updownInddown  =     0.05555555555555;
17226 +        P_REP_updownIndunchange  =     0.05555555555555;
17227 +        Q_REP_updownIndup  =     0.88888888888888;
17228 +        Q_REP_updownInddown  =     0.05555555555555;
17229 +        Q_REP_updownIndunchange  =     0.05555555555555;
17230 +        V_REP_updownIndup  =     0.72727272727272;
17231 +        V_REP_updownInddown  =     0.09090909090909;
17232 +        V_REP_updownIndunchange  =     0.18181818181818;
17233 +        I_REP_updownInd  = 'UP' ;
17234 +        U_REP_updownInd  = 'up' ;
17235 +        END;
17236 +      ELSE DO;
17237 +        _NODE_  =                   19;
17238 +        _LEAF_  =                   14;
17239 +        P_REP_updownIndup  =     0.33374689826302;
17240 +        P_REP_updownInddown  =     0.50496277915632;
17241 +        P_REP_updownIndunchange  =     0.16129032258064;
17242 +        Q_REP_updownIndup  =     0.33374689826302;
17243 +        Q_REP_updownInddown  =     0.50496277915632;
17244 +        Q_REP_updownIndunchange  =     0.16129032258064;
17245 +        V_REP_updownIndup  =     0.33793969849246;
17246 +        V_REP_updownInddown  =                  0.5;
17247 +        V_REP_updownIndunchange  =     0.16206030150753;
17248 +        I_REP_updownInd  = 'DOWN' ;
17249 +        U_REP_updownInd  = 'down' ;
17250 +        END;
17251 +      END;
17252 +    END;
17253 +  END;
17254 +
17255 +*****  RESIDUALS R_ *************;
17256 +IF  F_REP_updownInd  NE 'UP'
17257 +AND F_REP_updownInd  NE 'DOWN'
17258 +AND F_REP_updownInd  NE 'UNCHANGE'  THEN DO;
17259 +        R_REP_updownIndup  = .;
17260 +        R_REP_updownInddown  = .;
17261 +        R_REP_updownIndunchange  = .;
17262 + END;
17263 + ELSE DO;
17264 +       R_REP_updownIndup  =  -P_REP_updownIndup ;
17265 +       R_REP_updownInddown  =  -P_REP_updownInddown ;
17266 +       R_REP_updownIndunchange  =  -P_REP_updownIndunchange ;
17267 +       SELECT( F_REP_updownInd  );
17268 +          WHEN( 'UP'  ) R_REP_updownIndup  = R_REP_updownIndup  +1;
17269 +          WHEN( 'DOWN'  ) R_REP_updownInddown  = R_REP_updownInddown  +1;
17270 +          WHEN( 'UNCHANGE'  ) R_REP_updownIndunchange  =
17271 +        R_REP_updownIndunchange  +1;
17272 +       END;
17273 + END;
17274 +
17275 +****************************************************************;
17276 +******          END OF DECISION TREE SCORING CODE         ******;
17277 +****************************************************************;
17278 +
17279 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17280  run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
17281  quit;
17282  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17283  filename emflow "C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas";
17284  *------------------------------------------------------------*;
17285  * Tree2: Scoring VALIDATE data;
17286  *------------------------------------------------------------*;
17287  data EMWS3.Tree2_VALIDATE
17288  / view=EMWS3.Tree2_VALIDATE
17289  ;
17290  set EMWS3.Part_VALIDATE
17291  ;
17292  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\JohnLaw\OneDrive\WQD Data Science\WQD7005\SASProject\projects\DataMining\Workspaces\EMWS3\Tree2\EMFLOWSCORE.sas.
17293 +****************************************************************;
17294 +******             DECISION TREE SCORING CODE             ******;
17295 +****************************************************************;
17296 +
17297 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17298 +LENGTH F_REP_updownInd  $    8;
17299 +LENGTH I_REP_updownInd  $    8;
17300 +LENGTH U_REP_updownInd  $    8;
17301 +LENGTH _WARN_  $    4;
17302 +
17303 +******              LABELS FOR NEW VARIABLES              ******;
17304 +label _NODE_ = 'Node' ;
17305 +label _LEAF_ = 'Leaf' ;
17306 +label P_REP_updownIndup = 'Predicted: REP_updownInd=up' ;
17307 +label P_REP_updownInddown = 'Predicted: REP_updownInd=down' ;
17308 +label P_REP_updownIndunchange = 'Predicted: REP_updownInd=unchange' ;
17309 +label Q_REP_updownIndup = 'Unadjusted P: REP_updownInd=up' ;
17310 +label Q_REP_updownInddown = 'Unadjusted P: REP_updownInd=down' ;
17311 +label Q_REP_updownIndunchange = 'Unadjusted P: REP_updownInd=unchange' ;
17312 +label V_REP_updownIndup = 'Validated: REP_updownInd=up' ;
17313 +label V_REP_updownInddown = 'Validated: REP_updownInd=down' ;
17314 +label V_REP_updownIndunchange = 'Validated: REP_updownInd=unchange' ;
17315 +label R_REP_updownIndup = 'Residual: REP_updownInd=up' ;
17316 +label R_REP_updownInddown = 'Residual: REP_updownInd=down' ;
17317 +label R_REP_updownIndunchange = 'Residual: REP_updownInd=unchange' ;
17318 +label F_REP_updownInd = 'From: REP_updownInd' ;
17319 +label I_REP_updownInd = 'Into: REP_updownInd' ;
17320 +label U_REP_updownInd = 'Unnormalized Into: REP_updownInd' ;
17321 +label _WARN_ = 'Warnings' ;
17322 +
17323 +
17324 +******      TEMPORARY VARIABLES FOR FORMATTED VALUES      ******;
17325 +LENGTH _ARBFMT_8 $      8; DROP _ARBFMT_8;
17326 +_ARBFMT_8 = ' '; /* Initialize to avoid warning. */
17327 +
17328 +
17329 +_ARBFMT_8 = PUT( REP_updownInd , $8.);
17330 + %DMNORMCP( _ARBFMT_8, F_REP_updownInd );
17331 +
17332 +******             ASSIGN OBSERVATION TO NODE             ******;
17333 +IF  NOT MISSING(high ) AND
17334 +  high  <               0.0925 THEN DO;
17335 +  IF  NOT MISSING(open ) AND
17336 +                  0.0125 <= open  THEN DO;
17337 +    IF  NOT MISSING(lastDone ) AND
17338 +      lastDone  <               0.0125 THEN DO;
17339 +      _NODE_  =                   10;
17340 +      _LEAF_  =                    6;
17341 +      P_REP_updownIndup  =                    0;
17342 +      P_REP_updownInddown  =                    1;
17343 +      P_REP_updownIndunchange  =                    0;
17344 +      Q_REP_updownIndup  =                    0;
17345 +      Q_REP_updownInddown  =                    1;
17346 +      Q_REP_updownIndunchange  =                    0;
17347 +      V_REP_updownIndup  =                    0;
17348 +      V_REP_updownInddown  =                    1;
17349 +      V_REP_updownIndunchange  =                    0;
17350 +      I_REP_updownInd  = 'DOWN' ;
17351 +      U_REP_updownInd  = 'down' ;
17352 +      END;
17353 +    ELSE DO;
17354 +      _NODE_  =                   11;
17355 +      _LEAF_  =                    7;
17356 +      P_REP_updownIndup  =     0.25324675324675;
17357 +      P_REP_updownInddown  =     0.15584415584415;
17358 +      P_REP_updownIndunchange  =     0.59090909090909;
17359 +      Q_REP_updownIndup  =     0.25324675324675;
17360 +      Q_REP_updownInddown  =     0.15584415584415;
17361 +      Q_REP_updownIndunchange  =     0.59090909090909;
17362 +      V_REP_updownIndup  =     0.25503355704697;
17363 +      V_REP_updownInddown  =      0.1744966442953;
17364 +      V_REP_updownIndunchange  =     0.57046979865771;
17365 +      I_REP_updownInd  = 'UNCHANGE' ;
17366 +      U_REP_updownInd  = 'unchange' ;
17367 +      END;
17368 +    END;
17369 +  ELSE DO;
17370 +    IF  NOT MISSING(high ) AND
17371 +                    0.0075 <= high  THEN DO;
17372 +      IF  NOT MISSING(lastDone ) AND
17373 +        lastDone  <               0.0075 THEN DO;
17374 +        IF  NOT MISSING(open ) AND
17375 +                        0.0075 <= open  THEN DO;
17376 +          _NODE_  =                   21;
17377 +          _LEAF_  =                    3;
17378 +          P_REP_updownIndup  =                    0;
17379 +          P_REP_updownInddown  =                    1;
17380 +          P_REP_updownIndunchange  =                    0;
17381 +          Q_REP_updownIndup  =                    0;
17382 +          Q_REP_updownInddown  =                    1;
17383 +          Q_REP_updownIndunchange  =                    0;
17384 +          V_REP_updownIndup  =                    0;
17385 +          V_REP_updownInddown  =                    1;
17386 +          V_REP_updownIndunchange  =                    0;
17387 +          I_REP_updownInd  = 'DOWN' ;
17388 +          U_REP_updownInd  = 'down' ;
17389 +          END;
17390 +        ELSE DO;
17391 +          _NODE_  =                   20;
17392 +          _LEAF_  =                    2;
17393 +          P_REP_updownIndup  =                    0;
17394 +          P_REP_updownInddown  =                    0;
17395 +          P_REP_updownIndunchange  =                    1;
17396 +          Q_REP_updownIndup  =                    0;
17397 +          Q_REP_updownInddown  =                    0;
17398 +          Q_REP_updownIndunchange  =                    1;
17399 +          V_REP_updownIndup  =                    0;
17400 +          V_REP_updownInddown  =                    0;
17401 +          V_REP_updownIndunchange  =                    1;
17402 +          I_REP_updownInd  = 'UNCHANGE' ;
17403 +          U_REP_updownInd  = 'unchange' ;
17404 +          END;
17405 +        END;
17406 +      ELSE DO;
17407 +        IF  NOT MISSING(open ) AND
17408 +          open  <               0.0075 THEN DO;
17409 +          _NODE_  =                   22;
17410 +          _LEAF_  =                    4;
17411 +          P_REP_updownIndup  =                    1;
17412 +          P_REP_updownInddown  =                    0;
17413 +          P_REP_updownIndunchange  =                    0;
17414 +          Q_REP_updownIndup  =                    1;
17415 +          Q_REP_updownInddown  =                    0;
17416 +          Q_REP_updownIndunchange  =                    0;
17417 +          V_REP_updownIndup  =                    1;
17418 +          V_REP_updownInddown  =                    0;
17419 +          V_REP_updownIndunchange  =                    0;
17420 +          I_REP_updownInd  = 'UP' ;
17421 +          U_REP_updownInd  = 'up' ;
17422 +          END;
17423 +        ELSE DO;
17424 +          _NODE_  =                   23;
17425 +          _LEAF_  =                    5;
17426 +          P_REP_updownIndup  =     0.02439024390243;
17427 +          P_REP_updownInddown  =                    0;
17428 +          P_REP_updownIndunchange  =     0.97560975609756;
17429 +          Q_REP_updownIndup  =     0.02439024390243;
17430 +          Q_REP_updownInddown  =                    0;
17431 +          Q_REP_updownIndunchange  =     0.97560975609756;
17432 +          V_REP_updownIndup  =      0.1060606060606;
17433 +          V_REP_updownInddown  =                    0;
17434 +          V_REP_updownIndunchange  =     0.89393939393939;
17435 +          I_REP_updownInd  = 'UNCHANGE' ;
17436 +          U_REP_updownInd  = 'unchange' ;
17437 +          END;
17438 +        END;
17439 +      END;
17440 +    ELSE DO;
17441 +      _NODE_  =                    8;
17442 +      _LEAF_  =                    1;
17443 +      P_REP_updownIndup  =                    0;
17444 +      P_REP_updownInddown  =                    0;
17445 +      P_REP_updownIndunchange  =                    1;
17446 +      Q_REP_updownIndup  =                    0;
17447 +      Q_REP_updownInddown  =                    0;
17448 +      Q_REP_updownIndunchange  =                    1;
17449 +      V_REP_updownIndup  =                    0;
17450 +      V_REP_updownInddown  =                    0;
17451 +      V_REP_updownIndunchange  =                    1;
17452 +      I_REP_updownInd  = 'UNCHANGE' ;
17453 +      U_REP_updownInd  = 'unchange' ;
17454 +      END;
17455 +    END;
17456 +  END;
17457 +ELSE DO;
17458 +  IF  NOT MISSING(vol ) AND
17459 +    vol  <                 90.5 THEN DO;
17460 +    _NODE_  =                    6;
17461 +    _LEAF_  =                    8;
17462 +    P_REP_updownIndup  =                    0;
17463 +    P_REP_updownInddown  =                    0;
17464 +    P_REP_updownIndunchange  =                    1;
17465 +    Q_REP_updownIndup  =                    0;
17466 +    Q_REP_updownInddown  =                    0;
17467 +    Q_REP_updownIndunchange  =                    1;
17468 +    V_REP_updownIndup  =                    0;
17469 +    V_REP_updownInddown  =                    0;
17470 +    V_REP_updownIndunchange  =                    1;
17471 +    I_REP_updownInd  = 'UNCHANGE' ;
17472 +    U_REP_updownInd  = 'unchange' ;
17473 +    END;
17474 +  ELSE DO;
17475 +    IF  NOT MISSING(high ) AND
17476 +      high  <               0.1125 THEN DO;
17477 +      IF  NOT MISSING(open ) AND
17478 +        open  <               0.0925 THEN DO;
17479 +        _NODE_  =                   16;
17480 +        _LEAF_  =                    9;
17481 +        P_REP_updownIndup  =     0.78571428571428;
17482 +        P_REP_updownInddown  =     0.07142857142857;
17483 +        P_REP_updownIndunchange  =     0.14285714285714;
17484 +        Q_REP_updownIndup  =     0.78571428571428;
17485 +        Q_REP_updownInddown  =     0.07142857142857;
17486 +        Q_REP_updownIndunchange  =     0.14285714285714;
17487 +        V_REP_updownIndup  =     0.85714285714285;
17488 +        V_REP_updownInddown  =                    0;
17489 +        V_REP_updownIndunchange  =     0.14285714285714;
17490 +        I_REP_updownInd  = 'UP' ;
17491 +        U_REP_updownInd  = 'up' ;
17492 +        END;
17493 +      ELSE DO;
17494 +        IF  NOT MISSING(lastDone ) AND
17495 +                        0.1025 <= lastDone  THEN DO;
17496 +          IF  NOT MISSING(open ) AND
17497 +            open  <               0.1025 THEN DO;
17498 +            _NODE_  =                   30;
17499 +            _LEAF_  =                   11;
17500 +            P_REP_updownIndup  =                    1;
17501 +            P_REP_updownInddown  =                    0;
17502 +            P_REP_updownIndunchange  =                    0;
17503 +            Q_REP_updownIndup  =                    1;
17504 +            Q_REP_updownInddown  =                    0;
17505 +            Q_REP_updownIndunchange  =                    0;
17506 +            V_REP_updownIndup  =                    1;
17507 +            V_REP_updownInddown  =                    0;
17508 +            V_REP_updownIndunchange  =                    0;
17509 +            I_REP_updownInd  = 'UP' ;
17510 +            U_REP_updownInd  = 'up' ;
17511 +            END;
17512 +          ELSE DO;
17513 +            _NODE_  =                   31;
17514 +            _LEAF_  =                   12;
17515 +            P_REP_updownIndup  =     0.08333333333333;
17516 +            P_REP_updownInddown  =                0.125;
17517 +            P_REP_updownIndunchange  =     0.79166666666666;
17518 +            Q_REP_updownIndup  =     0.08333333333333;
17519 +            Q_REP_updownInddown  =                0.125;
17520 +            Q_REP_updownIndunchange  =     0.79166666666666;
17521 +            V_REP_updownIndup  =     0.07407407407407;
17522 +            V_REP_updownInddown  =     0.18518518518518;
17523 +            V_REP_updownIndunchange  =     0.74074074074074;
17524 +            I_REP_updownInd  = 'UNCHANGE' ;
17525 +            U_REP_updownInd  = 'unchange' ;
17526 +            END;
17527 +          END;
17528 +        ELSE DO;
17529 +          _NODE_  =                   24;
17530 +          _LEAF_  =                   10;
17531 +          P_REP_updownIndup  =      0.1063829787234;
17532 +          P_REP_updownInddown  =     0.48936170212765;
17533 +          P_REP_updownIndunchange  =     0.40425531914893;
17534 +          Q_REP_updownIndup  =      0.1063829787234;
17535 +          Q_REP_updownInddown  =     0.48936170212765;
17536 +          Q_REP_updownIndunchange  =     0.40425531914893;
17537 +          V_REP_updownIndup  =                0.075;
17538 +          V_REP_updownInddown  =                0.675;
17539 +          V_REP_updownIndunchange  =                 0.25;
17540 +          I_REP_updownInd  = 'DOWN' ;
17541 +          U_REP_updownInd  = 'down' ;
17542 +          END;
17543 +        END;
17544 +      END;
17545 +    ELSE DO;
17546 +      IF  NOT MISSING(open ) AND
17547 +        open  <               0.1125 THEN DO;
17548 +        _NODE_  =                   18;
17549 +        _LEAF_  =                   13;
17550 +        P_REP_updownIndup  =     0.88888888888888;
17551 +        P_REP_updownInddown  =     0.05555555555555;
17552 +        P_REP_updownIndunchange  =     0.05555555555555;
17553 +        Q_REP_updownIndup  =     0.88888888888888;
17554 +        Q_REP_updownInddown  =     0.05555555555555;
17555 +        Q_REP_updownIndunchange  =     0.05555555555555;
17556 +        V_REP_updownIndup  =     0.72727272727272;
17557 +        V_REP_updownInddown  =     0.09090909090909;
17558 +        V_REP_updownIndunchange  =     0.18181818181818;
17559 +        I_REP_updownInd  = 'UP' ;
17560 +        U_REP_updownInd  = 'up' ;
17561 +        END;
17562 +      ELSE DO;
17563 +        _NODE_  =                   19;
17564 +        _LEAF_  =                   14;
17565 +        P_REP_updownIndup  =     0.33374689826302;
17566 +        P_REP_updownInddown  =     0.50496277915632;
17567 +        P_REP_updownIndunchange  =     0.16129032258064;
17568 +        Q_REP_updownIndup  =     0.33374689826302;
17569 +        Q_REP_updownInddown  =     0.50496277915632;
17570 +        Q_REP_updownIndunchange  =     0.16129032258064;
17571 +        V_REP_updownIndup  =     0.33793969849246;
17572 +        V_REP_updownInddown  =                  0.5;
17573 +        V_REP_updownIndunchange  =     0.16206030150753;
17574 +        I_REP_updownInd  = 'DOWN' ;
17575 +        U_REP_updownInd  = 'down' ;
17576 +        END;
17577 +      END;
17578 +    END;
17579 +  END;
17580 +
17581 +*****  RESIDUALS R_ *************;
17582 +IF  F_REP_updownInd  NE 'UP'
17583 +AND F_REP_updownInd  NE 'DOWN'
17584 +AND F_REP_updownInd  NE 'UNCHANGE'  THEN DO;
17585 +        R_REP_updownIndup  = .;
17586 +        R_REP_updownInddown  = .;
17587 +        R_REP_updownIndunchange  = .;
17588 + END;
17589 + ELSE DO;
17590 +       R_REP_updownIndup  =  -P_REP_updownIndup ;
17591 +       R_REP_updownInddown  =  -P_REP_updownInddown ;
17592 +       R_REP_updownIndunchange  =  -P_REP_updownIndunchange ;
17593 +       SELECT( F_REP_updownInd  );
17594 +          WHEN( 'UP'  ) R_REP_updownIndup  = R_REP_updownIndup  +1;
17595 +          WHEN( 'DOWN'  ) R_REP_updownInddown  = R_REP_updownInddown  +1;
17596 +          WHEN( 'UNCHANGE'  ) R_REP_updownIndunchange  =
17597 +        R_REP_updownIndunchange  +1;
17598 +       END;
17599 + END;
17600 +
17601 +****************************************************************;
17602 +******          END OF DECISION TREE SCORING CODE         ******;
17603 +****************************************************************;
17604 +
17605 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17606  run;
 
NOTE: DATA STEP view saved on file EMWS3.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17607  quit;
17608  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS3.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
17610  proc sort data=WORK.EM_USER_REPORT;
17611  by ID VIEW;
17612  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
17613  *------------------------------------------------------------*;
17614  * Tree2: Computing metadata for TRAIN data;
17615  *------------------------------------------------------------*;
 
NOTE: View EMWS3.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
17992  data WORK.MODELTEMP_INFO;
17993  set EMWS3.Tree2_EMINFO;
17994  where DATA='Tree2' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
17995  run;
 
NOTE: There were 0 observations read from the data set EMWS3.TREE2_EMINFO.
      WHERE (DATA='Tree2') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17996  data EMWS3.Tree2_EMINFO;
17997  length TARGET KEY $32 DATA $43;
17998  input TARGET KEY DATA $;
17999  cards;
 
NOTE: The data set EMWS3.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18003  run;
18004  data EMWS3.Tree2_EMINFO;
18005  set EMWS3.Tree2_EMINFO WORK.MODELTEMP_INFO;
18006  run;
 
NOTE: There were 3 observations read from the data set EMWS3.TREE2_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS3.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18007  proc sort data = EMWS3.Tree2_EMINFO NOTHREADS;
18008  by TARGET KEY;
18009  run;
 
NOTE: There were 3 observations read from the data set EMWS3.TREE2_EMINFO.
NOTE: The data set EMWS3.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18010  proc sort data = EMWS3.Ids_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
18011  by TARGET KEY;
18012  run;
 
NOTE: There were 3 observations read from the data set EMWS3.IDS_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
18013  proc sort data = EMWS3.Tree2_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
18014  by TARGET KEY;
18015  run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS3.TREE2_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18016  data EMWS3.Tree2_EMINFO;
18017  merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
18018  by TARGET KEY;
18019  run;
 
NOTE: There were 3 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS3.TREE2_EMINFO has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
18020  proc datasets lib=work nolist;
18021  delete TEMP_INFO SORTEDEMINFO;
18022  run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
18023  quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: View EMWS3.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
NOTE: View EMWS3.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 11, 2019
Time:                23:23:45
*------------------------------------------------------------*
18047  data EMWS3.Tree2_EMOUTFIT;
18048  set EMWS3.Tree2_EMOUTFIT;
18049  length TargetLabel $200;
18050  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
18051  if upcase(TARGET) eq "REP_UPDOWNIND" then TargetLabel = 'Replacement: updownInd';
18052  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_EMOUTFIT.
NOTE: The data set EMWS3.TREE2_EMOUTFIT has 1 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
18053  proc sort data=EMWS3.Tree2_EMREPORTFIT nothreads;
18054  by TARGET;
18055  run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE2_EMREPORTFIT.
NOTE: The data set EMWS3.TREE2_EMREPORTFIT has 8 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18056  %let _EMwarndup = 0;
18057  %let _EMtargetdup =;
18058  %let _EMASEtargetdup =;
18059  data _null_;
18060  set EMWS3.Tree2_EMOUTFIT;
18061  if .<_ASE_<0.000001 then do;
18062  call symput('_EMwarndup', '1');
18063  call symput('_EMtargetdup', target);
18064  call symput('_EMASEtargetdup', put(_ASE_, best.));
18065  end;
18066  run;
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
18067  %let EMEXCEPTIONSTRING=;
18068  *------------------------------------------------------------*;
18069  * REPORT: Tree2;
18070  *------------------------------------------------------------*;
18071  %let EM_ACTION = REPORT;
18072  %let syscc = 0;
18073  %macro main;
18074
18075    %if %upcase(&EM_ACTION) = CREATE %then %do;
18076      filename temp catalog 'sashelp.emmodl.tree_create.source';
18077      %include temp;
18078      filename temp;
18079
18080      %em_tree_create;
18081    %end;
18082
18083     %else
18084     %if %upcase(&EM_ACTION) = TRAIN %then %do;
18085
18086         filename temp catalog 'sashelp.emmodl.tree_train.source';
18087         %include temp;
18088         filename temp;
18089         %em_tree_train;
18090     %end;
18091
18092    %else
18093    %if %upcase(&EM_ACTION) = SCORE %then %do;
18094      filename temp catalog 'sashelp.emmodl.tree_score.source';
18095      %include temp;
18096      filename temp;
18097
18098      %em_tree_score;
18099
18100    %end;
18101
18102    %else
18103    %if %upcase(&EM_ACTION) = REPORT %then %do;
18104
18105         filename temp catalog 'sashelp.emmodl.tree_report.source';
18106         %include temp;
18107         filename temp;
18108
18109         %em_tree_report;
18110     %end;
18111
18112    %else
18113    %if %upcase(&EM_ACTION) = OPENINT %then %do;
18114
18115         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18116         %include temp;
18117         filename temp;
18118         %EM_TREE_OPENTREEVIEWER;
18119
18120     %end;
18121
18122    %else
18123    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
18124
18125         filename temp catalog 'sashelp.emmodl.tree_actions.source';
18126         %include temp;
18127         filename temp;
18128         %EM_TREE_CLOSETREEVIEWER;
18129
18130     %end;
18131
18132
18133     %doendm:
18134  %mend main;
18135
18136  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
18138 +%macro em_tree_makePlotDs( multipleTar= );
18140 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18141 +  %EM_GETNAME(key=OUTNODES, type=DATA);
18142 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18143 +  %EM_GETNAME(key=OUTRULES, type=DATA);
18145 +  /* determine if validation statistics will be displayed */
18146 +  %let validflag=N;
18147 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
18148 +    /* determine if validation data exists */
18149 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
18150 +      %let validflag=Y;
18151 +    %end;
18152 +  %end;
18154 +   /* retrieve name of decmeta even in presence of multiple targets */
18155 +   %let decmeta = ;
18156 +   %if &EM_DEC_DECMETA eq %then %do;
18157 +     data _Target;
18158 +       set &em_data_variableset;
18159 +       where ROLE='TARGET' and USE in('D', 'Y');
18160 +       keep NAME;
18161 +     run;
18162 +     proc sort data=_Target;
18163 +       by NAME;
18164 +     run;
18165 +     proc sort data=EM_TARGETDECINFO;
18166 +       by TARGET;
18167 +     run;
18168 +     data _Target;
18169 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
18170 +       by NAME;
18171 +       if _a then do;
18172 +         call symput('decmeta', trim(DECMETA));
18173 +       end;
18174 +     run;
18175 +     proc delete data=_Target;run;
18176 +   %end;
18177 +   %else %let decmeta = &EM_DEC_DECMETA;
18180 +  /* retrieve targetEvent from decmeta */
18181 +  %let targetEvent=;
18182 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18183 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18184 +      data _null_;
18185 +       set &DECMETA(where=(_TYPE_="TARGET"));
18186 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
18187 +      run;
18188 +    %end;
18189 +  %end;
18191 +  /* retrieve predicted var for targetEvent from decmeta */
18192 +  %let predTarget=;
18193 +  %let predLvl=;
18194 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18195 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18196 +      data _null_;
18197 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
18198 +       call symput('predTarget', strip(VARIABLE));
18199 +       call symput('predLvl', strip(LEVEL));
18200 +      run;
18201 +    %end;
18202 +  %end;
18203 +  %else %do;
18204 +    %if %sysfunc(exist(&DECMETA)) %then %do;
18205 +      data _null_;
18206 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
18207 +       call symput('predTarget', strip(VARIABLE));
18208 +      run;
18209 +    %end;
18210 +  %end;
18212 +  /* create BelowText value */
18213 +  data belowtext;
18214 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
18215 +    keep node belowtext;
18216 +  run;
18218 +  /* relace belowtext with variable label if it exists */
18219 +  data belowtext2;
18220 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
18221 +    keep node belowtextlbl;
18222 +  run;
18224 +  proc sort data=belowtext; by node; run;
18225 +  proc sort data=belowtext2; by node; run;
18227 +  data belowtext;
18228 +    merge belowtext belowtext2(in=_a);
18229 +    by node;
18230 +    if _a then belowtext=belowtextlbl;
18231 +    keep node belowtext;
18232 +  run;
18234 +  /* create AboveText value */
18235 +  data abovetext;
18236 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
18237 +  run;
18238 +  proc sort data=abovetext; by node numeric_value; run;
18240 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
18241 +  data abovetext;
18242 +    set abovetext(rename=(node=parent));
18243 +    by parent numeric_value;
18244 +    retain abovetext tempstring flag branch origval origchar ;
18245 +    length abovetext $256;
18246 +    length tempstring origchar $64;
18248 +    if STAT in ("INTERVAL", "ORDINAL") then do;
18249 +      if first.parent then do;
18250 +        if missing(character_value) then do;
18251 +          numeric_value = round(numeric_value, &sp_precision);
18252 +          abovetext = "< "||strip(NUMERIC_VALUE);
18253 +          branch = 1;
18254 +          origval = numeric_value;
18255 +          output;
18256 +        end;
18257 +        else do;
18258 +          abovetext = "< "||strip(CHARACTER_VALUE);
18259 +          branch = 1;
18260 +          origchar = character_value;
18261 +          output;
18262 +        end;
18264 +        if first.parent AND last.parent then do;
18265 +          if missing(character_value) then do;
18266 +            numeric_value = round(numeric_value, &sp_precision);
18267 +            branch = branch + 1;
18268 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18269 +            output;
18270 +          end;
18271 +          else do;
18272 +            branch = branch + 1;
18273 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18274 +            output;
18275 +          end;
18276 +        end;
18277 +      end;
18278 +      else if last.parent then do;
18279 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18280 +          if missing(character_value) then do;
18281 +            numeric_value = round(numeric_value, &sp_precision);
18282 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18283 +          end;
18284 +          else do;
18285 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18286 +          end;
18287 +          branch = branch + 1;
18288 +          output;
18290 +          if missing(character_value) then do;
18291 +            numeric_value = round(numeric_value, &sp_precision);
18292 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18293 +          end;
18294 +          else do;
18295 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18296 +          end;
18297 +          branch = branch + 1;
18298 +          output;
18299 +        end;
18300 +        else do;
18301 +          if missing(character_value) then do;
18302 +            numeric_value = round(numeric_value, &sp_precision);
18303 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18304 +          end;
18305 +          else do;
18306 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18307 +          end;
18308 +          branch = branch + 1;
18309 +          output;
18310 +        end;
18311 +      end;
18312 +      else do;
18313 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
18314 +          if missing(character_value) then do;
18315 +            numeric_value = round(numeric_value,&sp_precision);
18316 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
18317 +            origval = numeric_value;
18318 +          end;
18319 +          else do;
18320 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
18321 +            origchar = character_value;
18322 +          end;
18323 +          branch = branch + 1;
18324 +          output;
18326 +        end;
18327 +        else do;
18328 +          if missing(character_value) then do;
18329 +            numeric_value = round(numeric_value, &sp_precision);
18330 +            abovetext = ">= "||strip(NUMERIC_VALUE);
18331 +            origval = numeric_value;
18332 +          end;
18333 +          else do;
18334 +            abovetext = ">= "||strip(CHARACTER_VALUE);
18335 +            origval = character_value;
18336 +          end;
18337 +          branch = branch + 1;
18338 +          output;
18339 +        end;
18340 +      end;
18341 +    end;
18342 +    else do;
18343 +       if first.numeric_value then do;
18344 +         flag = 0;
18345 +         abovetext = strip(CHARACTER_VALUE);
18346 +         branch = numeric_value;
18347 +         if first.numeric_value AND last.numeric_value then do;
18348 +           output;
18349 +         end;
18350 +       end;
18351 +       else if last.numeric_value then do;
18352 +         if flag=0 then do;
18353 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18354 +           length = length(strip(tempstring));
18355 +           if length < 32 then do;
18356 +             abovetext = strip(tempstring);
18357 +           end;
18358 +           else do;
18359 +             abovetext = strip(abovetext)||", ...";
18360 +             flag = 1;
18361 +           end;
18362 +         end;
18363 +         branch = numeric_value;
18364 +         output;
18365 +       end;
18366 +       else do;
18367 +         if flag=0 then do;
18368 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
18369 +           length = length(strip(tempstring));
18370 +           if length < 32 then do;
18371 +             abovetext = strip(tempstring);
18372 +           end;
18373 +           else do;
18374 +             abovetext = strip(abovetext)||", ...";
18375 +             flag=1;
18376 +           end;
18377 +         end;
18378 +         branch = numeric_value;
18379 +       end;
18380 +    end;
18381 +    keep parent branch abovetext;
18382 +  run;
18384 +  /* MIssing value to abovetext */
18385 +  data tempmissing;
18386 +    set &EM_USER_OUTRULES;
18387 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
18388 +    rename node=parent numeric_value=branch character_value=misschar;
18389 +  run;
18392 +  proc sort data=abovetext; by parent branch; run;
18393 +  proc sort data=tempmissing; by parent branch; run;
18394 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
18396 +  data tempoutnodes;
18397 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
18398 +    by parent branch;
18399 +    length traintotal validtotal 8;
18400 +    retain traintotal validtotal;
18402 +    if _a then do;
18403 +      if ^MISSING(abovetext) then do;
18404 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
18405 +      end;
18406 +      else do;
18407 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
18408 +      end;
18409 +    end;
18410 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
18412 +    if node=1 then do;
18413 +      traintotal = N;
18414 +      validtotal=VN;
18415 +    end;
18417 +    drop role rank stat misschar belowtext;
18418 +  run;
18419 +  proc sort data=tempoutnodes; by node; run;
18420 +  proc sort data=belowtext; by node; run;
18422 +  data tempoutnodes;
18423 +    merge tempoutnodes belowtext;
18424 +    by node;
18426 +  run;
18428 +  /* determine if adjusted counts exists; if so, use these vs true counts */
18429 +  %let adjusted = N;
18430 +  %let npriors = 0;
18431 +  data _null_ ;
18432 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
18433 +    if eof then do ;
18434 +      call symput("npriors" , strip(put(_N_,best.))) ;
18435 +    end;
18436 +  run;
18437 +  %if &npriors gt 0 %then %let adjusted=Y;
18440 +  /* create a table with targetUsed and targetLevel columns for each node */
18441 +  data temptarmeta;
18442 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
18443 +    %if &multipleTar eq N %then %do;
18444 +      AND USE in ('D', 'Y')
18445 +    %end;
18446 +    ));
18447 +    length TARGET $32;
18448 +    Target=name;
18449 +    keep target level;
18450 +  run;
18452 +  %if &multipleTar eq Y %then %do;
18453 +    data temptargetused;
18454 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
18455 +      keep node target;
18456 +    run;
18457 +    proc sort data=temptargetused; by target; run;
18458 +    proc sort data=temptarmeta; by target; run;
18459 +    data temptargetused;
18460 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
18461 +      by target;
18462 +      if _a and _b;
18463 +    run;
18464 +  %end;
18465 +  %else %do;
18466 +    data temptargetused;
18467 +      set &EM_USER_OUTSTATS;
18468 +      length target $32 tarlevel $10;
18469 +      target="%EM_TARGET";
18470 +      tarlevel="%EM_TARGET_LEVEL";
18471 +      keep node target tarlevel;
18472 +    run;
18473 +    proc sort data=temptargetused nodupkey; by node; run;
18474 +  %end;
18476 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
18477 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
18478 +  proc sort data=temptargetused; by node; run;
18481 +  /* create tables for all interval targets as well as all class targets */
18482 +  data tempinterval tempclass;
18483 +    merge tempoutstats temptargetused( rename=(target=targetused));
18484 +    by node;
18485 +    %if "&multipleTar" eq "Y" %then %do;
18486 +      if ((missing(Target)) OR (target=targetused ));
18487 +    %end;
18489 +    if tarlevel="INTERVAL" then output tempinterval;
18490 +    else output tempclass;
18491 +  run;
18493 +  /* iniitalize intTarget and classTarget flags */
18494 +  %let em_intNobs =0;
18495 +  %let em_classNobs = 0;
18496 +  %let em_intTarget= N;
18497 +  %let em_classTarget= N;
18499 +  proc sql;
18500 +    reset noprint;
18501 +    select count(*) into :em_intNobs from tempinterval;
18502 +  quit;
18503 +  proc sql;
18504 +    reset noprint;
18505 +    select count(*) into :em_classNobs from tempclass;
18506 +  quit;
18508 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18509 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18511 +  /* retrieve all information for interval targets */
18512 +  %if &em_intTarget eq Y %then %do;
18514 +    /* determine if leaf variable exists */
18515 +    %let dsid=%sysfunc(open(tempinterval,i));
18516 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18517 +    %let rc=%sysfunc(close(&dsid));
18519 +    proc transpose data=tempinterval
18520 +      %if &leafexists %then %do;
18521 +        (drop=leaf)
18522 +      %end;
18523 +      %if &validexist %then %do;
18524 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18525 +      %end;
18526 +      %else %do;
18527 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18528 +      %end;
18529 +      by node;
18530 +      id statname;
18531 +    run;
18532 +    data tempinterval;
18533 +      set tempinterval;
18534 +      if missing(N) then delete;
18535 +    run;
18536 +  %end;
18538 +  /* retrieve all information for class targets */
18539 +  %if &em_classTarget eq Y %then %do;
18540 +    proc sort data=tempclass; by node category; run;
18541 +    %if &validflag eq N %then %do;
18542 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18543 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18544 +    %end;
18545 +    %else %do;
18546 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18547 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18548 +    %end;
18549 +      set tempclass;
18551 +      %if &validflag eq N %then %do;
18552 +        %if "&adjusted" eq "N" %then %do;
18553 +          if statname="N" then output tempn;
18554 +        %end;
18555 +        %else %do;
18556 +          if statname="NPRIORS" then output tempn;
18557 +        %end;
18558 +        else if statname="PREDICTION" then output temppredict;
18559 +        else if statname="PROBABILITY" then output tempprob;
18560 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18561 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18562 +      %end;
18563 +      %else %do;
18564 +        %if "&adjusted" eq "N" %then %do;
18565 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18566 +        %end;
18567 +        %else %do;
18568 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18569 +        %end;
18570 +        else if statname="PREDICTION" then output temppredict;
18571 +        else if statname="PROBABILITY" then output tempprob;
18572 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18573 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18574 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18575 +      %end;
18576 +    run;
18579 +    /* determine if profit/loss exists in tempprofit */
18580 +    %let em_profitflag=0;
18581 +    %let em_lossflag=0;
18582 +    proc sql;
18583 +      reset noprint;
18584 +      select count(*) into :em_profitflag from tempprofit;
18585 +    quit;
18586 +    proc sql;
18587 +      reset noprint;
18588 +      select count(*) into :em_lossflag from temploss;
18589 +    quit;
18591 +    %if &validFlag eq Y %then %do;
18592 +      proc transpose data=tempn
18593 +        %if "&adjusted" eq "N" %then %do;
18594 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18595 +        %end;
18596 +        %else %do;
18597 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18598 +        %end;
18599 +        by node;
18600 +        id statname;
18601 +      run;
18602 +      %if &em_profitflag ne 0 %then %do;
18603 +        proc transpose data=tempprofit out=tempprofit;
18604 +          by node category;
18605 +          id statname ;
18606 +        run;
18607 +      %end;
18608 +      %if &em_lossflag ne 0 %then %do;
18609 +        proc transpose data=temploss out=temploss;
18610 +          by node category;
18611 +          id statname ;
18612 +        run;
18613 +      %end;
18614 +      data tempprob;
18615 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18616 +        by node
18617 +        %if &multipleTar eq Y %then %do;
18618 +          target
18619 +        %end;
18620 +        category;
18621 +      run;
18622 +    %end;
18624 +    /* store percentcorrect value */
18625 +    data temppredict;
18626 +      merge tempprob temppredict(in=_a);
18627 +      by node category;
18628 +      if _a then do;
18629 +        percentCorrect = statvalue;
18630 +        %if &validFlag eq Y %then %do;
18631 +          vpercentCorrect= vstatvalue;
18632 +        %end;
18633 +      end;
18634 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18635 +      %if &validFlag eq Y %then %do;
18636 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18637 +      %end;
18638 +      ;
18639 +      if missing(percentCorrect) then delete;
18640 +      drop target;
18641 +    run;
18643 +    /* build profittext */
18644 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18645 +      data tempprofittext(keep= node profittext profitloss);
18646 +        length profittext $800 profitloss 8.;
18647 +        retain profittext profitloss;
18649 +        merge tempprob
18650 +        %if &em_profitflag ne 0 %then %do;
18651 +          tempprofit
18652 +        %end;
18653 +        %else %if &em_lossflag ne 0 %then %do;
18654 +          temploss
18655 +        %end;
18656 +        ;
18657 +        by node category;
18659 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18660 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18661 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18662 +          %let profittype = ALL;
18663 +        %end;
18665 +        /* create the profitloss variable for nodecolor if selected */
18666 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18668 +        %if "&profittype" eq "ALL" %then %do;
18669 +          if strip(CATEGORY)="&targetEvent" then do;
18670 +            profitloss=statvalue;
18671 +          end;
18672 +          if first.node then do;
18673 +            %if &validFlag eq N %then %do;
18674 +             %if &em_profitflag ne 0 %then %do;
18675 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18676 +             %end;
18677 +             %if &em_lossflag ne 0 %then %do;
18678 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18679 +             %end;
18680 +            %end;
18681 +            %else %do;
18682 +             %if &em_profitflag ne 0 %then %do;
18683 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18683!+;
18684 +             %end;
18685 +             %if &em_lossflag ne 0 %then %do;
18686 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18687 +             %end;
18688 +            %end;
18689 +          end;
18690 +          else if last.node then do;
18691 +            %if &validFlag eq N %then %do;
18692 +             %if &em_profitflag ne 0 %then %do;
18693 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18694 +             %end;
18695 +             %if &em_lossflag ne 0 %then %do;
18696 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18697 +             %end;
18698 +             /*if CATEGORY="&targetEvent" then do;
18699 +               profitloss=statvalue;
18700 +             end;*/
18701 +            %end;
18702 +            %else %do;
18703 +             %if &em_profitflag ne 0 %then %do;
18704 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18704!+14.&EM_PROPERTY_SPLITPRECISION);
18705 +                if CATEGORY="&targetEvent" then do;
18706 +                 profitloss=ALTERNATIVE_PROFIT;
18707 +                end;
18708 +             %end;
18709 +             %if &em_lossflag ne 0 %then %do;
18710 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18710!+14.&EM_PROPERTY_SPLITPRECISION);
18711 +                if CATEGORY="&targetEvent" then do;
18712 +                  profitloss=ALTERNATIVE_LOSS;
18713 +                end;
18714 +             %end;
18715 +            %end;
18716 +            output;
18717 +          end;
18718 +          else do;
18719 +            %if &validFlag eq N %then %do;
18720 +             %if &em_profitflag ne 0 %then %do;
18721 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18722 +             %end;
18723 +             %if &em_lossflag ne 0 %then %do;
18724 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18725 +             %end;
18726 +            %end;
18727 +            %else %do;
18728 +             %if &em_profitflag ne 0 %then %do;
18729 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18729!+14.&EM_PROPERTY_SPLITPRECISION);
18730 +             %end;
18731 +             %if &em_lossflag ne 0 %then %do;
18732 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18732!+14.&EM_PROPERTY_SPLITPRECISION);
18733 +             %end;
18734 +            %end;
18735 +          end;
18736 +        %end;
18737 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18738 +          if strip(CATEGORY) = "&targetevent" then do;
18739 +            %if &validFlag eq N %then %do;
18740 +             %if &em_profitflag ne 0 %then %do;
18741 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18742 +             %end;
18743 +             %if &em_lossflag ne 0 %then %do;
18744 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18745 +             %end;
18746 +             profitloss=statvalue;
18747 +            %end;
18748 +            %else %do;
18749 +             %if &em_profitflag ne 0 %then %do;
18750 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18750!+;
18751 +                profitloss=ALTERNATIVE_PROFIT;
18752 +             %end;
18753 +             %if &em_lossflag ne 0 %then %do;
18754 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18755 +                profitloss=ALTERNATIVE_LOSS;
18756 +             %end;
18757 +            %end;
18758 +            output;
18759 +          end;
18760 +        %end;
18761 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18762 +          if strip(CATEGORY) = "&targetevent" then do;
18763 +            %if &validFlag eq N %then %do;
18764 +             profitloss=statvalue;
18765 +            %end;
18766 +            %else %do;
18767 +             %if &em_profitflag ne 0 %then %do;
18768 +                profitloss=ALTERNATIVE_PROFIT;
18769 +             %end;
18770 +             %if &em_lossflag ne 0 %then %do;
18771 +                profitloss=ALTERNATIVE_LOSS;
18772 +             %end;
18773 +            %end;
18774 +            output;
18775 +          end;
18776 +        %end;
18777 +      run;
18778 +    %end;
18780 +    data tempprob(keep= node probtext);
18781 +      length probtext $800;
18782 +      retain probtext;
18783 +      set tempprob ;
18784 +      by node;
18786 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18787 +      %let probtype = &EM_PROPERTY_TARGET;
18788 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18789 +        %let probtype = ALL;
18790 +      %end;
18792 +      %if "&probtype" eq "ALL" %then %do;
18793 +        if first.node then do;
18794 +          %if &validFlag eq N %then %do;
18795 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18796 +          %end;
18797 +          %else %do;
18798 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18799 +          %end;
18800 +        end;
18801 +        else if last.node then do;
18802 +          %if &validFlag eq N %then %do;
18803 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18804 +          %end;
18805 +          %else %do;
18806 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18807 +          %end;
18808 +          output;
18809 +        end;
18810 +        else do;
18811 +          %if &validFlag eq N %then %do;
18812 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18813 +          %end;
18814 +          %else %do;
18815 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18816 +          %end;
18817 +        end;
18818 +      %end;
18819 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18820 +        if strip(CATEGORY) = "&targetevent" then do;
18821 +          %if &validFlag eq N %then %do;
18822 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18823 +          %end;
18824 +          %else %do;
18825 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18826 +          %end;
18827 +          output;
18828 +        end;
18829 +      %end;
18830 +      %else %if "&probtype" eq "NONE" %then %do;
18831 +        if last.node then do;
18832 +          output;
18833 +        end;
18834 +      %end;
18835 +    run;
18836 +  %end;
18838 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18840 +  %let oldexists=0;
18841 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18842 +     data old_tree_plot;
18843 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18844 +        rename nodecolor=oldnodecolor;
18845 +     run;
18847 +     proc sort data=old_tree_plot;
18848 +        by node;
18849 +     run;
18851 +     %let oldexists=1;
18852 +  %end;
18854 +  data &EM_USER_TREE_PLOT;
18855 +    length textall $800;
18856 +    merge tempoutnodes temptargetused
18858 +    %if &em_intTarget eq Y %then %do;
18859 +      tempinterval
18860 +    %end;
18862 +    %if &em_classTarget eq Y %then %do;
18864 +      %if &validFlag eq N %then %do;
18865 +        tempn(rename=(statvalue=N))
18866 +      %end;
18867 +      %else %do;
18868 +        tempn
18869 +      %end;
18871 +      temppredict tempprob
18873 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18874 +        tempprofittext
18875 +      %end;
18876 +    %end;
18877 +    ;
18878 +    by node;
18880 +    /* build nodetext based on user selection */
18881 +    textall="";
18883 +    %if &em_intTarget eq Y %then %do;
18884 +    if tarlevel="INTERVAL" then do;
18885 +      /* Nodeid */
18886 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18887 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18888 +      %end;
18890 +      /* Target identifier if multiple targets are used */
18891 +      %if "&multipleTar" eq "Y" %then %do;
18892 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18893 +      %end;
18895 +      %if &validFlag eq Y %then %do;
18896 +         /* Column labels displayed in validflag eq Y only */
18897 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18898 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18898!+noquote ))";
18899 +         %end;
18901 +         /* Average values */
18902 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18903 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18904 +         %end;
18906 +         /* RASE */
18907 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18908 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18909 +         %end;
18911 +         /* Count */
18912 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18913 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18914 +         %end;
18915 +      %end;
18916 +      %else %do;
18917 +         /* Average values */
18918 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18919 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18920 +         %end;
18922 +         /* RASE */
18923 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18924 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18925 +         %end;
18927 +         /* Count */
18928 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18929 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18930 +         %end;
18931 +      %end;
18933 +      /* nodecolor */
18934 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18935 +        nodecolor=PREDICTION;
18936 +      %end;
18937 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18938 +        nodecolor=RASE;
18939 +      %end;
18940 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18941 +        nodecolor=1;
18942 +      %end;
18944 +    end;
18945 +    %end;
18946 +    %if &em_classTarget eq Y %then %do;
18947 +    if tarlevel^="INTERVAL" then  do;
18949 +      /* Nodeid */
18950 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18951 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18952 +      %end;
18953 +      /* Target identifier if multiple targets are used */
18954 +      %if "&multipleTar" eq "Y" %then %do;
18955 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18956 +      %end;
18958 +      /* Predicted values */
18959 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18960 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18961 +      %end;
18963 +      /* Column labels displayed in validflag eq Y only */
18964 +      %if "&ValidFlag" eq "Y" %then %do;
18965 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18966 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18966!+noquote ))";
18967 +        %end;
18968 +      %end;
18970 +      /* Target Values */
18971 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18972 +        textall=strip(textall)||"0A"x||strip(probtext);
18973 +      %end;
18975 +      /* include profit or loss for all target levels */
18976 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18977 +        textall=strip(textall)||"0A"x||strip(profittext);
18978 +      %end;
18980 +      %if &validFlag eq N %then %do;
18981 +        /* Percent Correct */
18982 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18983 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18984 +        %end;
18986 +         /* Count */
18987 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18988 +          %if "&adjusted" eq "N" %then %do;
18989 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18990 +          %end;
18991 +          %else %do;
18992 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18993 +          %end;
18994 +         %end;
18995 +      %end;
18996 +      %else %do;
18997 +        /* Percent Correct */
18998 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18999 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
19000 +        %end;
19002 +         /* Count */
19003 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
19004 +          %if "&adjusted" eq "N" %then %do;
19005 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
19006 +          %end;
19007 +          %else %do;
19008 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
19009 +          %end;
19010 +         %end;
19011 +      %end;
19013 +      /* nodecolor */
19014 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
19015 +       %if &multipleTar ne Y %then %do;
19016 +        nodecolor=&predTarget;
19017 +       %end;
19018 +       %else %do;
19019 +         nodecolor=percentcorrect;
19020 +       %end;
19021 +      %end;
19022 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
19023 +        nodecolor=percentcorrect;
19024 +      %end;
19025 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
19026 +        nodecolor=1;
19027 +      %end;
19028 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
19029 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
19030 +          nodecolor=percentcorrect;
19031 +        %end;
19032 +        %else %do;
19033 +          nodecolor=profitloss;
19034 +        %end;
19035 +      %end;
19037 +    end;
19038 +    %end;
19039 +    %if &em_intTarget eq Y %then %do;
19040 +     drop  PREDICTION  TARGET TARLEVEL
19041 +     %if &ValidFlag eq Y %then %do;
19042 +         VPREDICTION
19043 +     %end;
19044 +     ;
19045 +    %end;
19046 +    %if &em_classTarget eq Y %then %do;
19047 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
19048 +     %if &ValidFlag eq Y %then %do;
19049 +         VSTATVALUE
19050 +     %end;
19051 +     ;
19052 +    %end;
19054 +  run;
19056 +  /* add leaf index information to plotds - based on primary target only*/
19057 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19058 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19059 +      set &EM_USER_OUTSTATS;
19060 +      if ((statname="PROBABILITY"
19061 +      %if &validexist %then %do;
19062 +       or statname="VALID: PROBABILITY"
19063 +      %end;
19064 +      ) AND (CATEGORY="&TARGETEVENT")
19065 +      %if "&multipleTar" eq "Y" %then %do;
19066 +        AND (Target="%EM_TARGET")
19067 +      %end;
19068 +      );
19069 +    run;
19071 +    %if &validexist %then %do;
19072 +      proc sort data=tempprob; by node; run;
19073 +      %let vpredTarget = V%substr(&predTarget, 2);
19074 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
19075 +         by node;
19076 +         id statname;
19077 +      run;
19078 +    %end;
19079 +  %end;
19080 +  %else %do;
19081 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
19082 +      set &EM_USER_OUTSTATS;
19083 +      if ((statname="PREDICTION"
19084 +      %if &validexist %then %do;
19085 +       or statname="VALID: PREDICTION"
19086 +      %end;
19087 +      )
19088 +      %if "&multipleTar" eq "Y" %then %do;
19089 +        AND (Target="%EM_TARGET")
19090 +      %end;
19091 +      );
19092 +    run;
19093 +    %if &validexist %then %do;
19094 +      proc sort data=tempprob; by node; run;
19095 +      %let vpredTarget = V%substr(&predTarget, 2);
19096 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
19097 +         by node;
19098 +         id statname;
19099 +      run;
19100 +    %end;
19101 +  %end;
19103 +  proc sort data=tempprob; by node; run;
19104 +  data tempoutnodes;
19105 +    merge tempoutnodes tempprob;
19106 +    by node;
19107 +  run;
19109 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
19110 +  data tempnodes;
19111 +    retain traintotal validtotal;
19112 +    set tempnodes(where=(leaf ne . ));
19113 +    tprob=round(&predTarget, .01);
19114 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19115 +      percevent_train=round(tprob*100, .01);
19116 +    %end;
19117 +    %else %do;
19118 +      percevent_train=tprob;
19119 +    %end;
19121 +    perc_train=round((n/traintotal)*100, 0.01);
19122 +    /* leafwidth already has a *10 multiplier */
19123 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
19125 +    %if &validexist %then %do;
19126 +      %let vpredTarget = V%substr(&predTarget,2);
19127 +      vprob=round(&vpredTarget, .01);
19128 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19129 +        percevent_valid=round(vprob*100, .01);
19130 +      %end;
19131 +      %else %do;
19132 +        percevent_valid=vprob;
19133 +      %end;
19134 +      perc_valid=round((vn/validtotal)*100, .01);
19135 +    %end;
19137 +    index=_N_;
19138 +    keep node index tprob perc_train percevent_train
19139 +    %if &validexist %then %do;
19140 +        vprob percevent_valid perc_valid
19141 +    %end;
19142 +    ;
19143 +  run;
19144 +  proc sort data=tempnodes; by node; run;
19145 +  data &EM_USER_TREE_PLOT;
19146 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
19147 +    by node;
19148 +    if missing(node) then delete;
19149 +    %if &oldexists %then %do;
19150 +      if missing(nodecolor) then nodecolor=oldnodecolor;
19151 +      drop oldnodecolor;
19152 +    %end;
19153 +    abovetext = compbl(abovetext);
19155 +    /* add variable labels */
19156 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
19157 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
19158 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
19159 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
19160 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
19161 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
19163 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19164 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
19165 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
19166 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19167 +          %end;
19168 +          %else %do;
19169 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
19170 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
19171 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
19172 +          %end;
19173 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
19175 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
19176 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
19177 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19178 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
19179 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19180 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
19181 +          %end;
19182 +          %else %do;
19183 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
19184 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
19185 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
19186 +          %end;
19187 +    ;
19188 +  run;
19190 +  /* delete temporary tables */
19191 +  proc datasets lib=work nolist;
19192 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
19193 +  run;
19195 +%mend em_tree_makePlotDs;
19199 +%macro em_tree_report;
19201 +   /* report properties */
19202 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
19203 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
19204 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
19205 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
19206 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
19207 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
19208 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
19209 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
19210 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
19211 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
19212 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
19213 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
19214 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
19216 +   %let validexist=0;
19217 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
19218 +     %let validexist=1;
19219 +   %end;
19221 +   /* determine if multiple targets will be processed */
19222 +   %let em_tree_multipleTargets=N;
19223 +   %let em_tree_numTarget=1;
19224 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
19225 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
19226 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
19227 +         %let em_tree_multipleTargets=N;
19228 +      %end;
19229 +      %else %do;
19230 +        data _null_;
19231 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
19232 +          if eof then
19233 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
19234 +        run;
19236 +        %if &em_tree_numTarget gt 1 %then %do;
19237 +           %let em_tree_multipleTargets=Y;
19238 +        %end;
19239 +     %end;
19240 +   %end;
19242 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
19244 +   /* variable importance */
19245 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
19246 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
19248 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
19249 +     /* and the columns may not be generated                                                                                 */
19250 +     %let em_tree_cvexists=;
19251 +     %let em_tree_surrexists=.;
19252 +     data _null_;
19253 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
19254 +       if eof then do ;
19255 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
19256 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
19257 +       end;
19258 +     run;
19260 +     data &EM_USER_OUTIMPORT;
19261 +         set &EM_USER_OUTIMPORT;
19262 +         /* format columns based on Precison value specified */
19263 +         format importance 15.&EM_PROPERTY_PRECISION
19264 +              %if &validexist %then %do;
19265 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
19266 +              %end;
19267 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
19268 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
19269 +              %end;
19270 +         ;
19271 +     run;
19273 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
19274 +     proc print data=&EM_USER_OUTIMPORT
19275 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
19276 +          (where=((nrules>0) OR (nsurrogates>0)))
19277 +        %end;
19278 +        %else %do;
19279 +           (where=(nrules>0))
19280 +        %end;
19281 +        label noobs
19282 +        ;
19283 +     run;
19284 +     title10;
19286 +   %end;
19288 +   /* Sequence */
19289 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
19290 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
19291 +   data _null_ ;
19292 +      set &EM_USER_outseq (obs=2) end=eof ;
19293 +      if eof then do ;
19294 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
19295 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
19296 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
19297 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
19298 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
19299 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
19300 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
19301 +      end;
19302 +    run;
19304 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
19305 +      data &EM_USER_OUTSEQ;
19306 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
19307 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
19308 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19309 +           _XMISC_=_VMISC_
19310 +        %end;
19311 +        %if "&em_tree_aprof" ne "."  %then %do;
19312 +           _XAPROF_=_VAPROF_
19313 +           _XPROF_ = _VPROF_
19314 +        %end;
19315 +        %if "&em_tree_aloss" ne "."  %then %do;
19316 +           _XALOSS_=_VALOSS_
19317 +        %end;
19318 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
19319 +           _XPASE_ = _VPASE_
19320 +           _XPMISC_ = _VPMISC_
19321 +        %end;
19323 +        ));
19324 +     %end;
19325 +     %else %do;
19326 +        set &EM_USER_OUTSEQ;
19327 +     %end;
19329 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
19330 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19331 +            _MISC_   15.&EM_PROPERTY_PRECISION
19332 +         %end;
19333 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
19334 +            _PASE_  15.&EM_PROPERTY_PRECISION
19335 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
19336 +         %end;
19337 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
19338 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
19339 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19340 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19341 +            %end;
19342 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
19343 +              _VPASE_  15.&EM_PROPERTY_PRECISION
19344 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
19345 +            %end;
19346 +         %end;
19347 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
19348 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
19349 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19350 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
19351 +            %end;
19352 +         %end;
19353 +         %if "&em_tree_seq" ne "." %then %do;
19354 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
19355 +         %end;
19356 +         %if "&em_tree_vseq" ne "." %then %do;
19357 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
19358 +         %end;
19359 +         %if "&em_tree_aprof" ne "." %then %do;
19360 +           _APROF_ 15.&EM_PROPERTY_PRECISION
19361 +           _PROF_ 15.&EM_PROPERTY_PRECISION
19362 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19363 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
19364 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
19365 +           %end;
19366 +         %end;
19367 +         %else %if "&em_tree_aloss" ne "." %then %do;
19368 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
19369 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
19370 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
19371 +           %end;
19372 +         %end;
19373 +      ;
19374 +    run;
19375 +   %end;
19377 +   /* Observation Based Importance */
19378 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
19380 +      /* need to check for 0 obs */
19381 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
19382 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
19383 +      %let rc=%sysfunc(close(&dsid));
19385 +      %if &onobs %then %do;
19386 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
19387 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
19389 +         data &EM_USER_OUTOBSIMP;
19390 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
19391 +           if _a;
19392 +           by _INPUT1_;
19393 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
19394 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
19395 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
19396 +                   %end;
19397 +                   ;
19398 +         run;
19399 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
19400 +      %end;
19401 +   %end;
19403 +  %end;
19405 +  /* create dataset to support tree diagram and icicle plot */
19406 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
19407 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
19409 +  /* display tree diagram */
19410 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
19411 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
19413 +  /* display icicle diagram */
19414 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
19415 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
19417 +  /* Leaf Statistics Plot */
19418 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
19420 +  /* print leaf information to output window */
19421 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
19423 +     proc sort data=&EM_USER_TREE_PLOT out=t;
19424 +       by descending N;
19425 +     run;
19427 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
19428 +     %local vn;
19429 +     data _null_;
19430 +       set t (obs=2) end=eof;
19431 +       if eof then do;
19432 +         call symput("vn", strip(put(vn, best.)));
19433 +       end;
19434 +     run;
19436 +     data t;
19437 +       set t;
19438 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
19439 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
19440 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19441 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
19442 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
19443 +       %end;
19444 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19445 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
19446 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
19447 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
19448 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
19449 +          %end;
19450 +       %end;
19451 +       ;
19452 +     run;
19454 +     /* determine if rase is found in t */
19455 +    %let dsid=%sysfunc(open(t,i));
19456 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
19457 +    %let rc=%sysfunc(close(&dsid));
19459 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
19460 +     proc print data=t noobs label;
19461 +       where tprob ne .;
19462 +       var node depth N tprob
19463 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
19464 +         %if "&vn" ne "." %then %do;
19465 +           VN
19466 +         %end;
19467 +         vprob
19468 +       %end;
19469 +       %if &raseexists %then %do;
19470 +            RASE
19471 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
19472 +              VRASE
19473 +            %end;
19474 +       %end;
19475 +       ;
19476 +     run;
19477 +     title10;
19478 +  %end;
19480 +  /* create plots that are done during training of node */
19481 +  /* display iterative plot, including reference line */
19482 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19483 +   /* %if &nleaves eq  %then %do; */
19484 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19485 +      data _null_;
19486 +        set &EM_USER_OUTTOPOLOGY end=eof;
19487 +        if eof then do;
19488 +          call symput('nleaves', LEAF);
19489 +        end;
19490 +      run;
19491 +   /* %end; */
19493 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19494 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19495 +  %end;
19497 +  /* display leaf statistics */
19498 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19500 +  /* stats by node if multiple targets = Y */
19501 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19502 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19503 +    data &EM_USER_OUTSTATS;
19504 +      set &EM_USER_OUTSTATS;
19506 +     * if STATNAME="TARGET" then delete;
19507 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19508 +      drop leaf;
19509 +    run;
19510 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19512 +  %end;
19513 +  %else %do;
19514 +    /* add outstats and outdescribe to spk but not results */
19515 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19516 +  %end;
19518 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS3.TREE2_OUTIMPORT.
NOTE: The data set EMWS3.TREE2_OUTIMPORT has 7 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS3.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS3.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 16 observations read from the data set EMWS3.TREE2_OUTSEQ.
NOTE: The data set EMWS3.TREE2_OUTSEQ has 16 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE _TYPE_='TARGET';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_REP_UPDOWNIND_DM.
      WHERE (_TYPE_='PREDICTED') and (LEVEL='UP');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set EMWS3.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      172:103   221:136   264:102   264:125   296:104   330:104   372:103   372:126   415:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      431:99
NOTE: There were 13 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 268 observations read from the data set EMWS3.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 26 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 13 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS3.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 27 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 26 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 28 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 13 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS3.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 243 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 243 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 243 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 216 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 243 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 243 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 243 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 0 observations and 7 variables.
NOTE: The data set WORK.TEMPCLASS has 243 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 243 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPCLASS has 243 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
WARNING: The variable TARGET in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 243 observations read from the data set WORK.TEMPCLASS.
NOTE: The data set WORK.TEMPN has 54 observations and 3 variables.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 2 variables.
NOTE: The data set WORK.TEMPPROB has 81 observations and 3 variables.
NOTE: The data set WORK.TEMPVPROB has 81 observations and 3 variables.
NOTE: The data set WORK.TEMPPROFIT has 0 observations and 4 variables.
NOTE: The data set WORK.TEMPLOSS has 0 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPN.
NOTE: The data set WORK.TEMPN has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 81 observations read from the data set WORK.TEMPPROB.
NOTE: There were 81 observations read from the data set WORK.TEMPVPROB.
NOTE: The data set WORK.TEMPPROB has 81 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
WARNING: The variable target in the DROP, KEEP, or RENAME list has never been referenced.
NOTE: There were 81 observations read from the data set WORK.TEMPPROB.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: The data set WORK.TEMPPREDICT has 27 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 81 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      1141:196
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 27 observations read from the data set WORK.TEMPN.
NOTE: There were 27 observations read from the data set WORK.TEMPPREDICT.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set EMWS3.TREE2_TREE_PLOT has 27 observations and 33 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 243 observations read from the data set EMWS3.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 54 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 54 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 27 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 27 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 27 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 27 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 14 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS3.TREE2_TREE_PLOT.
NOTE: There were 14 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS3.TREE2_TREE_PLOT has 27 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 27 observations read from the data set EMWS3.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 27 observations and 40 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 27 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 27 observations and 40 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      306:141
NOTE: There were 27 observations read from the data set EMWS3.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
19519
19520  *------------------------------------------------------------*;
19521  * End REPORT: Tree2;
19522  *------------------------------------------------------------*;
 
19523  /* Reset EM Options */
19524  options formchar="|----|+|---+=|-/\<>*";
19525  options nocenter ls=256 ps=10000;
19526  goptions reset=all device=GIF NODISPLAY;
 
19527  proc sort data=WORK.EM_USER_REPORT;
19528  by ID VIEW;
19529  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19530  proc sort data=EMWS3.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19531  by NAME;
19532  run;
 
NOTE: There were 23 observations read from the data set EMWS3.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 23 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19533  proc sort data=EMWS3.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19534  by NAME;
19535  run;
 
NOTE: There were 23 observations read from the data set EMWS3.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 23 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19536  data WORK.ASSESS_META;
19537  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19538  by NAME;
19539  run;
 
NOTE: There were 23 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 23 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 23 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19540  data EM_temp_assessMeta;
19541  set EMWS3.Tree2_CMeta_TRAIN;
19542  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19543  run;
 
NOTE: There were 16 observations read from the data set EMWS3.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
19544  data EM_temp_assessdata;
19545  set EMWS3.Tree2_TRAIN(keep=
19546  F_REP_updownInd
19547  I_REP_updownInd
19548  P_REP_updownInddown
19549  P_REP_updownIndunchange
19550  P_REP_updownIndup
19551  Q_REP_updownInddown
19552  Q_REP_updownIndunchange
19553  Q_REP_updownIndup
19554  R_REP_updownInddown
19555  R_REP_updownIndunchange
19556  R_REP_updownIndup
19557  U_REP_updownInd
19558  V_REP_updownInddown
19559  V_REP_updownIndunchange
19560  V_REP_updownIndup
19561  _WARN_
19562  REP_updownInd
19563  );
19564  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 1250 observations read from the data set EMWS3.PART_TRAIN.
NOTE: There were 1250 observations read from the data set EMWS3.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1250 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
23849   data EM_temp_assessMeta;
23850   set EMWS3.Tree2_CMeta_TRAIN;
23851   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23852   run;
 
NOTE: There were 16 observations read from the data set EMWS3.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 16 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
23853   data EM_temp_assessdata;
23854   set EMWS3.Tree2_VALIDATE(keep=
23855   F_REP_updownInd
23856   I_REP_updownInd
23857   P_REP_updownInddown
23858   P_REP_updownIndunchange
23859   P_REP_updownIndup
23860   Q_REP_updownInddown
23861   Q_REP_updownIndunchange
23862   Q_REP_updownIndup
23863   R_REP_updownInddown
23864   R_REP_updownIndunchange
23865   R_REP_updownIndup
23866   U_REP_updownInd
23867   V_REP_updownInddown
23868   V_REP_updownIndunchange
23869   V_REP_updownIndup
23870   _WARN_
23871   REP_updownInd
23872   );
23873   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS3.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
NOTE: There were 1251 observations read from the data set EMWS3.PART_VALIDATE.
NOTE: There were 1251 observations read from the data set EMWS3.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1251 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
28167   %let _cn = %sysfunc(getoption(CENTER));
28168   options nocenter;
28169   proc print data=EMWS3.Tree2_EMREPORTFIT noobs label;
28170   var STAT LABEL TRAIN
28171   VALIDATE
28172   ;
28173   by TARGET TARGETLABEL;
28174   title9 ' ';
28175   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
28176   run;
 
NOTE: There were 8 observations read from the data set EMWS3.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
28177   title10;
28178   options &_cn;
 
28179   proc sort data=EMWS3.Tree2_EMCLASSIFICATION nothreads;
28180   by DATAROLE TARGET TARGETLABEL;
28181   run;
 
NOTE: There were 18 observations read from the data set EMWS3.TREE2_EMCLASSIFICATION.
NOTE: The data set EMWS3.TREE2_EMCLASSIFICATION has 18 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28182   %let _cn = %sysfunc(getoption(CENTER));
28183   options nocenter;
28184   proc print data=EMWS3.Tree2_EMCLASSIFICATION noobs label;
28185   var from into pct_row pct_col count percent
28186   ;
28187   by DATAROLE TARGET TARGETLABEL;
28188   label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
28189   label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
28190   label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
28191   label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
28192   label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
28193   label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
28194   where _TYPE_='PREDICTION';
28195   title9 ' ';
28196   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
28197   run;
 
NOTE: There were 18 observations read from the data set EMWS3.TREE2_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 7.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
28198   title9;
28199   title10;
28200   options &_cn;
 
28201   %let _cn = %sysfunc(getoption(CENTER));
28202   options nocenter;
28203   data EMWS3.Tree2_EMEVENTREPORT;
28204   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT TRUEEVENT
28204 !  8;
28205   label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
28205 ! TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
28205 ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
28205 ! FALSEEVENT
28206   = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
28206 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
28206 ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
28207      "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
28208   FALSEEVENT=0;
28209   FALSENEVENT=0;
28210   TRUEEVENT=0;
28211   TRUENEVENT=0;
28212   set EMWS3.Tree2_EMEVENTREPORT;
28213   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE2_EMEVENTREPORT.
NOTE: The data set EMWS3.TREE2_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
28214   proc print data=EMWS3.Tree2_EMEVENTREPORT noobs label;
28215   title9 ' ';
28216   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
28217   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
28218   run;
 
NOTE: There were 2 observations read from the data set EMWS3.TREE2_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 8.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28219   title10;
28220   options &_cn;
 
28221   proc datasets library=EMWS3 nolist;
28222   modify Tree2_EMRANK;
28223   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
28224   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28225   run;
 
NOTE: MODIFY was successful for EMWS3.TREE2_EMRANK.DATA.
28226   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
28227   %let _cn = %sysfunc(getoption(CENTER));
28228   options nocenter;
28229   proc print data=EMWS3.Tree2_EMRANK label noobs;
28230   var
28231   decile gain lift liftc resp respc N _meanP_;
28232   by
28233   notsorted DATAROLE
28234   notsorted TARGET
28235   notsorted TARGETLABEL
28236   ;
28237   title9 ' ';
28238   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
28239   run;
 
NOTE: There were 40 observations read from the data set EMWS3.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 9.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
28240   title10;
28241   options &_cn;
 
28242   proc datasets library=EMWS3 nolist;
28243   modify Tree2_EMSCOREDIST;
28244   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
28245   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
28246   run;
 
NOTE: MODIFY was successful for EMWS3.TREE2_EMSCOREDIST.DATA.
28247   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
