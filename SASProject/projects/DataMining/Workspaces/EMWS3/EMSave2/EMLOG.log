*------------------------------------------------------------*
User:                QR
Date:                May 17, 2019
Time:                00:53:32
Site:                12601940
Platform:            W32_7PRO
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                May 17, 2019
Time:                00:53:28
*------------------------------------------------------------*
14715  proc freq data=EMWS3.EMSave2_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.EMSave2META;
14717  run;
 
NOTE: There were 7 observations read from the data set EMWS3.EMSAVE2_VARIABLESET.
NOTE: The data set WORK.EMSAVE2META has 1 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
 
14718  proc print data=WORK.EMSave2META label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 1 observations read from the data set WORK.EMSAVE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
14724  title10;
 
14725  %let EMEXCEPTIONSTRING=;
15031  *------------------------------------------------------------*;
15032  * EMSave2: Generation of macros and macro variables;
15033  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15034  *------------------------------------------------------------*;
 
15035  %let EMEXCEPTIONSTRING=;
15036  *------------------------------------------------------------*;
15037  * TRAIN: EMSave2;
15038  *------------------------------------------------------------*;
15039  %let EM_ACTION = TRAIN;
15040  %let syscc = 0;
15041  *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
15042
15043  %macro EM_SAVEXT_MAIN;
15044
15045     %if %upcase("&EM_ACTION") = "CREATE" %then %do;
15046         filename _create catalog 'sashelp.emutil.savext_create.source';
15047         %include _create;
15048         filename _create;
15049         %EM_SAVEXT_CREATE;
15050     %end;
15051     %else
15052     %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
15053         filename _train catalog 'sashelp.emutil.savext_train.source';
15054         %include _train;
15055         filename _train;
15056         %EM_SAVEXT_TRAIN;
15057     %end;
15058
15059  %mend EM_SAVEXT_MAIN;
15060
15061  %EM_SAVEXT_MAIN;
NOTE: %INCLUDE (level 1) file _TRAIN is file SASHELP.EMUTIL.SAVEXT_TRAIN.SOURCE.
15062 +*** TRAINING MACRO FOR EM_SAVEXT EXTENSION NODE;
15064 +%macro EM_SAVEXT_TRAIN;
15066 +    *** IMPORT UTILITY MACROS;
15068 +    filename _savutil catalog 'sashelp.emutil.savext_macros.source';
15069 +    %include _savutil;
15070 +    filename _savutil;
15072 +    *** CHECK FOR IMPORT DATA SOURCES WITHOUT READING PROJECT SETS ************;
15073 +    *** POPULATE MACRO ARRAY TO HOLD ONLY EXISTING AND REQUESTED PARTITIONS ***;
15074 +    *** GET NUMBER OF EXISTING AND REQUESTED PARTITIONS ***********************;
15076 +    data _null_;
15077 +        length _save_set $50 _save_role $20 _save_set_index $12 _save_role_index $14 _i 3;
15078 +        _i=0;
15080 +        *** TRAIN;
15081 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_DATA) and (("&EM_PROPERTY_TRAIN"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15082 +            _i=_i+1;                                                        /* INCREMENT ARRAY INDEX */
15083 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_DATA, TRAIN, _i);                /* INSERT INTO MACRO ARRAY */
15084 +        %end;
15086 +        *** VALIDATE;
15087 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_VALIDATE) and (("&EM_PROPERTY_VALIDATE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15088 +            _i=_i+1;
15089 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_VALIDATE, VALIDATE, _i);
15090 +        %end;
15092 +        *** TEST;
15093 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TEST) and (("&EM_PROPERTY_TEST"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15094 +            _i=_i+1;
15095 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TEST, TEST, _i);
15096 +        %end;
15098 +        *** SCORE;
15099 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_SCORE) and (("&EM_PROPERTY_SCORE"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15100 +            _i=_i+1;
15101 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_SCORE, SCORE, _i);
15102 +        %end;
15104 +        *** TRANSACTION;
15105 +        %if (%EM_SAVEXT_SET_EXISTS(&EM_IMPORT_TRANSACTION) and (("&EM_PROPERTY_TRANSACTION"="Y") or ("&EM_PROPERTY_ALLROLES"="Y"))) %then %do;
15106 +            _i=_i+1;
15107 +            %EM_SAVEXT_REGISTER(&EM_IMPORT_TRANSACTION, TRANSACTION, _i);
15108 +        %end;
15110 +        *** ESTABLISH NUMBER OF SETS TO SAVE;
15111 +        call symput('_NUM_SAVE_SETS', strip(put(_i,1.)));
15113 +    run;
15115 +    *** EXIT IF NO PARTITIONS TO SAVE;
15117 +    %if ^(&_NUM_SAVE_SETS) %then %do;
15118 +        %put &EM_CODEBAR;
15119 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nodata_warn, NOQUOTE));
15120 +        %put &WARNING;
15121 +        %put &EM_CODEBAR;
15122 +        %goto quit;
15123 +    %end;
15125 +    *** FOR FILE PREFIXES CONTAINING PROBLEMATIC CHARACTERS;
15126 +    *** REVERT TO DEFAULT NAME;
15128 +    %if ^(%nrbquote(%sysfunc(compress("&EM_PROPERTY_NAME")))="") %then %do;
15129 +        %let _BAD_CHARS= <>:%str(%")%str(%')/\|?* %nrstr(&)%nrstr(%%);
15130 +        %let _BAD_CHAR_FLAG= 0;
15131 +        %do _i= 1 %to %length(%nrbquote(&_BAD_CHARS));
15132 +            %if %index(%nrbquote(&EM_PROPERTY_NAME), %nrbquote(%substr(%nrbquote(&_BAD_CHARS), &_i, 1)))
15133 +                %then %let _BAD_CHAR_FLAG= 1;
15134 +        %end;
15135 +        %if %sysfunc(kcount(%nrbquote(&EM_PROPERTY_NAME))) %then %let _BAD_CHAR_FLAG= 1;
15137 +        %if &_BAD_CHAR_FLAG %then %do;
15138 +           %put &EM_CODEBAR;
15139 +           %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_bad_char_err, NOQUOTE));
15140 +           %put &WARNING;
15141 +           %put &EM_CODEBAR;
15142 +           *** REVERT TO DEFAULT NAME;
15143 +           %let EM_PROPERTY_NAME = em_save;
15144 +        %end;
15145 +    %end;
15146 +    *** ACCOUNT FOR LIB ISSUES;
15148 +    %if (%upcase(%sysfunc(compress("&EM_PROPERTY_LIB"))) = "WORK") %then %do;
15149 +        %put &EM_CODEBAR;
15150 +        %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_work_lib_warn, NOQUOTE));
15151 +        %put &WARNING;                                                      /* WORK IS A TEMPORARY LIBRARY */
15152 +        %put &EM_CODEBAR;                                                   /* IT DISAPPEARS AFTER THE FLOW COMPLETES ALONG WITH DATA SAVED THERE */
15153 +    %end;
15156 +    %if (%sysfunc(compress("&EM_PROPERTY_LIB")) = "") %then %do;            /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
15157 +        libname _em_save "%nrbquote(&EM_NODEDIR)";                          /* AND IN OTHERS AS "" */
15158 +        %let EM_PROPERTY_LIB = _em_save;
15159 +    %end;
15161 +    *** CHECK FOR EXISTING LIB;
15163 +    %let _rc = %sysfunc(libref(&EM_PROPERTY_LIB));
15164 +    %if &_rc %then %do;
15165 +        %let EMEXCEPTIONSTRING=exception.server.DATASOURCE.LIBRARY.NOTASSIGNED,&EM_PROPERTY_LIB;
15166 +        %put &EM_CODEBAR;
15167 +        %let ERROR1 = %sysfunc(sasmsg(sashelp.dmine, DATASOURCE.LIBRARY.NOTASSIGNED_ERR, NOQUOTE, &EM_PROPERTY_LIB));
15168 +        %put &ERROR1;
15169 +        %put &EM_CODEBAR;
15170 +        %goto quit;
15171 +    %end;
15173 +    *** ACCOUNT FOR DEFAULT NAME;                                           /* IN SOME CASES THIS IS BEING INITIALIZED AS " " */
15174 +                                                                            /* AND IN OTHERS AS "" */
15175 +    %if (%sysfunc(compress("&EM_PROPERTY_NAME"))="") %then %let EM_PROPERTY_NAME = em_save;
15177 +    *** CALL UTILITY MACROS TO SAVE SETS *************************************;
15179 +    %if ("&EM_PROPERTY_TYPE"="SAS7BDAT") %then %do;                         /* OUTPUT SAS DATA SET */
15180 +        %do _i=1 %to &_num_save_sets;
15181 +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);           /* GET EXACT INPUT VARS FOR EACH INPUT SET */
15182 +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;                     /* IF NO VARIABLES WERE SELECTED CONTINUE TO NEXT PARTITION */
15183 +                %put &EM_CODEBAR;                                           /* REALLY ONLY MATTERS FOR TRANSACTION DATA - OTHERWISE ALL PARTITIONS WILL HAVE SAME NUMBER OF VARS */
15184 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
15185 +                %put &WARNING;
15186 +                %put &EM_CODEBAR;
15187 +                %goto continue_sas_loop;
15188 +            %end;
15189 +            %EM_SAVEXT_SAS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);                /* CYCLE THROUGH SETS TO SAVE */
15190 +            %continue_sas_loop:
15191 +        %end;
15192 +    %end;
15193 +    %else %do;                                                              /* OUTPUT JMP, EXCEL 2007, CSV OR TAB TABLE */
15194 +        %do _i=1 %to &_num_save_sets;
15195 +            %EM_SAVEXT_GET_VARS(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
15196 +            %if ("&EM_NUM_SAVEXT_VARS"= "0") %then %do;
15197 +                %put &EM_CODEBAR;
15198 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_novars_warn, NOQUOTE, &EM_NUM_SAVEXT_VARS));
15199 +                %put &WARNING;
15200 +                %put &EM_CODEBAR;
15201 +                %goto continue_pxpt_loop;
15202 +            %end;
15203 +            %EM_SAVEXT_PXPT(&&_SAVE_ROLE&_i, &&_SAVE_SET&_i);
15204 +            %continue_pxpt_loop:
15205 +        %end;
15206 +    %end;
15208 +    *** OUTPUT ****************************************************************;
15210 +    %if %sysfunc(exist(_save_output_temp)) %then %do;
15212 +        %EM_GETNAME(key=SAVEOUT, type=DATA);
15214 +        *** SAVE OUTPUT DATA TO PROJECT;
15216 +        data &EM_USER_SAVEOUT;
15217 +            set _save_output_temp;
15218 +            label
15219 +                nobs="%sysfunc(sasmsg(sashelp.dmine, save_numobs_vlabel, NOQUOTE))"
15220 +                outnobs="%sysfunc(sasmsg(sashelp.dmine, save_numoutobs_vlabel, NOQUOTE))"
15221 +                vars="%sysfunc(sasmsg(sashelp.dmine, rpt_varcount_vlabel, NOQUOTE))"
15222 +                name="%sysfunc(sasmsg(sashelp.dmine, save_location_vlabel, NOQUOTE))"
15223 +                %if ("&EM_PROPERTY_TYPE"= "SAS7BDAT") %then %do;
15224 +                    lib= "%sysfunc(sasmsg(sashelp.dmine, rpt_datalib_vlabel, NOQUOTE))"
15225 +                %end;
15226 +                ;
15227 +        run;
15229 +        *** PRINT TO OUTPUT;
15231 +        title "%sysfunc(sasmsg(sashelp.dmine, save_results_title, NOQUOTE))";
15232 +        proc print data=&EM_USER_SAVEOUT label noobs; run;
15233 +        %EM_REPORT(key=SAVEOUT, viewtype=DATA, autodisplay=Y);
15234 +        title;
15236 +    %end;
15238 +    *** SAVE FORMATS **********************************************************;
15240 +    *** CHECK REPLACE CONSTRAINT FOR FORMATS;
15242 +    %if ((%sysfunc(cexist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._FORMATS)) and
15243 +        "&EM_PROPERTY_TYPE"="SAS7BDAT") and
15244 +        ("&EM_PROPERTY_REPLACE"="N"))
15245 +            %then %do;
15246 +                %put &EM_CODEBAR;
15247 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
15248 +                %put &WARNING;
15249 +                %put &EM_CODEBAR;
15250 +                %goto quit;
15251 +            %end;
15253 +    %if ((%sysfunc(fileexist(&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt)) and
15254 +        "&EM_PROPERTY_TYPE" ne "SAS7BDAT") and
15255 +        ("&EM_PROPERTY_REPLACE"="N"))
15256 +           %then %do;
15257 +                %put &EM_CODEBAR;
15258 +                %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
15259 +                %put &WARNING;
15260 +                %put &EM_CODEBAR;
15261 +                %goto quit;
15262 +            %end;
15264 +    *** WRITE FORMAT CATALOGS OR TRANSPORT FILE TO ACCOMPANY SAVED DATA;
15265 +    *** CONTINGENT ON FORMATS EXISTING;
15266 +    *** PARSE NODE VARIABLE SET FOR FORMATS;
15268 +    %let _FORMAT_FLAG = 0;
15269 +    data _formats;
15270 +        length format $32; /* AVOID MERGE VARIABLE LENGTH WARNING */
15271 +        set &EM_DATA_VARIABLESET(keep=format where=(format ne '')) end=eof;
15272 +        format = tranwrd(format, '.', '');
15273 +        if indexc(format, '$') then fmttype = 'C';
15274 +        else fmttype = 'N';
15275 +        if eof then call symput('_FORMAT_FLAG',strip(put(1,1.)));
15276 +    run;
15277 +    %if (&_FORMAT_FLAG) %then %EM_SAVEXT_CATALOG(_formats);
15278 +    proc delete data=_formats; run;
15280 +    *** HOUSEKEEPING **********************************************************;
15282 +    %quit:
15284 +    %if ^(%sysfunc(libref(_em_save))) %then %do;
15285 +        libname &EM_PROPERTY_LIB clear;
15286 +    %end;
15288 +    %if (%sysfunc(exist(_save_output_temp))) %then %do;
15289 +        proc delete data=_save_output_temp; run;
15290 +    %end;
15292 +%mend EM_SAVEXT_TRAIN;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref _TRAIN has been deassigned.
NOTE: %INCLUDE (level 1) file _SAVUTIL is file SASHELP.EMUTIL.SAVEXT_MACROS.SOURCE.
15293 +*** UTILITY MACROS FOR EMSAVE NODE ********************************************;
15295 +*** FUNCTIONALITY TO SAVE SAS DATA SETS ***************************************;
15296 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15298 +%macro EM_SAVEXT_SAS(_SAVE_ROLE, _SAVE_SET);
15300 +    *** CHECK SAS SET NAME LENGTH;
15302 +    %if %symexist(EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
15303 +        %if ("&EM_SAVEXT_SAS_NAME_LENGTH"="") %then %let EM_SAVEXT_SAS_NAME_LENGTH=30;
15304 +    %end;
15305 +    %else %let EM_SAVEXT_SAS_NAME_LENGTH=30;                                /* 30 FOR OUTSIDE VENDOR LIBS */
15307 +    %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_SAS_NAME_LENGTH) %then %do;
15308 +        %put &EM_CODEBAR;
15309 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_namelengthsas_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
15310 +        %put &WARNING;
15311 +        %put &EM_CODEBAR;
15312 +        *** REVERTING TO DEFAULT NAME;
15313 +        %let EM_PROPERTY_NAME = em_save;
15314 +    %end;
15316 +    *** CHECK REPLACE CONSTRAINT FOR DATA SET;
15318 +    %if (%sysfunc(exist(&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE)) and
15319 +        ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15320 +        %put &EM_CODEBAR;
15321 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
15322 +        %put &WARNING;
15323 +        %put &EM_CODEBAR;
15324 +        %goto quit;
15325 +    %end;
15327 +    *** WRITE SAVED DATA SET;
15329 +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;
15331 +    data &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
15332 +        set &_SAVE_SET (obs=&EM_PROPERTY_OUTOBS);
15333 +        keep %EM_SAVEXT_VARS;
15334 +    run;
15336 +    *** WRITE RESULTS *********************************************************;
15337 +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
15339 +    %let _dsid=%sysfunc(open(&_SAVE_SET));
15340 +    %if &_dsid %then %do;
15341 +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
15342 +        %let _rc=%sysfunc(close(&_dsid));
15343 +        %if %eval(&_SAVE_NOBS < 0) %then %do;
15344 +            proc sql noprint;
15345 +                select count(*) into: _SAVE_NOBS
15346 +                from &_SAVE_SET;
15347 +            ;
15348 +            quit;
15349 +        %end;
15350 +    %end;
15351 +    %else %do;
15352 +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE;
15353 +        %put &EM_CODEBAR;
15354 +        %let ERROR2 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &EM_PROPERTY_LIB..&EM_PROPERTY_NAME._&_SAVE_ROLE));
15355 +        %put &ERROR2;
15356 +        %put &EM_CODEBAR;
15357 +        %goto quit;
15358 +    %end;
15360 +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
15361 +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
15362 +    %end;
15364 +    data _save_output_temp_record;
15365 +        length lib $20 name $255 nobs $20 outnobs $20 vars $20;
15366 +        vars=left("&EM_NUM_SAVEXT_VARS");
15367 +        outnobs=left("&EM_PROPERTY_OUTOBS");
15368 +        nobs=left("&_SAVE_NOBS");
15369 +        lib= left("&EM_PROPERTY_LIB");
15370 +        name=left("%sysfunc(pathname(&EM_PROPERTY_LIB))&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE)");
15371 +    run;
15373 +    proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
15374 +    proc delete data=_save_output_temp_record; run;
15376 +    *** HOUSEKEEPING **********************************************************;
15378 +    %quit:
15380 +    %if %symexist(_SAVE_NOBS) %then %do;
15381 +        data _null_;
15382 +            call symdel('_SAVE_NOBS', 'NOWARN');
15383 +        run;
15384 +    %end;
15386 +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
15387 +        data _null_;
15388 +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
15389 +        run;
15390 +    %end;
15392 +%mend EM_SAVEXT_SAS;
15394 +*** FUNCTIONALITY TO SAVE NON-SAS FORMATS *************************************;
15395 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15397 +%macro EM_SAVEXT_PXPT(_SAVE_ROLE, _SAVE_SET);
15399 +    *** ACCOUNT FOR DEFAULT DIR;
15401 +    %if ("&EM_PROPERTY_DIRECTORYSELECTOR" = "") %then %let EM_PROPERTY_DIRECTORYSELECTOR = %nrbquote(&EM_NODEDIR);
15403 +    *** CHECK JMP NAME LENGTH;
15405 +    %if %symexist(EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
15406 +        %if ("&EM_SAVEXT_JMP_NAME_LENGTH"= "") %then %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
15407 +    %end;
15408 +    %else %let EM_SAVEXT_JMP_NAME_LENGTH= 32;
15410 +    %if ("&EM_PROPERTY_TYPE"="JMP") %then %do;
15411 +        %if %eval((%length(&EM_PROPERTY_NAME._&_SAVE_ROLE)) > &EM_SAVEXT_JMP_NAME_LENGTH) %then %do;
15412 +            %put &EM_CODEBAR;
15413 +            %let WARNING= %sysfunc(sasmsg(sashelp.dmine, save_namelengthjmp_warn, NOQUOTE, &EM_PROPERTY_NAME._&_SAVE_ROLE));
15414 +            %put &WARNING;
15415 +            %put &EM_CODEBAR;
15416 +            *** REVERTING TO DEFAULT NAME;
15417 +            %let EM_PROPERTY_NAME = em_save;
15418 +        %end;
15419 +    %end;
15421 +    *** ESTABLISH FULL SAVE FILE NAME FOR USE BELOW;
15423 +    %let _OUT_FILE_NAME=&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._&_SAVE_ROLE..%lowcase(&EM_PROPERTY_TYPE);
15425 +    *** CHECK REPLACE CONSTRAINT;
15427 +    %if (%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15428 +        %put &EM_CODEBAR;
15429 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_replace_warn, NOQUOTE, &_OUT_FILE_NAME));
15430 +        %put &WARNING;
15431 +        %put &EM_CODEBAR;
15432 +        %goto quit;
15433 +    %end;
15434 +    %else %if (^%sysfunc(fileexist(&_OUT_FILE_NAME)) and ("&EM_PROPERTY_REPLACE"="N")) %then %do;
15435 +        %let _REPLACE= ;
15436 +    %end;
15437 +    %else %do;
15438 +        %let _REPLACE=replace;
15439 +    %end;
15441 +    *** EXCEL 2010 LIMITATIONS;
15442 +    *** CAN BE OVERRIDDEN BY STARTUP CODE;
15444 +    %if %symexist(_EXCEL_MAX_ROWS) %then %do;
15445 +        %if ("&_EXCEL_MAX_ROWS"= "") %then %let _EXCEL_MAX_ROWS= 1048575;
15446 +    %end;
15447 +    %else %let _EXCEL_MAX_ROWS= 1048575;
15449 +    %if %symexist(_EXCEL_MAX_COLS) %then %do;
15450 +        %if ("&_EXCEL_MAX_COLS"="") %then %let _EXCEL_MAX_COLS= 16384;
15451 +    %end;
15452 +    %else %let _EXCEL_MAX_COLS=16384;
15454 +    *** GET INFO FOR EXCEL FILE SIZE LIMITATIONS AND OUTPUT;
15456 +    %let _dsid=%sysfunc(open(&_SAVE_SET));
15457 +    %if &_dsid %then %do;
15458 +        %let _SAVE_NOBS=%sysfunc(attrn(&_dsid, NLOBS));
15459 +        %let _rc=%sysfunc(close(&_dsid));
15460 +        %if %eval(&_SAVE_NOBS < 0) %then %do;
15461 +            proc sql noprint;
15462 +                select count(*) into: _SAVE_NOBS
15463 +                from &_SAVE_SET;
15464 +                ;
15465 +            quit;
15466 +        %end;
15467 +    %end;
15468 +    %else %do;
15469 +        %let EMEXCEPTIONSTRING=exception.server.IO.OPEN,&_SAVE_SET;
15470 +        %put &EM_CODEBAR;
15471 +        %let ERROR3 = %sysfunc(sasmsg(sashelp.dmine, IO.OPEN_ERR, NOQUOTE, &_SAVE_SET));
15472 +        %put &ERROR3;
15473 +        %put &EM_CODEBAR;
15474 +        %goto quit;
15475 +    %end;
15477 +    *** CHECK EXCEL FILE SIZE;
15479 +    %if ("&EM_PROPERTY_TYPE"="XLSX") and (%eval(&_SAVE_NOBS > &_EXCEL_MAX_ROWS) or %eval(&EM_NUM_SAVEXT_VARS > &_EXCEL_MAX_COLS)) %then %do;
15480 +        %put &EM_CODEBAR;
15481 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_excel_limit_warn, NOQUOTE, &_SAVE_SET));
15482 +        %put &WARNING;
15483 +        %put &EM_CODEBAR;
15484 +    %end;
15486 +    *** EXECUTE EXPORT ********************************************************;
15487 +    *** VIEW USED TO AVOID EMPTY COLUMNS IN EXPORTED TAB AND CSV FILES ********;
15489 +    %if ("&EM_PROPERTY_ALLOBS"="Y") %then %let EM_PROPERTY_OUTOBS=MAX;      /* OTHERWISE ONLY EM_PROPERTY_OUTOBS WILL BE WRITTEN */
15491 +    %if ("&EM_PROPERTY_OUTOBS" ne "MAX") %then %do;
15492 +        %if (%eval(&EM_PROPERTY_OUTOBS > &_SAVE_NOBS)) %then %let EM_PROPERTY_OUTOBS= MAX;
15493 +    %end;
15495 +    %if ("&EM_PROPERTY_TYPE"="TXT" or "&EM_PROPERTY_TYPE"="CSV") %then %do;
15497 +        *** SPECIAL CONDITION FOR TAB PROPERTY;
15499 +        %if ("&EM_PROPERTY_TYPE"="TXT") %then %let EM_PROPERTY_TYPE=tab;
15501 +        data _temp_save_view /view=_temp_save_view;
15502 +            set &_SAVE_SET;
15503 +            keep %EM_SAVEXT_VARS;
15504 +        run;
15506 +        %let SYSCC=0;
15507 +        proc export data=_temp_save_view(obs=&EM_PROPERTY_OUTOBS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
15508 +        run;
15509 +        quit;
15511 +    %end;
15512 +    %else %do;
15514 +        %let SYSCC=0;
15515 +        proc export data=&_SAVE_SET(obs=&EM_PROPERTY_OUTOBS keep=%EM_SAVEXT_VARS) outfile="&_OUT_FILE_NAME" &_REPLACE dbms=&EM_PROPERTY_TYPE;
15516 +        run;
15517 +        quit;
15519 +    %end;
15521 +    %if (^&SYSCC=0) %then %do;
15522 +        %let EMEXCEPTIONSTRING=exception.server.IO.CREATE,&_OUT_FILE_NAME;
15523 +        %put &EM_CODEBAR;
15524 +        %let ERROR4 = %sysfunc(sasmsg(sashelp.dmine, IO.CREATE_ERR, NOQUOTE, &_OUT_FILE_NAME));
15525 +        %put &ERROR4;
15526 +        %put &EM_CODEBAR;
15527 +        %goto quit;
15528 +    %end;
15530 +    *** WRITE RESULTS *********************************************************;
15531 +    *** CONTINGENT ON SAVED FILE EXISTING *************************************;
15533 +    %if %sysfunc(fileexist(&_OUT_FILE_NAME)) %then %do;
15534 +        data _save_output_temp_record;
15535 +            length name $255 nobs $20 outnobs $20 vars $20;
15536 +            vars=left("&EM_NUM_SAVEXT_VARS");
15537 +            outnobs=left("&EM_PROPERTY_OUTOBS");
15538 +            nobs=left("&_SAVE_NOBS");
15539 +            name=left("&_OUT_FILE_NAME");
15540 +        run;
15541 +        proc append base=_save_output_temp data=_save_output_temp_record force; run; quit;
15542 +        proc delete data=_save_output_temp_record; run;
15543 +    %end;
15544 +    %else %do;
15545 +        %let EMEXCEPTIONSTRING=exception.server.IO.CANTREADFILE,&_OUT_FILE_NAME;
15546 +        %put &EM_CODEBAR;
15547 +        %let ERROR5 = %sysfunc(sasmsg(sashelp.dmine, IO.CANTREADFILE_ERR, NOQUOTE, &_OUT_FILE_NAME));
15548 +        %put &ERROR5;
15549 +        %put &EM_CODEBAR;
15550 +        %goto quit;
15551 +    %end;
15553 +    *** HOUSEKEEPING **********************************************************;
15555 +    %quit:
15557 +    %if ("&EM_PROPERTY_TYPE"="tab") %then %let EM_PROPERTY_TYPE=TXT;
15559 +    %if %sysfunc(exist(_temp_save_view, VIEW)) %then %do;
15560 +        proc datasets lib=work memtype=view nolist;
15561 +            delete _temp_save_view;
15562 +        run;
15563 +        quit;
15564 +    %end;
15566 +    %if %symexist(_SAVE_NOBS) %then %do;
15567 +        data _null_;
15568 +            call symdel('_SAVE_NOBS', 'NOWARN');
15569 +        run;
15570 +    %end;
15572 +    %if %symexist(EM_NUM_SAVEXT_VARS) %then %do;
15573 +        data _null_;
15574 +            call symdel('EM_NUM_SAVEXT_VARS', 'NOWARN');
15575 +        run;
15576 +    %end;
15578 +%mend EM_SAVEXT_PXPT;
15580 +*** SAVES SAS CATALOGS FOR OUTPUT DATA SETS ***********************************;
15581 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15583 +%macro EM_SAVEXT_CATALOG(_FORMATS);
15585 +    *** SORT AND REMOVE DUPLICATES;
15587 +    proc sort data=&_FORMATS nodupkey;
15588 +        by format;
15589 +    run;
15590 +    quit;
15592 +    *** RETRIEVE FORMAT LOCATION INFO AND ASSIGNED CATALOGS IN ACTIVE SESSION;
15594 +    proc sort data=sashelp.vformat(keep=fmtname libname memname where=(libname ne '' and memname ne ''))
15595 +        out=_formats2(rename=(fmtname=format));
15596 +        by fmtname;
15597 +    run;
15598 +    quit;
15600 +    *** MERGE SAS FORMATS WITH LOCATION;
15602 +    data &_FORMATS;
15603 +        merge &_FORMATS(in=_a) _formats2(in=_b);
15604 +        by format;
15605 +        if _a and _b then output;
15606 +    run;
15608 +    *** IF &_FORMATS IS EMPTY AFTER MERGE THEN NO FORMATS BELONG TO THE SAVED SET;
15610 +    proc contents data=&_FORMATS out=_formats_content_temp noprint; run;
15611 +    data _null_;
15612 +        set _formats_content_temp (obs=1);
15613 +        if nobs > 0 then call symput('_USER_FORMATS_FLAG','1');
15614 +        else call symput('_USER_FORMATS_FLAG','0');
15615 +    run;
15616 +    %if (^&_USER_FORMATS_FLAG) %then %do;
15617 +        %put &EM_CODEBAR;
15618 +        %let WARNING = %sysfunc(sasmsg(sashelp.dmine, save_nocats_warn, NOQUOTE));
15619 +        %put &WARNING;
15620 +        %put &EM_CODEBAR;
15621 +        %goto quit;
15622 +    %end;
15624 +    *** SAVE FORMATS AS CATALOG OR TRANSPORT FORMAT;
15626 +    proc sort data=&_FORMATS;
15627 +        by libname memname;
15628 +    run;
15629 +    quit;
15631 +    *** WRITING CATALOG IN WORK AVOIDS OVERWRITING SAS CATALOG;
15632 +    *** FOR CASE REPLACE=N, TYPE ne SAS7BDAT;
15634 +    data _null_;
15635 +        set &_FORMATS end=eof;
15636 +        by libname memname;
15637 +        if first.libname or first.memname then do;
15638 +            call execute('proc catalog cat='|| strip(libname)||'.'||strip(memname)||';');
15639 +            call execute('copy out=work.&EM_PROPERTY_NAME._FORMATS et=format ;');
15640 +            call execute('select ');
15641 +        end;
15642 +        if strip(fmttype) eq 'C' then do;
15643 +            call execute(' '||strip(tranwrd(format, '$', ''))||'.formatc');
15644 +        end;
15645 +        else call execute(' '||strip(format)||'.format');
15646 +        if last.libname or last.memname then do;
15647 +            call execute(';');
15648 +            call execute('run;');
15649 +        end;
15650 +        if eof then call execute('quit;');
15651 +    run;
15653 +    %if ("&EM_PROPERTY_TYPE" = "SAS7BDAT") %then %do;
15654 +        proc copy in=work out=&EM_PROPERTY_LIB; select &EM_PROPERTY_NAME._FORMATS; run; quit;
15655 +    %end;
15656 +    %else %do;
15657 +        proc cport cat=work.&EM_PROPERTY_NAME._formats file="&EM_PROPERTY_DIRECTORYSELECTOR.&EM_DSEP.&EM_PROPERTY_NAME._FORMATS.xpt"; run;
15658 +    %end;
15660 +    *** HOUSEKEEPING **********************************************************;
15662 +    proc datasets lib=work memtype=catalog nolist;
15663 +        delete &EM_PROPERTY_NAME._FORMATS;
15664 +    run;
15665 +    quit;
15667 +    %quit:
15669 +    proc delete data=_formats_content_temp; run;
15670 +    proc delete data=_formats2; run;
15672 +%mend EM_SAVEXT_CATALOG;
15674 +*** FIND VARIABLES TO KEEP ****************************************************;
15675 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15677 +%macro EM_SAVEXT_GET_VARS(_SAVE_ROLE, _SAVE_SET);
15679 +    %if("%sysfunc(strip(%upcase(&_SAVE_ROLE)))" ne "TRANSACTION") %then %do;
15681 +        *** COMPARE INPUT SET AND NODE VARIABLE SET TO GET THE EXACT VARIABLES TO EXPORT;
15683 +        proc contents data=&_SAVE_SET out=_input_vars(keep=name) noprint; run;
15684 +        proc sort data=_input_vars; by name; run;
15686 +        *** EXCLUDE REJECTED OR UNUSED VARIABLES;
15688 +        proc sort data=&EM_DATA_VARIABLESET
15689 +            (where=(use='Y' or (use='D' and role ne 'REJECTED'))) out=_train_vars(keep=name);
15690 +            by name;
15691 +        run;
15693 +        data _em_savext_vars;
15694 +            merge _input_vars(in=_a) _train_vars(in=_b);
15695 +            by name;
15696 +            keep name;
15697 +            if _a and _b then output;
15698 +        run;
15700 +        *** CREATE VARIABLE AND NUMBER MACROS FOR EACH INPUT SET;
15702 +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
15704 +        *** HOUSEKEEPING;
15706 +        proc delete data=_input_vars; run;
15707 +        proc delete data=_train_vars; run;
15708 +        proc delete data=_em_savext_vars; run;
15710 +    %end;
15711 +    %else %do; /* TRANSCATION TABLE VARIABLES ARE NOT LISTED IN THE TRAINING VARIABLE SET */
15713 +        proc contents data=&_SAVE_SET out=_em_savext_vars(keep=name) noprint; run;
15714 +        %em_varMacro(name=EM_SAVEXT_VARS, metadata=_em_savext_vars, key=name, nummacro=EM_NUM_SAVEXT_VARS);
15715 +        proc delete data=_em_savext_vars; run;
15717 +    %end;
15719 +%mend EM_SAVEXT_GET_VARS;
15721 +*** CHECKS IF A SET OR VIEW EXISTS ********************************************;
15722 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15724 +%macro EM_SAVEXT_SET_EXISTS(_DATASET);
15726 +    %if (%sysfunc(exist(&_DATASET)) or
15727 +        %sysfunc(exist(&_DATASET, VIEW))) and
15728 +        "&_DATASET" ne "" %then %do;
15729 +            %let _rc=1;
15730 +    %end;
15731 +    %else %do;
15732 +            %let _rc=0;
15733 +    %end;
15735 +    &_rc.
15737 +%mend EM_SAVEXT_SET_EXISTS;
15739 +*** REGISTERS SETS INTO MACRO VARIABLE ARRAY USED IN SAVING PROCESS ***********;
15740 +*** CALLED BY EM_SAVEXT_TRAIN *************************************************;
15742 +%macro EM_SAVEXT_REGISTER(_DATASET, _ROLE, _i);
15744 +    _save_set="&_DATASET";
15745 +    _save_role="&_ROLE";
15746 +    _save_set_index=cats('_save_set', strip(put(&_i,1.)));
15747 +    _save_role_index=cats('_save_role', strip(put(&_i,1.)));
15748 +    call symput(_save_set_index, _save_set);
15749 +    call symput(_save_role_index, _save_role);
15751 +%mend EM_SAVEXT_REGISTER;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref _SAVUTIL has been deassigned.
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK._INPUT_VARS has 14 observations and 1 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK._INPUT_VARS.
NOTE: The data set WORK._INPUT_VARS has 14 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS3.EMSAVE2_VARIABLESET.
      WHERE (use='Y') or ((use='D') and (role not = 'REJECTED'));
NOTE: The data set WORK._TRAIN_VARS has 7 observations and 1 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
WARNING: Multiple lengths were specified for the BY variable NAME by input data sets. This might cause unexpected results.
NOTE: There were 14 observations read from the data set WORK._INPUT_VARS.
NOTE: There were 7 observations read from the data set WORK._TRAIN_VARS.
NOTE: The data set WORK._EM_SAVEXT_VARS has 7 observations and 1 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The file MACFILE is:
      Catalog Name=WORK.EMUTIL.MACRO.SOURCE,
      Catalog Page Size=4096,
      Number of Catalog Pages=4,
      Created=Fri, May 17, 2019 12:53:30 AM,
      Last Modified=Fri, May 17, 2019 12:53:30 AM,
      Filename=C:\Users\QR\AppData\Local\Temp\SAS Temporary Files\_TD16228_JOHNLAW-PC_\emutil.sas7bcat,
      Release Created=9.0401M3,Host Created=W32_7PRO
 
NOTE: 6 records were written to the file MACFILE.
      The minimum record length was 10.
      The maximum record length was 73.
NOTE: There were 7 observations read from the data set WORK._EM_SAVEXT_VARS.
NOTE: DATA statement used (Total process time):
      real time           0.22 seconds
      cpu time            0.04 seconds
 
 
NOTE: %INCLUDE (level 1) file MACFILE is file WORK.EMUTIL.MACRO.SOURCE.
15757 +%macro EM_SAVEXT_VARS;
15758 +"LOG_buy"n "LOG_high"n "LOG_lastDone"n "LOG_low"n "LOG_open"n "LOG_sell"n
15759 +"LOG_vol"n
15760 +%mend EM_SAVEXT_VARS;
15761 +%global EM_NUM_SAVEXT_VARS;
15762 +%let EM_NUM_SAVEXT_VARS = 7 ;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref MACFILE has been deassigned.
 
NOTE: Deleting WORK._INPUT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: Deleting WORK._TRAIN_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._EM_SAVEXT_VARS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set EMWS3.FIMPORT2_DATA.
NOTE: View EMWS3.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
NOTE: There were 2 observations read from the data set EMWS3.FIMPORT2_TRAIN.
NOTE: There were 2 observations read from the data set EMWS3.TRANS2_TRAIN.
NOTE: The data set WQD7005.LAB2SCORE_TRAIN has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.11 seconds
      cpu time            0.09 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS3.FIMPORT2_DATA.
NOTE: View EMWS3.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2 observations read from the data set EMWS3.FIMPORT2_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
 
NOTE: The data set WORK._SAVE_OUTPUT_TEMP_RECORD has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Appending WORK._SAVE_OUTPUT_TEMP_RECORD to WORK._SAVE_OUTPUT_TEMP.
NOTE: BASE data set does not exist. DATA file is being copied to BASE file.
NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP_RECORD.
NOTE: The data set WORK._SAVE_OUTPUT_TEMP has 1 observations and 5 variables.
NOTE: PROCEDURE APPEND used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._SAVE_OUTPUT_TEMP_RECORD (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK._SAVE_OUTPUT_TEMP.
NOTE: The data set EMWS3.EMSAVE2_SAVEOUT has 1 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS3.EMSAVE2_SAVEOUT.
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS3.EMSAVE2_VARIABLESET.
      WHERE format not = ' ';
NOTE: The data set WORK._FORMATS has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._FORMATS (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK._SAVE_OUTPUT_TEMP (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
15763
15764  *------------------------------------------------------------*;
15765  * End TRAIN: EMSave2;
15766  *------------------------------------------------------------*;
 
15767  *------------------------------------------------------------*;
15768  * Close any missing semi colons;
15769  *------------------------------------------------------------*;
15770  ;
15771  ;
15772  ;
15773  ;
15774  quit;
15775  *------------------------------------------------------------*;
15776  * Close any unbalanced quotes;
15777  *------------------------------------------------------------*;
15778  /*; *"; *'; */
15779  ;
15780  run;
15781  quit;
15782  /* Reset EM Options */
15783  options formchar="|----|+|---+=|-/\<>*";
15784  options nocenter ls=256 ps=10000;
15785  goptions reset=all device=GIF NODISPLAY;
 
15786  proc sort data=WORK.EM_USER_REPORT;
15787  by ID VIEW;
15788  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                May 17, 2019
Time:                00:53:31
*------------------------------------------------------------*
15890  %let EMEXCEPTIONSTRING=;
15891  *------------------------------------------------------------*;
15892  * SCORE: EMSave2;
15893  *------------------------------------------------------------*;
15894  %let EM_ACTION = SCORE;
15895  %let syscc = 0;
15896  *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
15897
15898  %macro EM_SAVEXT_MAIN;
15899
15900     %if %upcase("&EM_ACTION") = "CREATE" %then %do;
15901         filename _create catalog 'sashelp.emutil.savext_create.source';
15902         %include _create;
15903         filename _create;
15904         %EM_SAVEXT_CREATE;
15905     %end;
15906     %else
15907     %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
15908         filename _train catalog 'sashelp.emutil.savext_train.source';
15909         %include _train;
15910         filename _train;
15911         %EM_SAVEXT_TRAIN;
15912     %end;
15913
15914  %mend EM_SAVEXT_MAIN;
15915
15916  %EM_SAVEXT_MAIN;
15917
15918  *------------------------------------------------------------*;
15919  * End SCORE: EMSave2;
15920  *------------------------------------------------------------*;
 
15921  *------------------------------------------------------------*;
15922  * EMSave2: Scoring DATA data;
15923  *------------------------------------------------------------*;
15924  data EMWS3.EMSave2_TRAIN
15925  / view=EMWS3.EMSave2_TRAIN
15926  ;
15927  set EMWS3.Trans2_TRAIN
15928  ;
15929  run;
 
NOTE: DATA STEP view saved on file EMWS3.EMSAVE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS3.TRANS2_TRAIN.VIEW used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.07 seconds
 
 
15930  quit;
 
15932  *------------------------------------------------------------*;
15933  * EMSave2: Computing metadata for TRAIN data;
15934  *------------------------------------------------------------*;
 
NOTE: View EMWS3.EMSAVE2_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.09 seconds
 
NOTE: View EMWS3.EMSAVE2_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.07 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                May 17, 2019
Time:                00:53:32
*------------------------------------------------------------*
16295  %let EMEXCEPTIONSTRING=;
16296  *------------------------------------------------------------*;
16297  * REPORT: EMSave2;
16298  *------------------------------------------------------------*;
16299  %let EM_ACTION = REPORT;
16300  %let syscc = 0;
16301  *** MAIN MACRO FOR EMSAVE EXTENSION NODE;
16302
16303  %macro EM_SAVEXT_MAIN;
16304
16305     %if %upcase("&EM_ACTION") = "CREATE" %then %do;
16306         filename _create catalog 'sashelp.emutil.savext_create.source';
16307         %include _create;
16308         filename _create;
16309         %EM_SAVEXT_CREATE;
16310     %end;
16311     %else
16312     %if %upcase("&EM_ACTION") = "TRAIN" %then %do;
16313         filename _train catalog 'sashelp.emutil.savext_train.source';
16314         %include _train;
16315         filename _train;
16316         %EM_SAVEXT_TRAIN;
16317     %end;
16318
16319  %mend EM_SAVEXT_MAIN;
16320
16321  %EM_SAVEXT_MAIN;
16322
16323  *------------------------------------------------------------*;
16324  * End REPORT: EMSave2;
16325  *------------------------------------------------------------*;
 
16326  /* Reset EM Options */
16327  options formchar="|----|+|---+=|-/\<>*";
16328  options nocenter ls=256 ps=10000;
16329  goptions reset=all device=GIF NODISPLAY;
 
